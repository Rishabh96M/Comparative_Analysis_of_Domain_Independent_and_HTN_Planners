INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_22/bws_problem_22_1.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.008s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1608 relevant atoms
1078 auxiliary atoms
2686 final queue length
4670 total queue pushes
Completing instantiation... [0.020s CPU, 0.015s wall-clock]
Instantiating: [0.030s CPU, 0.025s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
23 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.022s wall-clock]
1430 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
44 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.010s wall-clock]
Reordering and filtering variables...
45 of 45 variables necessary.
23 of 45 mutex groups necessary.
968 of 968 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.006s wall-clock]
Translator variables: 45
Translator derived variables: 0
Translator facts: 552
Translator goal facts: 22
Translator mutex groups: 23
Translator total mutex groups size: 529
Translator operators: 968
Translator axioms: 0
Translator task size: 8342
Translator peak memory: 36976 KB
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.085s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.8075e-05s, 24488 KB] reading input...
[t=0.00250297s, 25340 KB] done reading input!
[t=0.00325134s, 25736 KB] Initializing landmark count heuristic...
[t=0.00327711s, 25736 KB] Generating landmark graph...
[t=0.00333418s, 25736 KB] Building a landmark graph with reasonable orders.
[t=0.00338785s, 25736 KB] Initializing Exploration...
[t=0.00364318s, 26000 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0144036s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0144789s, 26528 KB] Landmarks generation time: 0.011146s
[t=0.0144923s, 26528 KB] Discovered 105 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0145102s, 26528 KB] 486 edges
[t=0.0145201s, 26528 KB] approx. reasonable orders
[t=0.0152213s, 26528 KB] approx. obedient reasonable orders
[t=0.0152498s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0152588s, 26528 KB] Landmarks generation time: 0.0119794s
[t=0.0152681s, 26528 KB] Discovered 105 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0152759s, 26528 KB] 502 edges
[t=0.0152839s, 26528 KB] Landmark graph generation time: 0.0120136s
[t=0.0152923s, 26528 KB] Landmark graph contains 105 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0153002s, 26528 KB] Landmark graph contains 502 orderings.
[t=0.0156192s, 26528 KB] Simplifying 3828 unary operators... done! [2904 unary operators]
[t=0.0164889s, 26528 KB] time to simplify: 0.000928229s
[t=0.0166059s, 26528 KB] Initializing additive heuristic...
[t=0.0166194s, 26528 KB] Initializing FF heuristic...
[t=0.0166691s, 26528 KB] Building successor generator...done!
[t=0.0168452s, 26528 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0168539s, 26528 KB] time for successor generation creation: 0.000143231s
[t=0.016866s, 26528 KB] Variables: 45
[t=0.0168742s, 26528 KB] FactPairs: 552
[t=0.0168823s, 26528 KB] Bytes per state: 20
[t=0.0169687s, 26528 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0170004s, 26528 KB] 45 initial landmarks, 22 goal landmarks
[t=0.0170496s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0170588s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0170672s, 26528 KB] g=0, 1 evaluated, 0 expanded
[t=0.0170808s, 26528 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0170895s, 26528 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0171793s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0171891s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0171974s, 26528 KB] g=1, 4 evaluated, 3 expanded
[t=0.0172321s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0172409s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0172491s, 26528 KB] g=2, 5 evaluated, 4 expanded
[t=0.0173812s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0173903s, 26528 KB] g=4, 10 evaluated, 9 expanded
[t=0.0176406s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0176499s, 26528 KB] g=6, 20 evaluated, 19 expanded
[t=0.0177383s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0177585s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0177674s, 26528 KB] g=6, 23 evaluated, 22 expanded
[t=0.0179052s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.017914s, 26528 KB] g=8, 28 evaluated, 27 expanded
[t=0.0180697s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.018079s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0180873s, 26528 KB] g=10, 34 evaluated, 33 expanded
[t=0.0181704s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0181792s, 26528 KB] g=11, 37 evaluated, 36 expanded
[t=0.0182133s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0182272s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0182357s, 26528 KB] g=12, 38 evaluated, 37 expanded
[t=0.0184165s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0184254s, 26528 KB] g=14, 45 evaluated, 44 expanded
[t=0.01846s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0184692s, 26528 KB] g=14, 46 evaluated, 45 expanded
[t=0.0187187s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0187276s, 26528 KB] g=15, 56 evaluated, 55 expanded
[t=0.0187626s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0187713s, 26528 KB] g=16, 57 evaluated, 56 expanded
[t=0.0188559s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0188646s, 26528 KB] g=17, 60 evaluated, 59 expanded
[t=0.0190756s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.019085s, 26528 KB] g=18, 68 evaluated, 67 expanded
[t=0.0194117s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.019422s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0194307s, 26528 KB] g=20, 81 evaluated, 80 expanded
[t=0.0196308s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0196399s, 26528 KB] g=22, 89 evaluated, 88 expanded
[t=0.0198903s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0199s, 26528 KB] g=23, 99 evaluated, 98 expanded
[t=0.0199358s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0199448s, 26528 KB] g=24, 100 evaluated, 99 expanded
[t=0.0203128s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0203224s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0203315s, 26528 KB] g=26, 115 evaluated, 114 expanded
[t=0.0205581s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0205672s, 26528 KB] g=28, 124 evaluated, 123 expanded
[t=0.0206027s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0206115s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0206196s, 26528 KB] g=28, 125 evaluated, 124 expanded
[t=0.0208587s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0208674s, 26528 KB] g=30, 134 evaluated, 133 expanded
[t=0.0209025s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0209113s, 26528 KB] g=30, 135 evaluated, 134 expanded
[t=0.0212596s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0212689s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0212783s, 26528 KB] g=32, 149 evaluated, 148 expanded
[t=0.0214831s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0214919s, 26528 KB] g=34, 157 evaluated, 156 expanded
[t=0.0215247s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0215335s, 26528 KB] g=34, 158 evaluated, 157 expanded
[t=0.0219472s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.02196s, 26528 KB] g=36, 174 evaluated, 173 expanded
[t=0.0219934s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0220025s, 26528 KB] g=36, 175 evaluated, 174 expanded
[t=0.0224002s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0224101s, 26528 KB] g=38, 192 evaluated, 191 expanded
[t=0.0227501s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0227595s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0227676s, 26528 KB] g=40, 207 evaluated, 206 expanded
[t=0.0229832s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0229922s, 26528 KB] g=42, 216 evaluated, 215 expanded
[t=0.0231155s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0231246s, 26528 KB] g=42, 221 evaluated, 220 expanded
[t=0.0232926s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0233016s, 26528 KB] g=44, 228 evaluated, 227 expanded
[t=0.0234716s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0234807s, 26528 KB] g=44, 235 evaluated, 234 expanded
[t=0.0236744s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0236832s, 26528 KB] g=46, 243 evaluated, 242 expanded
[t=0.0237411s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0237503s, 26528 KB] g=46, 245 evaluated, 244 expanded
[t=0.0239482s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0239578s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0239681s, 26528 KB] g=48, 253 evaluated, 252 expanded
[t=0.0245249s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0245346s, 26528 KB] g=54, 276 evaluated, 275 expanded
[t=0.0246589s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0246678s, 26528 KB] g=56, 281 evaluated, 280 expanded
[t=0.0248654s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0248743s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0248824s, 26528 KB] g=58, 289 evaluated, 288 expanded
[t=0.0260027s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0260223s, 26528 KB] g=66, 332 evaluated, 331 expanded
[t=0.0262187s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0262516s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0262601s, 26528 KB] g=68, 335 evaluated, 334 expanded
[t=0.0323844s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0324201s, 26528 KB] g=90, 584 evaluated, 583 expanded
[t=0.0327943s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0328053s, 26528 KB] g=94, 600 evaluated, 599 expanded
[t=0.0329036s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0329129s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0329211s, 26528 KB] g=96, 604 evaluated, 603 expanded
[t=0.0335008s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0335116s, 26528 KB] g=104, 630 evaluated, 629 expanded
[t=0.0335638s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0335727s, 26528 KB] g=104, 632 evaluated, 631 expanded
[t=0.0336423s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.033651s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0336592s, 26528 KB] g=106, 635 evaluated, 634 expanded
[t=0.0355854s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0355974s, 26528 KB] g=136, 743 evaluated, 742 expanded
[t=0.0357422s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.035751s, 26528 KB] g=140, 752 evaluated, 751 expanded
[t=0.0358029s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0358113s, 26528 KB] g=142, 755 evaluated, 754 expanded
[t=0.036057s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0360659s, 26528 KB] g=154, 773 evaluated, 772 expanded
[t=0.0361193s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0361278s, 26528 KB] g=158, 777 evaluated, 776 expanded
[t=0.0361441s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0361525s, 26528 KB] g=159, 778 evaluated, 777 expanded
[t=0.0361666s, 26528 KB] Solution found!
[t=0.0361775s, 26528 KB] Actual search time: 0.0191743s
unstack b22 b10 (1)
put-down b22 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b7 b1 (1)
stack b7 b10 (1)
unstack b5 b6 (1)
put-down b5 (1)
unstack b6 b14 (1)
stack b6 b12 (1)
unstack b14 b4 (1)
put-down b14 (1)
unstack b4 b8 (1)
put-down b4 (1)
unstack b8 b21 (1)
stack b8 b7 (1)
unstack b21 b20 (1)
put-down b21 (1)
pick-up b20 (1)
stack b20 b14 (1)
unstack b13 b19 (1)
put-down b13 (1)
unstack b19 b2 (1)
stack b19 b6 (1)
unstack b2 b15 (1)
stack b2 b20 (1)
unstack b15 b3 (1)
stack b15 b2 (1)
unstack b3 b16 (1)
stack b3 b13 (1)
unstack b16 b11 (1)
stack b16 b3 (1)
unstack b11 b17 (1)
put-down b11 (1)
unstack b17 b18 (1)
stack b17 b5 (1)
unstack b18 b9 (1)
put-down b18 (1)
pick-up b21 (1)
stack b21 b18 (1)
pick-up b4 (1)
stack b4 b16 (1)
pick-up b1 (1)
stack b1 b4 (1)
pick-up b9 (1)
stack b9 b17 (1)
pick-up b11 (1)
stack b11 b9 (1)
unstack b19 b6 (1)
put-down b19 (1)
unstack b6 b12 (1)
put-down b6 (1)
pick-up b12 (1)
stack b12 b11 (1)
pick-up b6 (1)
stack b6 b12 (1)
pick-up b19 (1)
stack b19 b6 (1)
unstack b8 b7 (1)
put-down b8 (1)
unstack b7 b10 (1)
put-down b7 (1)
pick-up b10 (1)
stack b10 b1 (1)
pick-up b7 (1)
stack b7 b10 (1)
pick-up b8 (1)
stack b8 b7 (1)
unstack b19 b6 (1)
put-down b19 (1)
unstack b6 b12 (1)
put-down b6 (1)
unstack b12 b11 (1)
put-down b12 (1)
pick-up b6 (1)
stack b6 b12 (1)
pick-up b19 (1)
stack b19 b6 (1)
unstack b11 b9 (1)
put-down b11 (1)
unstack b9 b17 (1)
put-down b9 (1)
pick-up b11 (1)
stack b11 b9 (1)
unstack b17 b5 (1)
put-down b17 (1)
pick-up b5 (1)
stack b5 b15 (1)
pick-up b17 (1)
stack b17 b5 (1)
unstack b11 b9 (1)
put-down b11 (1)
pick-up b9 (1)
stack b9 b17 (1)
pick-up b11 (1)
stack b11 b9 (1)
unstack b19 b6 (1)
put-down b19 (1)
unstack b6 b12 (1)
put-down b6 (1)
pick-up b12 (1)
stack b12 b11 (1)
pick-up b6 (1)
stack b6 b12 (1)
pick-up b19 (1)
stack b19 b6 (1)
unstack b8 b7 (1)
put-down b8 (1)
unstack b7 b10 (1)
put-down b7 (1)
pick-up b8 (1)
stack b8 b7 (1)
unstack b10 b1 (1)
put-down b10 (1)
unstack b1 b4 (1)
put-down b1 (1)
pick-up b10 (1)
stack b10 b1 (1)
unstack b8 b7 (1)
put-down b8 (1)
pick-up b7 (1)
stack b7 b10 (1)
pick-up b8 (1)
stack b8 b7 (1)
unstack b4 b16 (1)
put-down b4 (1)
unstack b16 b3 (1)
put-down b16 (1)
pick-up b4 (1)
stack b4 b16 (1)
unstack b3 b13 (1)
put-down b3 (1)
pick-up b13 (1)
stack b13 b19 (1)
pick-up b3 (1)
stack b3 b13 (1)
unstack b4 b16 (1)
put-down b4 (1)
pick-up b16 (1)
stack b16 b3 (1)
pick-up b4 (1)
stack b4 b16 (1)
unstack b8 b7 (1)
put-down b8 (1)
unstack b7 b10 (1)
put-down b7 (1)
pick-up b8 (1)
stack b8 b7 (1)
unstack b10 b1 (1)
put-down b10 (1)
pick-up b1 (1)
stack b1 b4 (1)
pick-up b10 (1)
stack b10 b1 (1)
unstack b8 b7 (1)
put-down b8 (1)
pick-up b7 (1)
stack b7 b10 (1)
pick-up b8 (1)
stack b8 b7 (1)
[t=0.0361867s, 26528 KB] Plan length: 160 step(s).
[t=0.0361867s, 26528 KB] Plan cost: 160
[t=0.0361867s, 26528 KB] Expanded 778 state(s).
[t=0.0361867s, 26528 KB] Reopened 0 state(s).
[t=0.0361867s, 26528 KB] Evaluated 779 state(s).
[t=0.0361867s, 26528 KB] Evaluations: 1558
[t=0.0361867s, 26528 KB] Generated 6391 state(s).
[t=0.0361867s, 26528 KB] Dead ends: 0 state(s).
[t=0.0361867s, 26528 KB] Number of registered states: 779
[t=0.0361867s, 26528 KB] Int hash set load factor: 779/1024 = 0.760742
[t=0.0361867s, 26528 KB] Int hash set resizes: 10
[t=0.0361867s, 26528 KB] Search time: 0.0192186s
[t=0.0361867s, 26528 KB] Total time: 0.0361867s
Solution found.
Peak memory: 26528 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.16s
