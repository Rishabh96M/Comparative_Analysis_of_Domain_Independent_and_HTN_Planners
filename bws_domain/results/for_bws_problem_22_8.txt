INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_22/bws_problem_22_8.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
1608 relevant atoms
1078 auxiliary atoms
2686 final queue length
4671 total queue pushes
Completing instantiation... [0.010s CPU, 0.016s wall-clock]
Instantiating: [0.020s CPU, 0.026s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
23 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.024s wall-clock]
1430 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
44 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.012s wall-clock]
Reordering and filtering variables...
45 of 45 variables necessary.
23 of 45 mutex groups necessary.
968 of 968 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.006s wall-clock]
Translator variables: 45
Translator derived variables: 0
Translator facts: 552
Translator goal facts: 22
Translator mutex groups: 23
Translator total mutex groups size: 529
Translator operators: 968
Translator axioms: 0
Translator task size: 8342
Translator peak memory: 36976 KB
Writing output... [0.010s CPU, 0.005s wall-clock]
Done! [0.090s CPU, 0.091s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.7416e-05s, 24488 KB] reading input...
[t=0.00247863s, 25340 KB] done reading input!
[t=0.00334241s, 25736 KB] Initializing landmark count heuristic...
[t=0.00338496s, 25736 KB] Generating landmark graph...
[t=0.00345562s, 25736 KB] Building a landmark graph with reasonable orders.
[t=0.00351326s, 25736 KB] Initializing Exploration...
[t=0.00377674s, 26000 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0143922s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0144624s, 26528 KB] Landmarks generation time: 0.011008s
[t=0.0144761s, 26528 KB] Discovered 102 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0144922s, 26528 KB] 638 edges
[t=0.0145021s, 26528 KB] approx. reasonable orders
[t=0.0145106s, 26528 KB] approx. obedient reasonable orders
[t=0.0145368s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0145454s, 26528 KB] Landmarks generation time: 0.011151s
[t=0.0145545s, 26528 KB] Discovered 102 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0145622s, 26528 KB] 638 edges
[t=0.0145703s, 26528 KB] Landmark graph generation time: 0.011192s
[t=0.0145786s, 26528 KB] Landmark graph contains 102 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0145863s, 26528 KB] Landmark graph contains 638 orderings.
[t=0.0148874s, 26528 KB] Simplifying 3828 unary operators... done! [2904 unary operators]
[t=0.0157762s, 26528 KB] time to simplify: 0.00096157s
[t=0.0159061s, 26528 KB] Initializing additive heuristic...
[t=0.015921s, 26528 KB] Initializing FF heuristic...
[t=0.0159709s, 26528 KB] Building successor generator...done!
[t=0.0161418s, 26528 KB] peak memory difference for successor generator creation: 0 KB
[t=0.01615s, 26528 KB] time for successor generation creation: 0.000144707s
[t=0.0161626s, 26528 KB] Variables: 45
[t=0.0161705s, 26528 KB] FactPairs: 552
[t=0.0161784s, 26528 KB] Bytes per state: 20
[t=0.0162598s, 26528 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0162911s, 26528 KB] 45 initial landmarks, 22 goal landmarks
[t=0.0163448s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0163545s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.016363s, 26528 KB] g=0, 1 evaluated, 0 expanded
[t=0.0163764s, 26528 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0163851s, 26528 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0164231s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.016432s, 26528 KB] g=1, 2 evaluated, 1 expanded
[t=0.0164688s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0164786s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0164877s, 26528 KB] g=2, 3 evaluated, 2 expanded
[t=0.0166481s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0166573s, 26528 KB] g=4, 9 evaluated, 8 expanded
[t=0.0169562s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0169657s, 26528 KB] g=6, 21 evaluated, 20 expanded
[t=0.0170481s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0170566s, 26528 KB] g=6, 24 evaluated, 23 expanded
[t=0.0172537s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0172622s, 26528 KB] g=8, 32 evaluated, 31 expanded
[t=0.0174168s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0174257s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0174335s, 26528 KB] g=10, 38 evaluated, 37 expanded
[t=0.0177338s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0177432s, 26528 KB] g=13, 50 evaluated, 49 expanded
[t=0.0177795s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0177882s, 26528 KB] g=14, 51 evaluated, 50 expanded
[t=0.0179408s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0179534s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0179616s, 26528 KB] g=16, 57 evaluated, 56 expanded
[t=0.0184577s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0184674s, 26528 KB] g=23, 77 evaluated, 76 expanded
[t=0.0187878s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0187973s, 26528 KB] g=26, 90 evaluated, 89 expanded
[t=0.0189754s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0189842s, 26528 KB] g=27, 97 evaluated, 96 expanded
[t=0.0190186s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0190273s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0190353s, 26528 KB] g=28, 98 evaluated, 97 expanded
[t=0.0192739s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0192853s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0192939s, 26528 KB] g=30, 107 evaluated, 106 expanded
[t=0.0195073s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0195185s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0195273s, 26528 KB] g=32, 115 evaluated, 114 expanded
[t=0.0197768s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0197863s, 26528 KB] g=35, 125 evaluated, 124 expanded
[t=0.0199365s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0199462s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.019955s, 26528 KB] g=38, 130 evaluated, 129 expanded
[t=0.0200415s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0200501s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.020058s, 26528 KB] g=39, 133 evaluated, 132 expanded
[t=0.0200926s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0201014s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0201094s, 26528 KB] g=40, 134 evaluated, 133 expanded
[t=0.0203577s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0203673s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0203759s, 26528 KB] g=42, 144 evaluated, 143 expanded
[t=0.0206249s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0206334s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0206415s, 26528 KB] g=44, 154 evaluated, 153 expanded
[t=0.0208463s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.020855s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0208629s, 26528 KB] g=46, 162 evaluated, 161 expanded
[t=0.0210974s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0211061s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0211139s, 26528 KB] g=48, 171 evaluated, 170 expanded
[t=0.0213268s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.021336s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0213439s, 26528 KB] g=50, 179 evaluated, 178 expanded
[t=0.0213787s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0213875s, 26528 KB] g=51, 180 evaluated, 179 expanded
[t=0.0214214s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0214298s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0214375s, 26528 KB] g=52, 181 evaluated, 180 expanded
[t=0.0216167s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0216251s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0216329s, 26528 KB] g=54, 188 evaluated, 187 expanded
[t=0.0218119s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0218277s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0218393s, 26528 KB] g=56, 195 evaluated, 194 expanded
[t=0.0226074s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0226301s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0226385s, 26528 KB] g=60, 224 evaluated, 223 expanded
[t=0.022795s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0228041s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0228122s, 26528 KB] g=62, 230 evaluated, 229 expanded
[t=0.0234202s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0234306s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0234384s, 26528 KB] g=66, 255 evaluated, 254 expanded
[t=0.0235764s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0235849s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0235927s, 26528 KB] g=68, 260 evaluated, 259 expanded
[t=0.0239493s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0239588s, 26528 KB] g=72, 276 evaluated, 275 expanded
[t=0.0240523s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0240612s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.024069s, 26528 KB] g=74, 280 evaluated, 279 expanded
[t=0.0243692s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0243784s, 26528 KB] g=80, 294 evaluated, 293 expanded
[t=0.0244755s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0244843s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0244922s, 26528 KB] g=82, 298 evaluated, 297 expanded
[t=0.0245644s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0245735s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0245914s, 26528 KB] g=84, 301 evaluated, 300 expanded
[t=0.0249192s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0249318s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0249398s, 26528 KB] g=96, 319 evaluated, 318 expanded
[t=0.0250128s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0250215s, 26528 KB] g=100, 323 evaluated, 322 expanded
[t=0.0250406s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0250487s, 26528 KB] g=101, 324 evaluated, 323 expanded
[t=0.0250669s, 26528 KB] Solution found!
[t=0.0250938s, 26528 KB] Actual search time: 0.00879955s
unstack b13 b16 (1)
put-down b13 (1)
unstack b16 b4 (1)
put-down b16 (1)
pick-up b21 (1)
stack b21 b4 (1)
unstack b19 b6 (1)
put-down b19 (1)
pick-up b6 (1)
stack b6 b21 (1)
unstack b2 b7 (1)
put-down b2 (1)
unstack b7 b22 (1)
stack b7 b19 (1)
pick-up b2 (1)
stack b2 b7 (1)
unstack b6 b21 (1)
put-down b6 (1)
unstack b21 b4 (1)
put-down b21 (1)
unstack b4 b14 (1)
put-down b4 (1)
unstack b14 b3 (1)
put-down b14 (1)
unstack b3 b5 (1)
put-down b3 (1)
unstack b5 b20 (1)
stack b5 b6 (1)
pick-up b14 (1)
stack b14 b20 (1)
pick-up b21 (1)
stack b21 b4 (1)
unstack b14 b20 (1)
put-down b14 (1)
unstack b20 b17 (1)
put-down b20 (1)
unstack b17 b18 (1)
put-down b17 (1)
unstack b18 b12 (1)
put-down b18 (1)
unstack b12 b15 (1)
stack b12 b13 (1)
pick-up b14 (1)
stack b14 b20 (1)
unstack b15 b8 (1)
stack b15 b12 (1)
pick-up b16 (1)
stack b16 b17 (1)
unstack b8 b10 (1)
stack b8 b22 (1)
unstack b10 b11 (1)
stack b10 b2 (1)
unstack b11 b1 (1)
stack b11 b16 (1)
pick-up b9 (1)
stack b9 b8 (1)
unstack b14 b20 (1)
put-down b14 (1)
pick-up b20 (1)
stack b20 b1 (1)
pick-up b14 (1)
stack b14 b20 (1)
unstack b21 b4 (1)
put-down b21 (1)
pick-up b4 (1)
stack b4 b15 (1)
pick-up b21 (1)
stack b21 b4 (1)
unstack b5 b6 (1)
put-down b5 (1)
pick-up b6 (1)
stack b6 b21 (1)
pick-up b5 (1)
stack b5 b6 (1)
unstack b9 b8 (1)
put-down b9 (1)
unstack b8 b22 (1)
put-down b8 (1)
pick-up b22 (1)
stack b22 b11 (1)
pick-up b8 (1)
stack b8 b22 (1)
pick-up b9 (1)
stack b9 b8 (1)
unstack b10 b2 (1)
put-down b10 (1)
unstack b2 b7 (1)
put-down b2 (1)
pick-up b10 (1)
stack b10 b2 (1)
unstack b7 b19 (1)
put-down b7 (1)
pick-up b19 (1)
stack b19 b3 (1)
pick-up b7 (1)
stack b7 b19 (1)
unstack b10 b2 (1)
put-down b10 (1)
pick-up b2 (1)
stack b2 b7 (1)
pick-up b10 (1)
stack b10 b2 (1)
[t=0.0251032s, 26528 KB] Plan length: 102 step(s).
[t=0.0251032s, 26528 KB] Plan cost: 102
[t=0.0251032s, 26528 KB] Expanded 324 state(s).
[t=0.0251032s, 26528 KB] Reopened 0 state(s).
[t=0.0251032s, 26528 KB] Evaluated 325 state(s).
[t=0.0251032s, 26528 KB] Evaluations: 650
[t=0.0251032s, 26528 KB] Generated 3161 state(s).
[t=0.0251032s, 26528 KB] Dead ends: 0 state(s).
[t=0.0251032s, 26528 KB] Number of registered states: 325
[t=0.0251032s, 26528 KB] Int hash set load factor: 325/512 = 0.634766
[t=0.0251032s, 26528 KB] Int hash set resizes: 9
[t=0.0251032s, 26528 KB] Search time: 0.00884367s
[t=0.0251032s, 26528 KB] Total time: 0.0251032s
Solution found.
Peak memory: 26528 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.15s
