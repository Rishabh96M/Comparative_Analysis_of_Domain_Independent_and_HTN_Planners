INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_24/bws_problem_24_1.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.010s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.012s wall-clock]
1898 relevant atoms
1272 auxiliary atoms
3170 final queue length
5527 total queue pushes
Completing instantiation... [0.020s CPU, 0.020s wall-clock]
Instantiating: [0.040s CPU, 0.035s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
25 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.029s wall-clock]
1704 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
48 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.023s wall-clock]
Reordering and filtering variables...
49 of 49 variables necessary.
25 of 49 mutex groups necessary.
1152 of 1152 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.007s wall-clock]
Translator variables: 49
Translator derived variables: 0
Translator facts: 650
Translator goal facts: 24
Translator mutex groups: 25
Translator total mutex groups size: 625
Translator operators: 1152
Translator axioms: 0
Translator task size: 9916
Translator peak memory: 37884 KB
Writing output... [0.000s CPU, 0.006s wall-clock]
Done! [0.110s CPU, 0.113s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.3537e-05s, 24488 KB] reading input...
[t=0.0033688s, 25532 KB] done reading input!
[t=0.00481552s, 25928 KB] Initializing landmark count heuristic...
[t=0.00490698s, 25928 KB] Generating landmark graph...
[t=0.00502743s, 25928 KB] Building a landmark graph with reasonable orders.
[t=0.00512823s, 26060 KB] Initializing Exploration...
[t=0.0055094s, 26388 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0195644s, 26916 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0196436s, 26916 KB] Landmarks generation time: 0.0146142s
[t=0.0196568s, 26916 KB] Discovered 112 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0196867s, 26916 KB] 484 edges
[t=0.0196968s, 26916 KB] approx. reasonable orders
[t=0.0197057s, 26916 KB] approx. obedient reasonable orders
[t=0.0197319s, 26916 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0197409s, 26916 KB] Landmarks generation time: 0.0148249s
[t=0.0197512s, 26916 KB] Discovered 112 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0197595s, 26916 KB] 484 edges
[t=0.0197677s, 26916 KB] Landmark graph generation time: 0.0148682s
[t=0.019776s, 26916 KB] Landmark graph contains 112 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0197839s, 26916 KB] Landmark graph contains 484 orderings.
[t=0.0201735s, 26916 KB] Simplifying 4560 unary operators... done! [3456 unary operators]
[t=0.0212622s, 26916 KB] time to simplify: 0.00116456s
[t=0.0214063s, 26916 KB] Initializing additive heuristic...
[t=0.0214219s, 26916 KB] Initializing FF heuristic...
[t=0.0214722s, 26916 KB] Building successor generator...done!
[t=0.0216838s, 26916 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0216933s, 26916 KB] time for successor generation creation: 0.000176141s
[t=0.0217061s, 26916 KB] Variables: 49
[t=0.0217151s, 26916 KB] FactPairs: 650
[t=0.021726s, 26916 KB] Bytes per state: 20
[t=0.0218304s, 26916 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0218648s, 26916 KB] 48 initial landmarks, 24 goal landmarks
[t=0.0219224s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0219332s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0219428s, 26916 KB] g=0, 1 evaluated, 0 expanded
[t=0.0219574s, 26916 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0219667s, 26916 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0220772s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0220874s, 26916 KB] g=1, 4 evaluated, 3 expanded
[t=0.02213s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0221404s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0221497s, 26916 KB] g=2, 5 evaluated, 4 expanded
[t=0.0222911s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0223059s, 26916 KB] g=3, 9 evaluated, 8 expanded
[t=0.0223484s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0223576s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0223654s, 26916 KB] g=4, 10 evaluated, 9 expanded
[t=0.0225561s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.022565s, 26916 KB] g=6, 16 evaluated, 15 expanded
[t=0.0226057s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0226144s, 26916 KB] g=6, 17 evaluated, 16 expanded
[t=0.0228761s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0228859s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0228967s, 26916 KB] g=8, 26 evaluated, 25 expanded
[t=0.0230233s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0230361s, 26916 KB] g=10, 30 evaluated, 29 expanded
[t=0.0231109s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0231197s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0231276s, 26916 KB] g=10, 32 evaluated, 31 expanded
[t=0.0232472s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0232591s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0232677s, 26916 KB] g=11, 34 evaluated, 33 expanded
[t=0.0233062s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0233151s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0233231s, 26916 KB] g=12, 35 evaluated, 34 expanded
[t=0.0234797s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0234889s, 26916 KB] g=14, 40 evaluated, 39 expanded
[t=0.0236418s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0236507s, 26916 KB] g=16, 45 evaluated, 44 expanded
[t=0.0238483s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0238575s, 26916 KB] g=18, 51 evaluated, 50 expanded
[t=0.0240741s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.024084s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0240931s, 26916 KB] g=20, 58 evaluated, 57 expanded
[t=0.0243133s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0243228s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0243313s, 26916 KB] g=22, 65 evaluated, 64 expanded
[t=0.0245485s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0245578s, 26916 KB] g=24, 72 evaluated, 71 expanded
[t=0.0246579s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0246672s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0246759s, 26916 KB] g=24, 75 evaluated, 74 expanded
[t=0.02486s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0248706s, 26916 KB] g=26, 81 evaluated, 80 expanded
[t=0.025098s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0251137s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0251271s, 26916 KB] g=28, 88 evaluated, 87 expanded
[t=0.0253674s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0253783s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0253873s, 26916 KB] g=30, 96 evaluated, 95 expanded
[t=0.0255846s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0255938s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0256019s, 26916 KB] g=32, 102 evaluated, 101 expanded
[t=0.0263477s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.026359s, 26916 KB] g=38, 127 evaluated, 126 expanded
[t=0.0265794s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0265909s, 26916 KB] g=40, 134 evaluated, 133 expanded
[t=0.026774s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0267896s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0267997s, 26916 KB] g=42, 140 evaluated, 139 expanded
[t=0.0269608s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0269716s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0269807s, 26916 KB] g=44, 145 evaluated, 144 expanded
[t=0.0299956s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0300248s, 26916 KB] g=50, 250 evaluated, 249 expanded
[t=0.0302998s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0303526s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0303617s, 26916 KB] g=52, 257 evaluated, 256 expanded
[t=0.0305433s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0305535s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0305618s, 26916 KB] g=54, 263 evaluated, 262 expanded
[t=0.0306591s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0306687s, 26916 KB] g=55, 266 evaluated, 265 expanded
[t=0.0307088s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0307176s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.030726s, 26916 KB] g=56, 267 evaluated, 266 expanded
[t=0.0308816s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0308909s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0308991s, 26916 KB] g=58, 272 evaluated, 271 expanded
[t=0.0310231s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0310321s, 26916 KB] g=59, 276 evaluated, 275 expanded
[t=0.0310714s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0310802s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0310882s, 26916 KB] g=60, 277 evaluated, 276 expanded
[t=0.0313129s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0313291s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0313398s, 26916 KB] g=62, 282 evaluated, 281 expanded
[t=0.0318048s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0318222s, 26916 KB] g=66, 297 evaluated, 296 expanded
[t=0.031949s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0319592s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0319675s, 26916 KB] g=68, 301 evaluated, 300 expanded
[t=0.0335608s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0335811s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0335896s, 26916 KB] g=80, 357 evaluated, 356 expanded
[t=0.0340447s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0340577s, 26916 KB] g=84, 373 evaluated, 372 expanded
[t=0.034179s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0342039s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0342127s, 26916 KB] g=86, 377 evaluated, 376 expanded
[t=0.0378262s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0378493s, 26916 KB] g=102, 509 evaluated, 508 expanded
[t=0.0386216s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0386362s, 26916 KB] g=110, 537 evaluated, 536 expanded
[t=0.0387243s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0387342s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0387425s, 26916 KB] g=112, 540 evaluated, 539 expanded
[t=0.0404785s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0404912s, 26916 KB] g=134, 621 evaluated, 620 expanded
[t=0.0406627s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0406718s, 26916 KB] g=138, 630 evaluated, 629 expanded
[t=0.0407295s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0407385s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0407467s, 26916 KB] g=140, 633 evaluated, 632 expanded
[t=0.0409134s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0409227s, 26916 KB] g=148, 644 evaluated, 643 expanded
[t=0.0409408s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0409492s, 26916 KB] g=149, 645 evaluated, 644 expanded
[t=0.0409649s, 26916 KB] Solution found!
[t=0.0409947s, 26916 KB] Actual search time: 0.0191259s
unstack b24 b11 (1)
put-down b24 (1)
unstack b5 b4 (1)
put-down b5 (1)
pick-up b14 (1)
stack b14 b11 (1)
unstack b15 b21 (1)
stack b15 b7 (1)
unstack b4 b18 (1)
stack b4 b15 (1)
unstack b18 b9 (1)
put-down b18 (1)
unstack b21 b2 (1)
put-down b21 (1)
unstack b2 b3 (1)
put-down b2 (1)
unstack b3 b17 (1)
put-down b3 (1)
unstack b17 b13 (1)
stack b17 b14 (1)
unstack b13 b19 (1)
stack b13 b21 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b19 b20 (1)
put-down b19 (1)
unstack b20 b12 (1)
stack b20 b24 (1)
pick-up b12 (1)
stack b12 b2 (1)
pick-up b19 (1)
stack b19 b12 (1)
unstack b17 b14 (1)
put-down b17 (1)
unstack b14 b11 (1)
put-down b14 (1)
unstack b11 b8 (1)
stack b11 b9 (1)
pick-up b14 (1)
stack b14 b11 (1)
pick-up b17 (1)
stack b17 b14 (1)
unstack b4 b15 (1)
put-down b4 (1)
unstack b8 b1 (1)
stack b8 b4 (1)
unstack b15 b7 (1)
put-down b15 (1)
unstack b7 b16 (1)
stack b7 b5 (1)
pick-up b15 (1)
stack b15 b7 (1)
unstack b16 b22 (1)
stack b16 b3 (1)
unstack b22 b6 (1)
stack b22 b19 (1)
unstack b6 b23 (1)
stack b6 b20 (1)
unstack b23 b10 (1)
stack b23 b17 (1)
pick-up b10 (1)
stack b10 b8 (1)
unstack b16 b3 (1)
put-down b16 (1)
pick-up b3 (1)
stack b3 b10 (1)
pick-up b16 (1)
stack b16 b3 (1)
unstack b22 b19 (1)
put-down b22 (1)
unstack b19 b12 (1)
put-down b19 (1)
pick-up b22 (1)
stack b22 b19 (1)
unstack b12 b2 (1)
put-down b12 (1)
pick-up b2 (1)
stack b2 b6 (1)
pick-up b12 (1)
stack b12 b2 (1)
unstack b22 b19 (1)
put-down b22 (1)
pick-up b19 (1)
stack b19 b12 (1)
pick-up b22 (1)
stack b22 b19 (1)
unstack b16 b3 (1)
put-down b16 (1)
unstack b3 b10 (1)
put-down b3 (1)
unstack b10 b8 (1)
put-down b10 (1)
pick-up b3 (1)
stack b3 b10 (1)
pick-up b16 (1)
stack b16 b3 (1)
unstack b8 b4 (1)
put-down b8 (1)
pick-up b4 (1)
stack b4 b15 (1)
pick-up b8 (1)
stack b8 b4 (1)
unstack b16 b3 (1)
put-down b16 (1)
unstack b3 b10 (1)
put-down b3 (1)
pick-up b10 (1)
stack b10 b8 (1)
pick-up b3 (1)
stack b3 b10 (1)
pick-up b16 (1)
stack b16 b3 (1)
unstack b23 b17 (1)
put-down b23 (1)
unstack b17 b14 (1)
put-down b17 (1)
unstack b14 b11 (1)
put-down b14 (1)
pick-up b17 (1)
stack b17 b14 (1)
pick-up b23 (1)
stack b23 b17 (1)
unstack b11 b9 (1)
put-down b11 (1)
unstack b9 b13 (1)
put-down b9 (1)
pick-up b11 (1)
stack b11 b9 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b16 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b11 b9 (1)
put-down b11 (1)
pick-up b9 (1)
stack b9 b13 (1)
pick-up b11 (1)
stack b11 b9 (1)
unstack b23 b17 (1)
put-down b23 (1)
unstack b17 b14 (1)
put-down b17 (1)
pick-up b14 (1)
stack b14 b11 (1)
pick-up b17 (1)
stack b17 b14 (1)
pick-up b23 (1)
stack b23 b17 (1)
[t=0.0410047s, 26916 KB] Plan length: 150 step(s).
[t=0.0410047s, 26916 KB] Plan cost: 150
[t=0.0410047s, 26916 KB] Expanded 645 state(s).
[t=0.0410047s, 26916 KB] Reopened 0 state(s).
[t=0.0410047s, 26916 KB] Evaluated 646 state(s).
[t=0.0410047s, 26916 KB] Evaluations: 1292
[t=0.0410047s, 26916 KB] Generated 5751 state(s).
[t=0.0410047s, 26916 KB] Dead ends: 0 state(s).
[t=0.0410047s, 26916 KB] Number of registered states: 646
[t=0.0410047s, 26916 KB] Int hash set load factor: 646/1024 = 0.630859
[t=0.0410047s, 26916 KB] Int hash set resizes: 10
[t=0.0410047s, 26916 KB] Search time: 0.0191746s
[t=0.0410047s, 26916 KB] Total time: 0.0410047s
Solution found.
Peak memory: 26916 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.20s
