INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_29/bws_problem_29_7.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.019s wall-clock]
2728 relevant atoms
1827 auxiliary atoms
4555 final queue length
7983 total queue pushes
Completing instantiation... [0.030s CPU, 0.028s wall-clock]
Instantiating: [0.050s CPU, 0.049s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
30 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.053s wall-clock]
2494 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
58 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.020s wall-clock]
Reordering and filtering variables...
59 of 59 variables necessary.
30 of 59 mutex groups necessary.
1682 of 1682 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.011s wall-clock]
Translator variables: 59
Translator derived variables: 0
Translator facts: 930
Translator goal facts: 29
Translator mutex groups: 30
Translator total mutex groups size: 900
Translator operators: 1682
Translator axioms: 0
Translator task size: 14446
Translator peak memory: 40824 KB
Writing output... [0.000s CPU, 0.008s wall-clock]
Done! [0.160s CPU, 0.160s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.8238e-05s, 24488 KB] reading input...
[t=0.00488878s, 26220 KB] done reading input!
[t=0.00645147s, 26616 KB] Initializing landmark count heuristic...
[t=0.00649909s, 26616 KB] Generating landmark graph...
[t=0.00663387s, 26748 KB] Building a landmark graph with reasonable orders.
[t=0.0067237s, 26748 KB] Initializing Exploration...
[t=0.0072047s, 27200 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0333627s, 27860 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.033474s, 27860 KB] Landmarks generation time: 0.0268477s
[t=0.0334971s, 27860 KB] Discovered 132 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0335144s, 27860 KB] 637 edges
[t=0.0335248s, 27860 KB] approx. reasonable orders
[t=0.0341745s, 27860 KB] approx. obedient reasonable orders
[t=0.0342225s, 27860 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0342329s, 27860 KB] Landmarks generation time: 0.0277321s
[t=0.0342441s, 27860 KB] Discovered 132 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0342535s, 27860 KB] 643 edges
[t=0.0342629s, 27860 KB] Landmark graph generation time: 0.0277717s
[t=0.0342724s, 27860 KB] Landmark graph contains 132 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0342812s, 27860 KB] Landmark graph contains 643 orderings.
[t=0.0350603s, 27884 KB] Simplifying 6670 unary operators... done! [5046 unary operators]
[t=0.036748s, 28016 KB] time to simplify: 0.00180024s
[t=0.0369554s, 28016 KB] Initializing additive heuristic...
[t=0.0369759s, 28016 KB] Initializing FF heuristic...
[t=0.0370328s, 28016 KB] Building successor generator...done!
[t=0.0373175s, 28016 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0373311s, 28016 KB] time for successor generation creation: 0.000248245s
[t=0.0373506s, 28016 KB] Variables: 59
[t=0.0373632s, 28016 KB] FactPairs: 930
[t=0.037376s, 28016 KB] Bytes per state: 24
[t=0.0374922s, 28016 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0375406s, 28016 KB] 58 initial landmarks, 29 goal landmarks
[t=0.0376367s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0376488s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0376576s, 28016 KB] g=0, 1 evaluated, 0 expanded
[t=0.0376735s, 28016 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0376827s, 28016 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0377398s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0377492s, 28016 KB] g=1, 2 evaluated, 1 expanded
[t=0.0379504s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0379645s, 28016 KB] g=3, 6 evaluated, 5 expanded
[t=0.0380151s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0380244s, 28016 KB] g=1, 7 evaluated, 6 expanded
[t=0.038118s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0381274s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0381359s, 28016 KB] g=2, 9 evaluated, 8 expanded
[t=0.0381868s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0381959s, 28016 KB] g=3, 10 evaluated, 9 expanded
[t=0.0384441s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0384542s, 28016 KB] g=5, 16 evaluated, 15 expanded
[t=0.0386714s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0386815s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.03869s, 28016 KB] g=7, 21 evaluated, 20 expanded
[t=0.0387428s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0387521s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0387606s, 28016 KB] g=8, 22 evaluated, 21 expanded
[t=0.0388502s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0388636s, 28016 KB] g=9, 24 evaluated, 23 expanded
[t=0.0394611s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0394776s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0394871s, 28016 KB] g=12, 38 evaluated, 37 expanded
[t=0.0398219s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0398323s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0398426s, 28016 KB] g=14, 46 evaluated, 45 expanded
[t=0.0401941s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0402077s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0402169s, 28016 KB] g=16, 54 evaluated, 53 expanded
[t=0.0405463s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0405564s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0405658s, 28016 KB] g=18, 62 evaluated, 61 expanded
[t=0.0409005s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0409112s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0409211s, 28016 KB] g=20, 70 evaluated, 69 expanded
[t=0.0416838s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0416943s, 28016 KB] g=23, 89 evaluated, 88 expanded
[t=0.0422144s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0422246s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0422339s, 28016 KB] g=26, 102 evaluated, 101 expanded
[t=0.042449s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0424693s, 28016 KB] g=27, 107 evaluated, 106 expanded
[t=0.0425239s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0425337s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0425422s, 28016 KB] g=28, 108 evaluated, 107 expanded
[t=0.042902s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.042912s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0429213s, 28016 KB] g=30, 117 evaluated, 116 expanded
[t=0.0432189s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0432319s, 28016 KB] g=32, 124 evaluated, 123 expanded
[t=0.0435685s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0435789s, 28016 KB] g=34, 132 evaluated, 131 expanded
[t=0.0439482s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0439594s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0439696s, 28016 KB] g=36, 141 evaluated, 140 expanded
[t=0.0453945s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0454443s, 28016 KB] g=42, 175 evaluated, 174 expanded
[t=0.0458592s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0458804s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0458914s, 28016 KB] g=44, 185 evaluated, 184 expanded
[t=0.0463536s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0463676s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0463778s, 28016 KB] g=46, 196 evaluated, 195 expanded
[t=0.0467889s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0468009s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0468105s, 28016 KB] g=48, 206 evaluated, 205 expanded
[t=0.0472598s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0472827s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0472968s, 28016 KB] g=50, 216 evaluated, 215 expanded
[t=0.0477718s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0477983s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0478146s, 28016 KB] g=52, 225 evaluated, 224 expanded
[t=0.0482285s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0482481s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0482588s, 28016 KB] g=54, 233 evaluated, 232 expanded
[t=0.0488593s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0488698s, 28016 KB] g=57, 248 evaluated, 247 expanded
[t=0.0489721s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0489844s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.048994s, 28016 KB] g=58, 250 evaluated, 249 expanded
[t=0.0493109s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0493238s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.049334s, 28016 KB] g=59, 257 evaluated, 256 expanded
[t=0.0493857s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0493956s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0494043s, 28016 KB] g=60, 258 evaluated, 257 expanded
[t=0.0497694s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0497796s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.049789s, 28016 KB] g=62, 267 evaluated, 266 expanded
[t=0.0501126s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0501221s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0501306s, 28016 KB] g=64, 275 evaluated, 274 expanded
[t=0.0503749s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0503843s, 28016 KB] g=65, 281 evaluated, 280 expanded
[t=0.0504357s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0504498s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0504587s, 28016 KB] g=66, 282 evaluated, 281 expanded
[t=0.050743s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0507527s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0507645s, 28016 KB] g=68, 289 evaluated, 288 expanded
[t=0.0534148s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0534506s, 28016 KB] g=76, 355 evaluated, 354 expanded
[t=0.0536592s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0536732s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0536822s, 28016 KB] g=78, 360 evaluated, 359 expanded
[t=0.0558202s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0558435s, 28016 KB] g=86, 414 evaluated, 413 expanded
[t=0.0561638s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0561752s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0561842s, 28016 KB] g=88, 422 evaluated, 421 expanded
[t=0.0576999s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0577414s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.057757s, 28016 KB] g=98, 457 evaluated, 456 expanded
[t=0.103217s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.103305s, 28016 KB] g=128, 1612 evaluated, 1611 expanded
[t=0.103405s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.103417s, 28016 KB] g=129, 1614 evaluated, 1613 expanded
[t=0.103505s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.103515s, 28016 KB] g=130, 1616 evaluated, 1615 expanded
[t=0.103722s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.103732s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.103741s, 28016 KB] g=132, 1621 evaluated, 1620 expanded
[t=0.103945s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.103955s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.103963s, 28016 KB] g=134, 1626 evaluated, 1625 expanded
[t=0.104129s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.104139s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.10415s, 28016 KB] g=136, 1630 evaluated, 1629 expanded
[t=0.105371s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.105393s, 28016 KB] g=144, 1661 evaluated, 1660 expanded
[t=0.105747s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.105766s, 28016 KB] g=148, 1670 evaluated, 1669 expanded
[t=0.105889s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.105903s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.105912s, 28016 KB] g=150, 1673 evaluated, 1672 expanded
[t=0.11454s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.11456s, 28016 KB] g=184, 1927 evaluated, 1926 expanded
[t=0.114846s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.114857s, 28016 KB] g=188, 1936 evaluated, 1935 expanded
[t=0.114956s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.114965s, 28016 KB] g=190, 1939 evaluated, 1938 expanded
[t=0.115958s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.115975s, 28016 KB] g=206, 1976 evaluated, 1975 expanded
[t=0.116313s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.116324s, 28016 KB] g=214, 1986 evaluated, 1985 expanded
[t=0.116415s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.116424s, 28016 KB] g=218, 1990 evaluated, 1989 expanded
[t=0.116446s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.116456s, 28016 KB] g=219, 1991 evaluated, 1990 expanded
[t=0.116474s, 28016 KB] Solution found!
[t=0.116489s, 28016 KB] Actual search time: 0.0789402s
unstack b27 b12 (1)
put-down b27 (1)
unstack b1 b29 (1)
put-down b1 (1)
unstack b14 b17 (1)
put-down b14 (1)
unstack b17 b10 (1)
put-down b17 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b12 b2 (1)
stack b12 b29 (1)
unstack b3 b5 (1)
stack b3 b7 (1)
unstack b5 b22 (1)
stack b5 b3 (1)
pick-up b2 (1)
stack b2 b22 (1)
unstack b21 b11 (1)
stack b21 b2 (1)
unstack b12 b29 (1)
put-down b12 (1)
unstack b29 b20 (1)
put-down b29 (1)
unstack b20 b16 (1)
stack b20 b13 (1)
unstack b16 b25 (1)
put-down b16 (1)
pick-up b12 (1)
stack b12 b29 (1)
unstack b25 b24 (1)
put-down b25 (1)
unstack b24 b9 (1)
put-down b24 (1)
pick-up b9 (1)
stack b9 b5 (1)
unstack b21 b2 (1)
put-down b21 (1)
unstack b2 b22 (1)
put-down b2 (1)
unstack b22 b18 (1)
stack b22 b24 (1)
unstack b18 b28 (1)
stack b18 b27 (1)
unstack b28 b15 (1)
stack b28 b21 (1)
unstack b15 b4 (1)
stack b15 b12 (1)
pick-up b14 (1)
stack b14 b4 (1)
pick-up b2 (1)
stack b2 b22 (1)
pick-up b25 (1)
stack b25 b28 (1)
unstack b14 b4 (1)
put-down b14 (1)
unstack b4 b26 (1)
stack b4 b18 (1)
unstack b26 b19 (1)
put-down b26 (1)
pick-up b14 (1)
stack b14 b4 (1)
unstack b19 b6 (1)
stack b19 b9 (1)
unstack b6 b23 (1)
stack b6 b16 (1)
pick-up b1 (1)
stack b1 b23 (1)
unstack b15 b12 (1)
put-down b15 (1)
unstack b12 b29 (1)
put-down b12 (1)
pick-up b29 (1)
stack b29 b19 (1)
pick-up b12 (1)
stack b12 b29 (1)
pick-up b15 (1)
stack b15 b12 (1)
unstack b2 b22 (1)
put-down b2 (1)
unstack b22 b24 (1)
put-down b22 (1)
pick-up b24 (1)
stack b24 b15 (1)
pick-up b2 (1)
stack b2 b22 (1)
unstack b24 b15 (1)
put-down b24 (1)
unstack b15 b12 (1)
put-down b15 (1)
pick-up b24 (1)
stack b24 b15 (1)
unstack b2 b22 (1)
put-down b2 (1)
pick-up b22 (1)
stack b22 b24 (1)
pick-up b2 (1)
stack b2 b22 (1)
unstack b25 b28 (1)
put-down b25 (1)
unstack b28 b21 (1)
put-down b28 (1)
pick-up b21 (1)
stack b21 b2 (1)
pick-up b28 (1)
stack b28 b21 (1)
pick-up b25 (1)
stack b25 b28 (1)
unstack b12 b29 (1)
put-down b12 (1)
unstack b29 b19 (1)
put-down b29 (1)
unstack b19 b9 (1)
put-down b19 (1)
pick-up b29 (1)
stack b29 b19 (1)
pick-up b12 (1)
stack b12 b29 (1)
unstack b9 b5 (1)
put-down b9 (1)
unstack b5 b3 (1)
put-down b5 (1)
unstack b3 b7 (1)
put-down b3 (1)
unstack b7 b8 (1)
stack b7 b20 (1)
pick-up b8 (1)
stack b8 b25 (1)
pick-up b10 (1)
stack b10 b8 (1)
pick-up b3 (1)
stack b3 b7 (1)
pick-up b5 (1)
stack b5 b3 (1)
pick-up b9 (1)
stack b9 b5 (1)
unstack b12 b29 (1)
put-down b12 (1)
unstack b29 b19 (1)
put-down b29 (1)
pick-up b12 (1)
stack b12 b29 (1)
pick-up b19 (1)
stack b19 b9 (1)
unstack b12 b29 (1)
put-down b12 (1)
pick-up b29 (1)
stack b29 b19 (1)
pick-up b12 (1)
stack b12 b29 (1)
unstack b10 b8 (1)
put-down b10 (1)
unstack b8 b25 (1)
put-down b8 (1)
pick-up b10 (1)
stack b10 b8 (1)
unstack b25 b28 (1)
put-down b25 (1)
unstack b28 b21 (1)
put-down b28 (1)
unstack b21 b2 (1)
put-down b21 (1)
pick-up b28 (1)
stack b28 b21 (1)
pick-up b25 (1)
stack b25 b28 (1)
unstack b10 b8 (1)
put-down b10 (1)
pick-up b8 (1)
stack b8 b25 (1)
pick-up b10 (1)
stack b10 b8 (1)
unstack b2 b22 (1)
put-down b2 (1)
unstack b22 b24 (1)
put-down b22 (1)
pick-up b2 (1)
stack b2 b22 (1)
unstack b24 b15 (1)
put-down b24 (1)
pick-up b15 (1)
stack b15 b12 (1)
pick-up b24 (1)
stack b24 b15 (1)
unstack b2 b22 (1)
put-down b2 (1)
pick-up b22 (1)
stack b22 b24 (1)
pick-up b2 (1)
stack b2 b22 (1)
unstack b10 b8 (1)
put-down b10 (1)
unstack b8 b25 (1)
put-down b8 (1)
unstack b25 b28 (1)
put-down b25 (1)
pick-up b8 (1)
stack b8 b25 (1)
pick-up b10 (1)
stack b10 b8 (1)
unstack b28 b21 (1)
put-down b28 (1)
pick-up b21 (1)
stack b21 b2 (1)
pick-up b28 (1)
stack b28 b21 (1)
unstack b10 b8 (1)
put-down b10 (1)
unstack b8 b25 (1)
put-down b8 (1)
pick-up b10 (1)
stack b10 b8 (1)
pick-up b25 (1)
stack b25 b28 (1)
unstack b10 b8 (1)
put-down b10 (1)
pick-up b8 (1)
stack b8 b25 (1)
pick-up b10 (1)
stack b10 b8 (1)
[t=0.116499s, 28016 KB] Plan length: 220 step(s).
[t=0.116499s, 28016 KB] Plan cost: 220
[t=0.116499s, 28016 KB] Expanded 1991 state(s).
[t=0.116499s, 28016 KB] Reopened 0 state(s).
[t=0.116499s, 28016 KB] Evaluated 1992 state(s).
[t=0.116499s, 28016 KB] Evaluations: 3984
[t=0.116499s, 28016 KB] Generated 25138 state(s).
[t=0.116499s, 28016 KB] Dead ends: 0 state(s).
[t=0.116499s, 28016 KB] Number of registered states: 1992
[t=0.116499s, 28016 KB] Int hash set load factor: 1992/4096 = 0.486328
[t=0.116499s, 28016 KB] Int hash set resizes: 12
[t=0.116499s, 28016 KB] Search time: 0.0790073s
[t=0.116499s, 28016 KB] Total time: 0.116499s
Solution found.
Peak memory: 28016 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.33s
