INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_4.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4269 total queue pushes
Completing instantiation... [0.020s CPU, 0.015s wall-clock]
Instantiating: [0.030s CPU, 0.026s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.022s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.011s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 21
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7606
Translator peak memory: 36456 KB
Writing output... [0.010s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.082s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.1176e-05s, 24488 KB] reading input...
[t=0.00261766s, 25268 KB] done reading input!
[t=0.00351305s, 25664 KB] Initializing landmark count heuristic...
[t=0.00354313s, 25664 KB] Generating landmark graph...
[t=0.00360133s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00365652s, 25664 KB] Initializing Exploration...
[t=0.00391255s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0139673s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0141213s, 26380 KB] Landmarks generation time: 0.0105211s
[t=0.0141377s, 26380 KB] Discovered 102 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0141665s, 26380 KB] 422 edges
[t=0.0141782s, 26380 KB] approx. reasonable orders
[t=0.0177311s, 26380 KB] approx. obedient reasonable orders
[t=0.0178701s, 26380 KB] Removed 2 reasonable or obedient reasonable orders
[t=0.0178826s, 26380 KB] Landmarks generation time: 0.0143424s
[t=0.0178979s, 26380 KB] Discovered 102 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0179064s, 26380 KB] 510 edges
[t=0.017915s, 26380 KB] Landmark graph generation time: 0.0143788s
[t=0.0179251s, 26380 KB] Landmark graph contains 102 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0179496s, 26380 KB] Landmark graph contains 510 orderings.
[t=0.0182771s, 26380 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0191345s, 26380 KB] time to simplify: 0.000915016s
[t=0.0192456s, 26380 KB] Initializing additive heuristic...
[t=0.0192593s, 26380 KB] Initializing FF heuristic...
[t=0.0193261s, 26380 KB] Building successor generator...done!
[t=0.0195112s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0195204s, 26380 KB] time for successor generation creation: 0.00015102s
[t=0.0195352s, 26380 KB] Variables: 43
[t=0.0195439s, 26380 KB] FactPairs: 506
[t=0.0195524s, 26380 KB] Bytes per state: 16
[t=0.0196688s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0197027s, 26380 KB] 43 initial landmarks, 21 goal landmarks
[t=0.0197532s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.019765s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0197742s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.0197892s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0197983s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0198624s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0198723s, 26380 KB] g=1, 3 evaluated, 2 expanded
[t=0.0200502s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0200598s, 26380 KB] g=3, 10 evaluated, 9 expanded
[t=0.0200938s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0201037s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0201121s, 26380 KB] g=4, 11 evaluated, 10 expanded
[t=0.0202672s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.020277s, 26380 KB] g=6, 17 evaluated, 16 expanded
[t=0.0203115s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0203211s, 26380 KB] g=6, 18 evaluated, 17 expanded
[t=0.0205699s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0205799s, 26380 KB] g=8, 28 evaluated, 27 expanded
[t=0.020638s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0206479s, 26380 KB] g=8, 30 evaluated, 29 expanded
[t=0.0208968s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0209062s, 26380 KB] g=10, 40 evaluated, 39 expanded
[t=0.0210112s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0210204s, 26380 KB] g=10, 44 evaluated, 43 expanded
[t=0.0211258s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0211349s, 26380 KB] g=11, 48 evaluated, 47 expanded
[t=0.0211925s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0212015s, 26380 KB] g=12, 50 evaluated, 49 expanded
[t=0.0214222s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0214676s, 26380 KB] g=13, 59 evaluated, 58 expanded
[t=0.0215121s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0215268s, 26380 KB] g=14, 60 evaluated, 59 expanded
[t=0.021612s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0216213s, 26380 KB] g=12, 63 evaluated, 62 expanded
[t=0.0219352s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0219538s, 26380 KB] g=16, 74 evaluated, 73 expanded
[t=0.0222225s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0222358s, 26380 KB] g=14, 83 evaluated, 82 expanded
[t=0.0227261s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0227386s, 26380 KB] g=16, 104 evaluated, 103 expanded
[t=0.0227767s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0227864s, 26380 KB] g=22, 105 evaluated, 104 expanded
[t=0.0231623s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0231727s, 26380 KB] g=18, 121 evaluated, 120 expanded
[t=0.0237793s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0237941s, 26380 KB] g=20, 145 evaluated, 144 expanded
[t=0.0242151s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0242248s, 26380 KB] g=22, 162 evaluated, 161 expanded
[t=0.0243947s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0244044s, 26380 KB] g=23, 168 evaluated, 167 expanded
[t=0.024438s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0244477s, 26380 KB] g=24, 169 evaluated, 168 expanded
[t=0.0249755s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0249871s, 26380 KB] g=26, 190 evaluated, 189 expanded
[t=0.0256127s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0256248s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0256343s, 26380 KB] g=28, 215 evaluated, 214 expanded
[t=0.0258923s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0259028s, 26380 KB] g=30, 226 evaluated, 225 expanded
[t=0.0259368s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0259462s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0259543s, 26380 KB] g=30, 227 evaluated, 226 expanded
[t=0.0261881s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0261983s, 26380 KB] g=32, 237 evaluated, 236 expanded
[t=0.0263012s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0263108s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0263193s, 26380 KB] g=32, 241 evaluated, 240 expanded
[t=0.026527s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0265366s, 26380 KB] g=34, 250 evaluated, 249 expanded
[t=0.0268273s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0268406s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0268622s, 26380 KB] g=34, 262 evaluated, 261 expanded
[t=0.027046s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0270596s, 26380 KB] g=36, 270 evaluated, 269 expanded
[t=0.0273905s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0274041s, 26380 KB] g=38, 285 evaluated, 284 expanded
[t=0.0275718s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0275834s, 26380 KB] g=40, 293 evaluated, 292 expanded
[t=0.0278603s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0278721s, 26380 KB] g=42, 306 evaluated, 305 expanded
[t=0.0280106s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0280213s, 26380 KB] g=43, 312 evaluated, 311 expanded
[t=0.0280522s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0280614s, 26380 KB] g=44, 313 evaluated, 312 expanded
[t=0.0281708s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0281825s, 26380 KB] g=45, 318 evaluated, 317 expanded
[t=0.0282111s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0282216s, 26380 KB] g=46, 319 evaluated, 318 expanded
[t=0.0285098s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0285246s, 26380 KB] g=48, 333 evaluated, 332 expanded
[t=0.0286756s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.028686s, 26380 KB] g=50, 340 evaluated, 339 expanded
[t=0.028818s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0288288s, 26380 KB] g=52, 346 evaluated, 345 expanded
[t=0.0294844s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0295239s, 26380 KB] g=56, 379 evaluated, 378 expanded
[t=0.0296933s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.029706s, 26380 KB] g=58, 387 evaluated, 386 expanded
[t=0.0303164s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0303307s, 26380 KB] g=66, 419 evaluated, 418 expanded
[t=0.030708s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0307211s, 26380 KB] g=70, 439 evaluated, 438 expanded
[t=0.0308358s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0308455s, 26380 KB] g=72, 445 evaluated, 444 expanded
[t=0.031129s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0311392s, 26380 KB] g=80, 461 evaluated, 460 expanded
[t=0.0313003s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0313101s, 26380 KB] g=84, 470 evaluated, 469 expanded
[t=0.0313484s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0313582s, 26380 KB] g=85, 472 evaluated, 471 expanded
[t=0.0313755s, 26380 KB] Solution found!
[t=0.031391s, 26380 KB] Actual search time: 0.0116858s
unstack b14 b8 (1)
put-down b14 (1)
unstack b8 b1 (1)
put-down b8 (1)
unstack b12 b18 (1)
put-down b12 (1)
unstack b18 b6 (1)
put-down b18 (1)
unstack b2 b19 (1)
put-down b2 (1)
unstack b19 b7 (1)
put-down b19 (1)
unstack b7 b21 (1)
put-down b7 (1)
unstack b9 b13 (1)
put-down b9 (1)
unstack b13 b20 (1)
put-down b13 (1)
unstack b20 b3 (1)
put-down b20 (1)
unstack b3 b17 (1)
stack b3 b13 (1)
unstack b17 b15 (1)
stack b17 b8 (1)
pick-up b18 (1)
stack b18 b3 (1)
pick-up b20 (1)
stack b20 b18 (1)
pick-up b12 (1)
stack b12 b20 (1)
pick-up b19 (1)
stack b19 b12 (1)
pick-up b9 (1)
stack b9 b19 (1)
unstack b1 b11 (1)
stack b1 b2 (1)
unstack b11 b16 (1)
stack b11 b9 (1)
pick-up b15 (1)
stack b15 b21 (1)
unstack b16 b5 (1)
stack b16 b1 (1)
unstack b5 b4 (1)
put-down b5 (1)
unstack b4 b10 (1)
put-down b4 (1)
pick-up b10 (1)
stack b10 b7 (1)
pick-up b14 (1)
stack b14 b10 (1)
pick-up b6 (1)
stack b6 b11 (1)
unstack b15 b21 (1)
put-down b15 (1)
pick-up b21 (1)
stack b21 b5 (1)
pick-up b15 (1)
stack b15 b21 (1)
unstack b14 b10 (1)
put-down b14 (1)
unstack b10 b7 (1)
put-down b10 (1)
pick-up b14 (1)
stack b14 b10 (1)
pick-up b7 (1)
stack b7 b6 (1)
unstack b14 b10 (1)
put-down b14 (1)
pick-up b10 (1)
stack b10 b7 (1)
pick-up b14 (1)
stack b14 b10 (1)
unstack b16 b1 (1)
put-down b16 (1)
unstack b1 b2 (1)
put-down b1 (1)
pick-up b16 (1)
stack b16 b1 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b16 b1 (1)
put-down b16 (1)
pick-up b1 (1)
stack b1 b2 (1)
pick-up b16 (1)
stack b16 b1 (1)
[t=0.0314028s, 26380 KB] Plan length: 86 step(s).
[t=0.0314028s, 26380 KB] Plan cost: 86
[t=0.0314028s, 26380 KB] Expanded 472 state(s).
[t=0.0314028s, 26380 KB] Reopened 0 state(s).
[t=0.0314028s, 26380 KB] Evaluated 473 state(s).
[t=0.0314028s, 26380 KB] Evaluations: 946
[t=0.0314028s, 26380 KB] Generated 4546 state(s).
[t=0.0314028s, 26380 KB] Dead ends: 0 state(s).
[t=0.0314028s, 26380 KB] Number of registered states: 473
[t=0.0314028s, 26380 KB] Int hash set load factor: 473/512 = 0.923828
[t=0.0314028s, 26380 KB] Int hash set resizes: 9
[t=0.0314028s, 26380 KB] Search time: 0.0117344s
[t=0.0314028s, 26380 KB] Total time: 0.0314028s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.17s
