INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_5.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4267 total queue pushes
Completing instantiation... [0.010s CPU, 0.014s wall-clock]
Instantiating: [0.020s CPU, 0.024s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.020s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.011s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.005s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 21
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7606
Translator peak memory: 36452 KB
Writing output... [0.000s CPU, 0.004s wall-clock]
Done! [0.070s CPU, 0.074s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9448e-05s, 24488 KB] reading input...
[t=0.00246222s, 25268 KB] done reading input!
[t=0.00332864s, 25664 KB] Initializing landmark count heuristic...
[t=0.00335907s, 25664 KB] Generating landmark graph...
[t=0.00341614s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00347315s, 25664 KB] Initializing Exploration...
[t=0.00374004s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0145129s, 26512 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0146264s, 26512 KB] Landmarks generation time: 0.0112113s
[t=0.0146403s, 26512 KB] Discovered 104 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0146565s, 26512 KB] 994 edges
[t=0.0146657s, 26512 KB] approx. reasonable orders
[t=0.0182213s, 26512 KB] approx. obedient reasonable orders
[t=0.0187323s, 26512 KB] Removed 1 reasonable or obedient reasonable orders
[t=0.018747s, 26512 KB] Landmarks generation time: 0.0153835s
[t=0.0187585s, 26512 KB] Discovered 104 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0187673s, 26512 KB] 1073 edges
[t=0.0187754s, 26512 KB] Landmark graph generation time: 0.0154233s
[t=0.018784s, 26512 KB] Landmark graph contains 104 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0187918s, 26512 KB] Landmark graph contains 1073 orderings.
[t=0.0191026s, 26512 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0198992s, 26512 KB] time to simplify: 0.000852442s
[t=0.0200035s, 26512 KB] Initializing additive heuristic...
[t=0.0200171s, 26512 KB] Initializing FF heuristic...
[t=0.0200649s, 26512 KB] Building successor generator...done!
[t=0.0202243s, 26512 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0202322s, 26512 KB] time for successor generation creation: 0.000129302s
[t=0.0202445s, 26512 KB] Variables: 43
[t=0.0202524s, 26512 KB] FactPairs: 506
[t=0.0202601s, 26512 KB] Bytes per state: 16
[t=0.020342s, 26512 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0203743s, 26512 KB] 43 initial landmarks, 21 goal landmarks
[t=0.0204252s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0204339s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0204424s, 26512 KB] g=0, 1 evaluated, 0 expanded
[t=0.0204545s, 26512 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0204628s, 26512 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0205318s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0205408s, 26512 KB] g=1, 3 evaluated, 2 expanded
[t=0.020574s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.020583s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0205915s, 26512 KB] g=2, 4 evaluated, 3 expanded
[t=0.0206465s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0206554s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0206635s, 26512 KB] g=3, 6 evaluated, 5 expanded
[t=0.0206953s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0207037s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0207114s, 26512 KB] g=4, 7 evaluated, 6 expanded
[t=0.0207888s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0207975s, 26512 KB] g=6, 10 evaluated, 9 expanded
[t=0.0209784s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0209947s, 26512 KB] g=8, 13 evaluated, 12 expanded
[t=0.0210985s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.021108s, 26512 KB] g=10, 17 evaluated, 16 expanded
[t=0.0212322s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0212409s, 26512 KB] g=12, 22 evaluated, 21 expanded
[t=0.0212963s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0213051s, 26512 KB] g=12, 24 evaluated, 23 expanded
[t=0.0216559s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0216658s, 26512 KB] g=16, 39 evaluated, 38 expanded
[t=0.0218343s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0218429s, 26512 KB] g=18, 46 evaluated, 45 expanded
[t=0.0220734s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0220823s, 26512 KB] g=20, 56 evaluated, 55 expanded
[t=0.0221665s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0221749s, 26512 KB] g=21, 59 evaluated, 58 expanded
[t=0.0222083s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0222168s, 26512 KB] g=22, 60 evaluated, 59 expanded
[t=0.0224617s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0224709s, 26512 KB] g=24, 70 evaluated, 69 expanded
[t=0.0226501s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0226616s, 26512 KB] g=26, 76 evaluated, 75 expanded
[t=0.0230304s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0230405s, 26512 KB] g=31, 91 evaluated, 90 expanded
[t=0.0230983s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0231073s, 26512 KB] g=32, 93 evaluated, 92 expanded
[t=0.0234491s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0234586s, 26512 KB] g=34, 107 evaluated, 106 expanded
[t=0.023782s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0237907s, 26512 KB] g=36, 120 evaluated, 119 expanded
[t=0.0241125s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0241213s, 26512 KB] g=38, 133 evaluated, 132 expanded
[t=0.0246265s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0246638s, 26512 KB] g=40, 148 evaluated, 147 expanded
[t=0.025612s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0256336s, 26512 KB] g=44, 185 evaluated, 184 expanded
[t=0.0259306s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0259413s, 26512 KB] g=46, 197 evaluated, 196 expanded
[t=0.0261462s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0261563s, 26512 KB] g=48, 205 evaluated, 204 expanded
[t=0.031484s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0315097s, 26512 KB] g=58, 430 evaluated, 429 expanded
[t=0.0361526s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0361663s, 26512 KB] g=76, 633 evaluated, 632 expanded
[t=0.0423971s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0424292s, 26512 KB] g=106, 897 evaluated, 896 expanded
[t=0.0457675s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0457827s, 26512 KB] g=40, 1043 evaluated, 1042 expanded
[t=0.0460473s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0460574s, 26512 KB] g=42, 1054 evaluated, 1053 expanded
[t=0.0534604s, 26512 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0534844s, 26512 KB] g=46, 1373 evaluated, 1372 expanded
[t=0.109987s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.110061s, 27248 KB] g=146, 3803 evaluated, 3802 expanded
[t=0.110249s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.110259s, 27248 KB] g=148, 3811 evaluated, 3810 expanded
[t=0.112605s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.11262s, 27248 KB] g=160, 3920 evaluated, 3919 expanded
[t=0.113073s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.113085s, 27248 KB] g=164, 3941 evaluated, 3940 expanded
[t=0.113207s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.113217s, 27248 KB] g=166, 3946 evaluated, 3945 expanded
[t=0.116537s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.116552s, 27248 KB] g=188, 4112 evaluated, 4111 expanded
[t=0.116746s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.116756s, 27248 KB] g=192, 4123 evaluated, 4122 expanded
[t=0.116835s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.116846s, 27248 KB] g=194, 4127 evaluated, 4126 expanded
[t=0.117023s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.117032s, 27248 KB] g=202, 4138 evaluated, 4137 expanded
[t=0.117254s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.117269s, 27248 KB] g=206, 4145 evaluated, 4144 expanded
[t=0.117286s, 27248 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.117295s, 27248 KB] g=207, 4146 evaluated, 4145 expanded
[t=0.117333s, 27248 KB] Solution found!
[t=0.11735s, 27248 KB] Actual search time: 0.0969732s
unstack b21 b18 (1)
put-down b21 (1)
unstack b18 b9 (1)
put-down b18 (1)
unstack b9 b2 (1)
put-down b9 (1)
unstack b2 b12 (1)
put-down b2 (1)
unstack b12 b7 (1)
put-down b12 (1)
unstack b7 b1 (1)
stack b7 b16 (1)
unstack b1 b15 (1)
put-down b1 (1)
unstack b15 b3 (1)
stack b15 b1 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b3 b4 (1)
stack b3 b12 (1)
unstack b4 b5 (1)
put-down b4 (1)
unstack b5 b6 (1)
stack b5 b2 (1)
unstack b6 b20 (1)
stack b6 b3 (1)
unstack b20 b8 (1)
put-down b20 (1)
unstack b8 b17 (1)
put-down b8 (1)
unstack b17 b10 (1)
put-down b17 (1)
unstack b10 b11 (1)
stack b10 b21 (1)
unstack b11 b14 (1)
stack b11 b5 (1)
pick-up b20 (1)
stack b20 b17 (1)
unstack b14 b19 (1)
put-down b14 (1)
unstack b19 b13 (1)
stack b19 b7 (1)
pick-up b13 (1)
stack b13 b9 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b8 (1)
stack b8 b14 (1)
unstack b19 b7 (1)
put-down b19 (1)
unstack b7 b16 (1)
put-down b7 (1)
pick-up b16 (1)
stack b16 b6 (1)
pick-up b7 (1)
stack b7 b16 (1)
pick-up b19 (1)
stack b19 b7 (1)
unstack b8 b14 (1)
put-down b8 (1)
unstack b14 b13 (1)
put-down b14 (1)
pick-up b8 (1)
stack b8 b14 (1)
unstack b13 b9 (1)
put-down b13 (1)
pick-up b9 (1)
stack b9 b19 (1)
pick-up b13 (1)
stack b13 b9 (1)
unstack b8 b14 (1)
put-down b8 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b8 (1)
stack b8 b14 (1)
unstack b11 b5 (1)
put-down b11 (1)
unstack b5 b2 (1)
put-down b5 (1)
unstack b2 b15 (1)
put-down b2 (1)
pick-up b5 (1)
stack b5 b2 (1)
pick-up b11 (1)
stack b11 b5 (1)
unstack b8 b14 (1)
put-down b8 (1)
unstack b14 b13 (1)
put-down b14 (1)
pick-up b8 (1)
stack b8 b14 (1)
unstack b15 b1 (1)
put-down b15 (1)
pick-up b1 (1)
stack b1 b8 (1)
pick-up b15 (1)
stack b15 b1 (1)
unstack b11 b5 (1)
put-down b11 (1)
unstack b5 b2 (1)
put-down b5 (1)
pick-up b11 (1)
stack b11 b5 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b11 b5 (1)
put-down b11 (1)
pick-up b5 (1)
stack b5 b2 (1)
pick-up b11 (1)
stack b11 b5 (1)
unstack b13 b9 (1)
put-down b13 (1)
unstack b9 b19 (1)
put-down b9 (1)
pick-up b13 (1)
stack b13 b9 (1)
unstack b19 b7 (1)
put-down b19 (1)
unstack b7 b16 (1)
put-down b7 (1)
pick-up b19 (1)
stack b19 b7 (1)
unstack b13 b9 (1)
put-down b13 (1)
pick-up b9 (1)
stack b9 b19 (1)
pick-up b13 (1)
stack b13 b9 (1)
unstack b16 b6 (1)
put-down b16 (1)
unstack b6 b3 (1)
put-down b6 (1)
pick-up b16 (1)
stack b16 b6 (1)
unstack b3 b12 (1)
put-down b3 (1)
pick-up b12 (1)
stack b12 b4 (1)
pick-up b3 (1)
stack b3 b12 (1)
unstack b16 b6 (1)
put-down b16 (1)
pick-up b6 (1)
stack b6 b3 (1)
pick-up b16 (1)
stack b16 b6 (1)
unstack b13 b9 (1)
put-down b13 (1)
unstack b9 b19 (1)
put-down b9 (1)
pick-up b13 (1)
stack b13 b9 (1)
unstack b19 b7 (1)
put-down b19 (1)
pick-up b7 (1)
stack b7 b16 (1)
pick-up b19 (1)
stack b19 b7 (1)
unstack b13 b9 (1)
put-down b13 (1)
pick-up b9 (1)
stack b9 b19 (1)
pick-up b13 (1)
stack b13 b9 (1)
unstack b11 b5 (1)
put-down b11 (1)
unstack b5 b2 (1)
put-down b5 (1)
unstack b2 b15 (1)
put-down b2 (1)
pick-up b5 (1)
stack b5 b2 (1)
pick-up b11 (1)
stack b11 b5 (1)
unstack b15 b1 (1)
put-down b15 (1)
unstack b1 b8 (1)
put-down b1 (1)
pick-up b15 (1)
stack b15 b1 (1)
unstack b8 b14 (1)
put-down b8 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b8 (1)
stack b8 b14 (1)
unstack b15 b1 (1)
put-down b15 (1)
pick-up b1 (1)
stack b1 b8 (1)
pick-up b15 (1)
stack b15 b1 (1)
unstack b11 b5 (1)
put-down b11 (1)
unstack b5 b2 (1)
put-down b5 (1)
pick-up b11 (1)
stack b11 b5 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b11 b5 (1)
put-down b11 (1)
pick-up b5 (1)
stack b5 b2 (1)
pick-up b11 (1)
stack b11 b5 (1)
[t=0.117359s, 27248 KB] Plan length: 208 step(s).
[t=0.117359s, 27248 KB] Plan cost: 208
[t=0.117359s, 27248 KB] Expanded 4147 state(s).
[t=0.117359s, 27248 KB] Reopened 0 state(s).
[t=0.117359s, 27248 KB] Evaluated 4148 state(s).
[t=0.117359s, 27248 KB] Evaluations: 8296
[t=0.117359s, 27248 KB] Generated 50159 state(s).
[t=0.117359s, 27248 KB] Dead ends: 0 state(s).
[t=0.117359s, 27248 KB] Number of registered states: 4148
[t=0.117359s, 27248 KB] Int hash set load factor: 4148/8192 = 0.506348
[t=0.117359s, 27248 KB] Int hash set resizes: 13
[t=0.117359s, 27248 KB] Search time: 0.0970172s
[t=0.117359s, 27248 KB] Total time: 0.117359s
Solution found.
Peak memory: 27248 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.22s
