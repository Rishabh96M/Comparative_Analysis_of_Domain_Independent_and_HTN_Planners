INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_1.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4268 total queue pushes
Completing instantiation... [0.020s CPU, 0.014s wall-clock]
Instantiating: [0.030s CPU, 0.025s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.020s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.009s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.005s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 21
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7606
Translator peak memory: 36452 KB
Writing output... [0.000s CPU, 0.004s wall-clock]
Done! [0.080s CPU, 0.081s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.9325e-05s, 24488 KB] reading input...
[t=0.00255946s, 25268 KB] done reading input!
[t=0.00340987s, 25664 KB] Initializing landmark count heuristic...
[t=0.00344258s, 25664 KB] Generating landmark graph...
[t=0.00349862s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00355294s, 25664 KB] Initializing Exploration...
[t=0.00380243s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0127737s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0128091s, 26380 KB] Landmarks generation time: 0.00931022s
[t=0.0128222s, 26380 KB] Discovered 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0128375s, 26380 KB] 423 edges
[t=0.0128464s, 26380 KB] approx. reasonable orders
[t=0.0134443s, 26380 KB] approx. obedient reasonable orders
[t=0.0134693s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.013478s, 26380 KB] Landmarks generation time: 0.0100322s
[t=0.0134869s, 26380 KB] Discovered 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0134944s, 26380 KB] 436 edges
[t=0.013502s, 26380 KB] Landmark graph generation time: 0.0100661s
[t=0.01351s, 26380 KB] Landmark graph contains 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0135177s, 26380 KB] Landmark graph contains 436 orderings.
[t=0.0137765s, 26380 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0145771s, 26380 KB] time to simplify: 0.000857225s
[t=0.0147015s, 26380 KB] Initializing additive heuristic...
[t=0.0147265s, 26380 KB] Initializing FF heuristic...
[t=0.0147741s, 26380 KB] Building successor generator...done!
[t=0.0149515s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0149605s, 26380 KB] time for successor generation creation: 0.000143011s
[t=0.0149731s, 26380 KB] Variables: 43
[t=0.0149813s, 26380 KB] FactPairs: 506
[t=0.0149893s, 26380 KB] Bytes per state: 16
[t=0.0150687s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0151049s, 26380 KB] 43 initial landmarks, 21 goal landmarks
[t=0.0151858s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0151991s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0152093s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.015223s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0152314s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0153156s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0153251s, 26380 KB] g=1, 3 evaluated, 2 expanded
[t=0.0153597s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0153695s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0153782s, 26380 KB] g=2, 4 evaluated, 3 expanded
[t=0.0155103s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0155296s, 26380 KB] g=4, 8 evaluated, 7 expanded
[t=0.0157764s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.015798s, 26380 KB] g=6, 17 evaluated, 16 expanded
[t=0.0159446s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0159533s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0159611s, 26380 KB] g=8, 23 evaluated, 22 expanded
[t=0.0160443s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0160531s, 26380 KB] g=9, 26 evaluated, 25 expanded
[t=0.0160845s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0160928s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0161003s, 26380 KB] g=10, 27 evaluated, 26 expanded
[t=0.0162309s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0162395s, 26380 KB] g=12, 32 evaluated, 31 expanded
[t=0.0163565s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0163695s, 26380 KB] g=13, 36 evaluated, 35 expanded
[t=0.0164054s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0164139s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0164218s, 26380 KB] g=14, 37 evaluated, 36 expanded
[t=0.0165871s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.016596s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.016604s, 26380 KB] g=16, 44 evaluated, 43 expanded
[t=0.0171063s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0171179s, 26380 KB] g=22, 66 evaluated, 65 expanded
[t=0.0179562s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0179676s, 26380 KB] g=28, 103 evaluated, 102 expanded
[t=0.0184744s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0184867s, 26380 KB] g=28, 125 evaluated, 124 expanded
[t=0.018638s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0186475s, 26380 KB] g=30, 131 evaluated, 130 expanded
[t=0.0187712s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0187802s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0187884s, 26380 KB] g=32, 136 evaluated, 135 expanded
[t=0.0189189s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0189279s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.018936s, 26380 KB] g=34, 141 evaluated, 140 expanded
[t=0.019037s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0190463s, 26380 KB] g=36, 145 evaluated, 144 expanded
[t=0.0191699s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.019179s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0191872s, 26380 KB] g=38, 150 evaluated, 149 expanded
[t=0.0193124s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0193218s, 26380 KB] g=40, 155 evaluated, 154 expanded
[t=0.0193548s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0193638s, 26380 KB] g=40, 156 evaluated, 155 expanded
[t=0.0195765s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0195872s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0195957s, 26380 KB] g=42, 165 evaluated, 164 expanded
[t=0.0196742s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0196834s, 26380 KB] g=43, 168 evaluated, 167 expanded
[t=0.0197161s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0197249s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0197329s, 26380 KB] g=44, 169 evaluated, 168 expanded
[t=0.0198106s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0198201s, 26380 KB] g=45, 172 evaluated, 171 expanded
[t=0.019864s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.019876s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0198846s, 26380 KB] g=46, 173 evaluated, 172 expanded
[t=0.0200277s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0200379s, 26380 KB] g=47, 179 evaluated, 178 expanded
[t=0.0200698s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0200784s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0200866s, 26380 KB] g=48, 180 evaluated, 179 expanded
[t=0.0202072s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0202165s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0202244s, 26380 KB] g=50, 185 evaluated, 184 expanded
[t=0.0203382s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0203473s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0203554s, 26380 KB] g=52, 190 evaluated, 189 expanded
[t=0.0213241s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.021337s, 26380 KB] g=60, 235 evaluated, 234 expanded
[t=0.0214742s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.021483s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.021491s, 26380 KB] g=62, 241 evaluated, 240 expanded
[t=0.0216036s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0216125s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0216204s, 26380 KB] g=64, 246 evaluated, 245 expanded
[t=0.0217097s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0217184s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0217262s, 26380 KB] g=66, 250 evaluated, 249 expanded
[t=0.0226214s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0226324s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0226407s, 26380 KB] g=78, 296 evaluated, 295 expanded
[t=0.0228105s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0228199s, 26380 KB] g=82, 305 evaluated, 304 expanded
[t=0.0228846s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.022893s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0229012s, 26380 KB] g=84, 308 evaluated, 307 expanded
[t=0.0232004s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0232103s, 26380 KB] g=96, 326 evaluated, 325 expanded
[t=0.0232802s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0232894s, 26380 KB] g=98, 330 evaluated, 329 expanded
[t=0.0233282s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0233364s, 26380 KB] g=98, 332 evaluated, 331 expanded
[t=0.0233852s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0233939s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0234017s, 26380 KB] g=100, 335 evaluated, 334 expanded
[t=0.023457s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0234678s, 26380 KB] g=104, 339 evaluated, 338 expanded
[t=0.0234844s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0234928s, 26380 KB] g=105, 340 evaluated, 339 expanded
[t=0.0235074s, 26380 KB] Solution found!
[t=0.0235174s, 26380 KB] Actual search time: 0.00839015s
unstack b21 b10 (1)
put-down b21 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b12 b18 (1)
put-down b12 (1)
unstack b18 b2 (1)
stack b18 b4 (1)
unstack b2 b14 (1)
stack b2 b18 (1)
unstack b14 b20 (1)
put-down b14 (1)
unstack b20 b9 (1)
stack b20 b21 (1)
pick-up b10 (1)
stack b10 b9 (1)
unstack b7 b1 (1)
put-down b7 (1)
pick-up b1 (1)
stack b1 b12 (1)
pick-up b7 (1)
stack b7 b1 (1)
unstack b2 b18 (1)
put-down b2 (1)
unstack b18 b4 (1)
put-down b18 (1)
unstack b4 b5 (1)
stack b4 b14 (1)
pick-up b18 (1)
stack b18 b4 (1)
unstack b5 b3 (1)
stack b5 b10 (1)
pick-up b2 (1)
stack b2 b18 (1)
unstack b3 b15 (1)
put-down b3 (1)
unstack b15 b11 (1)
stack b15 b7 (1)
unstack b11 b16 (1)
put-down b11 (1)
unstack b16 b17 (1)
put-down b16 (1)
unstack b17 b19 (1)
put-down b17 (1)
unstack b19 b6 (1)
stack b19 b16 (1)
unstack b6 b13 (1)
stack b6 b5 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b3 (1)
stack b3 b11 (1)
unstack b15 b7 (1)
put-down b15 (1)
unstack b7 b1 (1)
put-down b7 (1)
unstack b1 b12 (1)
put-down b1 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b1 (1)
stack b1 b12 (1)
pick-up b7 (1)
stack b7 b1 (1)
pick-up b15 (1)
stack b15 b7 (1)
unstack b2 b18 (1)
put-down b2 (1)
unstack b18 b4 (1)
put-down b18 (1)
pick-up b2 (1)
stack b2 b18 (1)
unstack b4 b14 (1)
put-down b4 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b4 (1)
stack b4 b14 (1)
unstack b2 b18 (1)
put-down b2 (1)
pick-up b18 (1)
stack b18 b4 (1)
pick-up b2 (1)
stack b2 b18 (1)
unstack b6 b5 (1)
put-down b6 (1)
unstack b5 b10 (1)
put-down b5 (1)
pick-up b6 (1)
stack b6 b5 (1)
unstack b10 b9 (1)
put-down b10 (1)
unstack b9 b8 (1)
put-down b9 (1)
pick-up b8 (1)
stack b8 b15 (1)
pick-up b9 (1)
stack b9 b8 (1)
pick-up b10 (1)
stack b10 b9 (1)
unstack b6 b5 (1)
put-down b6 (1)
pick-up b5 (1)
stack b5 b10 (1)
pick-up b6 (1)
stack b6 b5 (1)
[t=0.0235266s, 26380 KB] Plan length: 106 step(s).
[t=0.0235266s, 26380 KB] Plan cost: 106
[t=0.0235266s, 26380 KB] Expanded 340 state(s).
[t=0.0235266s, 26380 KB] Reopened 0 state(s).
[t=0.0235266s, 26380 KB] Evaluated 341 state(s).
[t=0.0235266s, 26380 KB] Evaluations: 682
[t=0.0235266s, 26380 KB] Generated 2585 state(s).
[t=0.0235266s, 26380 KB] Dead ends: 0 state(s).
[t=0.0235266s, 26380 KB] Number of registered states: 341
[t=0.0235266s, 26380 KB] Int hash set load factor: 341/512 = 0.666016
[t=0.0235266s, 26380 KB] Int hash set resizes: 9
[t=0.0235266s, 26380 KB] Search time: 0.00845822s
[t=0.0235266s, 26380 KB] Total time: 0.0235266s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.15s
