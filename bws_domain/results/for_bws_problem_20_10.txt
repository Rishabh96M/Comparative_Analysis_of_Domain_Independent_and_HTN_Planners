INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_20/bws_problem_20_10.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.010s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.000s CPU, 0.008s wall-clock]
1342 relevant atoms
900 auxiliary atoms
2242 final queue length
3885 total queue pushes
Completing instantiation... [0.020s CPU, 0.013s wall-clock]
Instantiating: [0.030s CPU, 0.023s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
21 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.018s wall-clock]
1180 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
40 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.009s wall-clock]
Reordering and filtering variables...
41 of 41 variables necessary.
21 of 41 mutex groups necessary.
800 of 800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.005s wall-clock]
Translator variables: 41
Translator derived variables: 0
Translator facts: 462
Translator goal facts: 20
Translator mutex groups: 21
Translator total mutex groups size: 441
Translator operators: 800
Translator axioms: 0
Translator task size: 6904
Translator peak memory: 35944 KB
Writing output... [0.010s CPU, 0.004s wall-clock]
Done! [0.080s CPU, 0.067s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9979e-05s, 24488 KB] reading input...
[t=0.00212401s, 25180 KB] done reading input!
[t=0.002926s, 25444 KB] Initializing landmark count heuristic...
[t=0.0029536s, 25444 KB] Generating landmark graph...
[t=0.00300557s, 25576 KB] Building a landmark graph with reasonable orders.
[t=0.00305707s, 25576 KB] Initializing Exploration...
[t=0.00327522s, 25744 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0117884s, 26272 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0118541s, 26272 KB] Landmarks generation time: 0.00885139s
[t=0.0118694s, 26272 KB] Discovered 98 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0118846s, 26272 KB] 458 edges
[t=0.0118951s, 26272 KB] approx. reasonable orders
[t=0.0150502s, 26272 KB] approx. obedient reasonable orders
[t=0.0154003s, 26272 KB] Removed 4 reasonable or obedient reasonable orders
[t=0.0154128s, 26272 KB] Landmarks generation time: 0.0124561s
[t=0.0154234s, 26272 KB] Discovered 98 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.015431s, 26272 KB] 546 edges
[t=0.0154392s, 26272 KB] Landmark graph generation time: 0.0124925s
[t=0.0154477s, 26272 KB] Landmark graph contains 98 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0154553s, 26272 KB] Landmark graph contains 546 orderings.
[t=0.0157522s, 26272 KB] Simplifying 3160 unary operators... done! [2400 unary operators]
[t=0.0164591s, 26272 KB] time to simplify: 0.000755426s
[t=0.0165547s, 26272 KB] Initializing additive heuristic...
[t=0.0165678s, 26272 KB] Initializing FF heuristic...
[t=0.0166173s, 26272 KB] Building successor generator...done!
[t=0.0167645s, 26272 KB] peak memory difference for successor generator creation: 0 KB
[t=0.016773s, 26272 KB] time for successor generation creation: 0.0001175s
[t=0.0167844s, 26272 KB] Variables: 41
[t=0.0167923s, 26272 KB] FactPairs: 462
[t=0.0167999s, 26272 KB] Bytes per state: 16
[t=0.01689s, 26272 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.016922s, 26272 KB] 41 initial landmarks, 20 goal landmarks
[t=0.0169667s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0169758s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0169841s, 26272 KB] g=0, 1 evaluated, 0 expanded
[t=0.0169968s, 26272 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.017005s, 26272 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0170381s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0170469s, 26272 KB] g=1, 2 evaluated, 1 expanded
[t=0.017079s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0170882s, 26272 KB] g=2, 3 evaluated, 2 expanded
[t=0.017226s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.017235s, 26272 KB] g=3, 9 evaluated, 8 expanded
[t=0.0173282s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0173381s, 26272 KB] g=5, 13 evaluated, 12 expanded
[t=0.0173695s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0173778s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0173855s, 26272 KB] g=6, 14 evaluated, 13 expanded
[t=0.0174375s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0174462s, 26272 KB] g=7, 16 evaluated, 15 expanded
[t=0.0174773s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0174856s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0174934s, 26272 KB] g=8, 17 evaluated, 16 expanded
[t=0.017586s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0175943s, 26272 KB] g=9, 21 evaluated, 20 expanded
[t=0.0176243s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0176326s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0176403s, 26272 KB] g=10, 22 evaluated, 21 expanded
[t=0.0176914s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0177035s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0177119s, 26272 KB] g=11, 24 evaluated, 23 expanded
[t=0.0177428s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0177509s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0177586s, 26272 KB] g=12, 25 evaluated, 24 expanded
[t=0.0178958s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0179043s, 26272 KB] g=14, 31 evaluated, 30 expanded
[t=0.0179578s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0179662s, 26272 KB] g=14, 33 evaluated, 32 expanded
[t=0.0182861s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0182953s, 26272 KB] g=16, 48 evaluated, 47 expanded
[t=0.0184427s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0184536s, 26272 KB] g=17, 54 evaluated, 53 expanded
[t=0.018486s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0184948s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0185084s, 26272 KB] g=18, 55 evaluated, 54 expanded
[t=0.0186839s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0186925s, 26272 KB] g=20, 63 evaluated, 62 expanded
[t=0.018767s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0187755s, 26272 KB] g=20, 66 evaluated, 65 expanded
[t=0.0189924s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0190015s, 26272 KB] g=22, 76 evaluated, 75 expanded
[t=0.0191562s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0191652s, 26272 KB] g=22, 83 evaluated, 82 expanded
[t=0.0193876s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0193966s, 26272 KB] g=24, 93 evaluated, 92 expanded
[t=0.0194497s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0194582s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.019466s, 26272 KB] g=24, 95 evaluated, 94 expanded
[t=0.0196401s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0196491s, 26272 KB] g=26, 103 evaluated, 102 expanded
[t=0.0197407s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0197493s, 26272 KB] g=26, 107 evaluated, 106 expanded
[t=0.020122s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0201311s, 26272 KB] g=28, 125 evaluated, 124 expanded
[t=0.0201861s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0201949s, 26272 KB] g=28, 127 evaluated, 126 expanded
[t=0.020498s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0205071s, 26272 KB] g=30, 141 evaluated, 140 expanded
[t=0.0205795s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0205879s, 26272 KB] g=30, 144 evaluated, 143 expanded
[t=0.0208249s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0208336s, 26272 KB] g=32, 155 evaluated, 154 expanded
[t=0.0213373s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0213495s, 26272 KB] g=36, 179 evaluated, 178 expanded
[t=0.0221435s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0221534s, 26272 KB] g=40, 217 evaluated, 216 expanded
[t=0.0224131s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0224235s, 26272 KB] g=40, 229 evaluated, 228 expanded
[t=0.022705s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0227145s, 26272 KB] g=42, 242 evaluated, 241 expanded
[t=0.0229666s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0229762s, 26272 KB] g=44, 254 evaluated, 253 expanded
[t=0.0243753s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0243867s, 26272 KB] g=50, 321 evaluated, 320 expanded
[t=0.0252084s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0252188s, 26272 KB] g=54, 360 evaluated, 359 expanded
[t=0.0253737s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0253829s, 26272 KB] g=56, 367 evaluated, 366 expanded
[t=0.0283511s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0283775s, 26272 KB] g=70, 509 evaluated, 508 expanded
[t=0.0294516s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0294666s, 26272 KB] g=88, 559 evaluated, 558 expanded
[t=0.0310207s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0310375s, 26272 KB] g=66, 636 evaluated, 635 expanded
[t=0.0320714s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0320857s, 26272 KB] g=74, 691 evaluated, 690 expanded
[t=0.0324412s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0324519s, 26272 KB] g=78, 710 evaluated, 709 expanded
[t=0.0325655s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0325745s, 26272 KB] g=80, 716 evaluated, 715 expanded
[t=0.0331703s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0331814s, 26272 KB] g=92, 749 evaluated, 748 expanded
[t=0.033299s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0333076s, 26272 KB] g=96, 756 evaluated, 755 expanded
[t=0.0333241s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0333324s, 26272 KB] g=97, 757 evaluated, 756 expanded
[t=0.0333672s, 26272 KB] Solution found!
[t=0.033378s, 26272 KB] Actual search time: 0.0164532s
unstack b11 b15 (1)
put-down b11 (1)
unstack b17 b10 (1)
put-down b17 (1)
unstack b10 b14 (1)
put-down b10 (1)
unstack b14 b19 (1)
put-down b14 (1)
unstack b19 b13 (1)
put-down b19 (1)
unstack b13 b8 (1)
put-down b13 (1)
unstack b15 b6 (1)
put-down b15 (1)
unstack b4 b16 (1)
put-down b4 (1)
unstack b16 b20 (1)
put-down b16 (1)
unstack b20 b12 (1)
put-down b20 (1)
unstack b12 b7 (1)
stack b12 b19 (1)
pick-up b17 (1)
stack b17 b12 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b6 b3 (1)
stack b6 b20 (1)
unstack b8 b5 (1)
stack b8 b6 (1)
pick-up b3 (1)
stack b3 b5 (1)
unstack b7 b1 (1)
put-down b7 (1)
unstack b1 b9 (1)
put-down b1 (1)
pick-up b15 (1)
stack b15 b1 (1)
unstack b9 b18 (1)
stack b9 b14 (1)
unstack b18 b2 (1)
stack b18 b7 (1)
pick-up b2 (1)
stack b2 b3 (1)
unstack b11 b4 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b15 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b18 b7 (1)
put-down b18 (1)
pick-up b7 (1)
stack b7 b9 (1)
pick-up b18 (1)
stack b18 b7 (1)
unstack b8 b6 (1)
put-down b8 (1)
unstack b6 b20 (1)
put-down b6 (1)
pick-up b20 (1)
stack b20 b18 (1)
pick-up b6 (1)
stack b6 b20 (1)
pick-up b8 (1)
stack b8 b6 (1)
unstack b2 b3 (1)
put-down b2 (1)
unstack b3 b5 (1)
put-down b3 (1)
pick-up b2 (1)
stack b2 b3 (1)
pick-up b5 (1)
stack b5 b8 (1)
unstack b2 b3 (1)
put-down b2 (1)
pick-up b3 (1)
stack b3 b5 (1)
pick-up b2 (1)
stack b2 b3 (1)
unstack b11 b4 (1)
put-down b11 (1)
unstack b4 b15 (1)
put-down b4 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b15 b1 (1)
put-down b15 (1)
pick-up b1 (1)
stack b1 b2 (1)
pick-up b15 (1)
stack b15 b1 (1)
unstack b11 b4 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b15 (1)
pick-up b11 (1)
stack b11 b4 (1)
[t=0.0333873s, 26272 KB] Plan length: 98 step(s).
[t=0.0333873s, 26272 KB] Plan cost: 98
[t=0.0333873s, 26272 KB] Expanded 758 state(s).
[t=0.0333873s, 26272 KB] Reopened 0 state(s).
[t=0.0333873s, 26272 KB] Evaluated 759 state(s).
[t=0.0333873s, 26272 KB] Evaluations: 1518
[t=0.0333873s, 26272 KB] Generated 8978 state(s).
[t=0.0333873s, 26272 KB] Dead ends: 0 state(s).
[t=0.0333873s, 26272 KB] Number of registered states: 759
[t=0.0333873s, 26272 KB] Int hash set load factor: 759/1024 = 0.741211
[t=0.0333873s, 26272 KB] Int hash set resizes: 10
[t=0.0333873s, 26272 KB] Search time: 0.0164977s
[t=0.0333873s, 26272 KB] Total time: 0.0333873s
Solution found.
Peak memory: 26272 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.13s
