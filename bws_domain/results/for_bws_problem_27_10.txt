INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_27/bws_problem_27_10.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.016s wall-clock]
2378 relevant atoms
1593 auxiliary atoms
3971 final queue length
6947 total queue pushes
Completing instantiation... [0.020s CPU, 0.025s wall-clock]
Instantiating: [0.040s CPU, 0.042s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
28 uncovered facts
Choosing groups: [0.000s CPU, 0.003s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.040s CPU, 0.041s wall-clock]
2160 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
54 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.018s wall-clock]
Reordering and filtering variables...
55 of 55 variables necessary.
28 of 55 mutex groups necessary.
1458 of 1458 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.009s wall-clock]
Translator variables: 55
Translator derived variables: 0
Translator facts: 812
Translator goal facts: 27
Translator mutex groups: 28
Translator total mutex groups size: 784
Translator operators: 1458
Translator axioms: 0
Translator task size: 12532
Translator peak memory: 39540 KB
Writing output... [0.000s CPU, 0.008s wall-clock]
Done! [0.130s CPU, 0.136s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.973e-05s, 24488 KB] reading input...
[t=0.0039634s, 25936 KB] done reading input!
[t=0.00479537s, 26332 KB] Initializing landmark count heuristic...
[t=0.00482251s, 26332 KB] Generating landmark graph...
[t=0.00489974s, 26332 KB] Building a landmark graph with reasonable orders.
[t=0.00497637s, 26464 KB] Initializing Exploration...
[t=0.00536141s, 26732 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0255128s, 27392 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0256138s, 27392 KB] Landmarks generation time: 0.0207402s
[t=0.0256537s, 27392 KB] Discovered 123 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.025671s, 27392 KB] 488 edges
[t=0.0256816s, 27392 KB] approx. reasonable orders
[t=0.0256917s, 27392 KB] approx. obedient reasonable orders
[t=0.0257226s, 27392 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.025732s, 27392 KB] Landmarks generation time: 0.0209075s
[t=0.0257427s, 27392 KB] Discovered 123 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0257515s, 27392 KB] 488 edges
[t=0.0257607s, 27392 KB] Landmark graph generation time: 0.020946s
[t=0.0257703s, 27392 KB] Landmark graph contains 123 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0257787s, 27392 KB] Landmark graph contains 488 orderings.
[t=0.0262852s, 27456 KB] Simplifying 5778 unary operators... done! [4374 unary operators]
[t=0.0276895s, 27588 KB] time to simplify: 0.00149332s
[t=0.0278616s, 27588 KB] Initializing additive heuristic...
[t=0.0278954s, 27588 KB] Initializing FF heuristic...
[t=0.0279483s, 27588 KB] Building successor generator...done!
[t=0.0282014s, 27588 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0282106s, 27588 KB] time for successor generation creation: 0.000216241s
[t=0.0282236s, 27588 KB] Variables: 55
[t=0.0282318s, 27588 KB] FactPairs: 812
[t=0.0282399s, 27588 KB] Bytes per state: 24
[t=0.0283214s, 27588 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0283546s, 27588 KB] 54 initial landmarks, 27 goal landmarks
[t=0.0284169s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0284267s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0284352s, 27588 KB] g=0, 1 evaluated, 0 expanded
[t=0.0284494s, 27588 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0284583s, 27588 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0285075s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.028517s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0285253s, 27588 KB] g=1, 2 evaluated, 1 expanded
[t=0.0285729s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0285819s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0285903s, 27588 KB] g=2, 3 evaluated, 2 expanded
[t=0.0286372s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0286459s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0286549s, 27588 KB] g=3, 4 evaluated, 3 expanded
[t=0.0287013s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.02871s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0287181s, 27588 KB] g=4, 5 evaluated, 4 expanded
[t=0.0288018s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0288111s, 27588 KB] g=5, 7 evaluated, 6 expanded
[t=0.0292434s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0292627s, 27588 KB] g=7, 17 evaluated, 16 expanded
[t=0.0297136s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0297277s, 27588 KB] g=10, 29 evaluated, 28 expanded
[t=0.0303151s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0303289s, 27588 KB] g=12, 44 evaluated, 43 expanded
[t=0.03046s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0304699s, 27588 KB] g=13, 47 evaluated, 46 expanded
[t=0.0305224s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0305314s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0305394s, 27588 KB] g=14, 48 evaluated, 47 expanded
[t=0.0308598s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0308706s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0308808s, 27588 KB] g=16, 57 evaluated, 56 expanded
[t=0.0311932s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0312105s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0312188s, 27588 KB] g=18, 65 evaluated, 64 expanded
[t=0.0315091s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0315191s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0315277s, 27588 KB] g=20, 73 evaluated, 72 expanded
[t=0.0317817s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0317909s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0317993s, 27588 KB] g=22, 80 evaluated, 79 expanded
[t=0.0320226s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0320327s, 27588 KB] g=23, 86 evaluated, 85 expanded
[t=0.0320793s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0320885s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0320966s, 27588 KB] g=24, 87 evaluated, 86 expanded
[t=0.0322488s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0322583s, 27588 KB] g=25, 91 evaluated, 90 expanded
[t=0.0323046s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0323134s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0323216s, 27588 KB] g=26, 92 evaluated, 91 expanded
[t=0.0325792s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.032589s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0325973s, 27588 KB] g=28, 99 evaluated, 98 expanded
[t=0.0333619s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0333739s, 27588 KB] g=32, 120 evaluated, 119 expanded
[t=0.0335634s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0335726s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0335813s, 27588 KB] g=34, 125 evaluated, 124 expanded
[t=0.0341026s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0341156s, 27588 KB] g=37, 139 evaluated, 138 expanded
[t=0.0344756s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0344884s, 27588 KB] g=39, 149 evaluated, 148 expanded
[t=0.0346807s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0347075s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0347166s, 27588 KB] g=42, 154 evaluated, 153 expanded
[t=0.035026s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0350372s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0350459s, 27588 KB] g=44, 162 evaluated, 161 expanded
[t=0.035856s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0358702s, 27588 KB] g=49, 185 evaluated, 184 expanded
[t=0.0359184s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0359292s, 27588 KB] g=50, 186 evaluated, 185 expanded
[t=0.0360115s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0360222s, 27588 KB] g=51, 188 evaluated, 187 expanded
[t=0.0360694s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.03608s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0360886s, 27588 KB] g=52, 189 evaluated, 188 expanded
[t=0.0364308s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0364411s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0364493s, 27588 KB] g=54, 198 evaluated, 197 expanded
[t=0.0367099s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0367229s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0367317s, 27588 KB] g=55, 205 evaluated, 204 expanded
[t=0.0367807s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0367905s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0367992s, 27588 KB] g=56, 206 evaluated, 205 expanded
[t=0.037024s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0370355s, 27588 KB] g=57, 212 evaluated, 211 expanded
[t=0.0370829s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0370943s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0371031s, 27588 KB] g=58, 213 evaluated, 212 expanded
[t=0.0372944s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0373078s, 27588 KB] g=59, 218 evaluated, 217 expanded
[t=0.0373576s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.037367s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0373753s, 27588 KB] g=60, 219 evaluated, 218 expanded
[t=0.0376982s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0377085s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0377174s, 27588 KB] g=62, 228 evaluated, 227 expanded
[t=0.0380044s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.038014s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0380222s, 27588 KB] g=64, 236 evaluated, 235 expanded
[t=0.0382629s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0382757s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0383045s, 27588 KB] g=66, 242 evaluated, 241 expanded
[t=0.0386663s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0386768s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0386852s, 27588 KB] g=68, 252 evaluated, 251 expanded
[t=0.0388839s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0388937s, 27588 KB] g=71, 257 evaluated, 256 expanded
[t=0.0389759s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0389899s, 27588 KB] g=72, 259 evaluated, 258 expanded
[t=0.0391477s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0391582s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0391669s, 27588 KB] g=74, 263 evaluated, 262 expanded
[t=0.0414697s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0414953s, 27588 KB] g=86, 326 evaluated, 325 expanded
[t=0.041991s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0420015s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0420103s, 27588 KB] g=92, 340 evaluated, 339 expanded
[t=0.044794s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0448101s, 27588 KB] g=106, 420 evaluated, 419 expanded
[t=0.0449593s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0449687s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0449774s, 27588 KB] g=108, 424 evaluated, 423 expanded
[t=0.0452936s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0453077s, 27588 KB] g=112, 433 evaluated, 432 expanded
[t=0.0454527s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0454735s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0454867s, 27588 KB] g=114, 436 evaluated, 435 expanded
[t=0.0536636s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0537319s, 27588 KB] g=148, 678 evaluated, 677 expanded
[t=0.0540262s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0540368s, 27588 KB] g=152, 687 evaluated, 686 expanded
[t=0.0541786s, 27588 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0541907s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0541994s, 27588 KB] g=154, 690 evaluated, 689 expanded
[t=0.0546439s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0546533s, 27588 KB] g=166, 707 evaluated, 706 expanded
[t=0.0547462s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0547556s, 27588 KB] g=170, 711 evaluated, 710 expanded
[t=0.0547773s, 27588 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.054786s, 27588 KB] g=171, 712 evaluated, 711 expanded
[t=0.0548042s, 27588 KB] Solution found!
[t=0.054824s, 27588 KB] Actual search time: 0.0264668s
unstack b10 b25 (1)
put-down b10 (1)
unstack b13 b26 (1)
put-down b13 (1)
unstack b19 b4 (1)
put-down b19 (1)
unstack b5 b9 (1)
put-down b5 (1)
unstack b15 b24 (1)
put-down b15 (1)
unstack b24 b2 (1)
put-down b24 (1)
unstack b2 b14 (1)
stack b2 b4 (1)
pick-up b14 (1)
stack b14 b15 (1)
unstack b25 b27 (1)
stack b25 b24 (1)
pick-up b19 (1)
stack b19 b27 (1)
unstack b26 b7 (1)
stack b26 b9 (1)
unstack b7 b20 (1)
put-down b7 (1)
unstack b20 b1 (1)
stack b20 b7 (1)
pick-up b5 (1)
stack b5 b1 (1)
unstack b19 b27 (1)
put-down b19 (1)
pick-up b27 (1)
stack b27 b14 (1)
pick-up b19 (1)
stack b19 b27 (1)
unstack b26 b9 (1)
put-down b26 (1)
unstack b9 b6 (1)
put-down b9 (1)
unstack b6 b23 (1)
put-down b6 (1)
unstack b23 b12 (1)
put-down b23 (1)
pick-up b26 (1)
stack b26 b9 (1)
unstack b2 b4 (1)
put-down b2 (1)
unstack b4 b17 (1)
put-down b4 (1)
unstack b17 b16 (1)
stack b17 b25 (1)
unstack b16 b22 (1)
put-down b16 (1)
unstack b22 b8 (1)
stack b22 b26 (1)
unstack b8 b3 (1)
put-down b8 (1)
unstack b3 b21 (1)
put-down b3 (1)
unstack b21 b11 (1)
put-down b21 (1)
pick-up b6 (1)
stack b6 b21 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b4 (1)
stack b4 b17 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b11 b12 (1)
put-down b11 (1)
pick-up b12 (1)
stack b12 b22 (1)
pick-up b11 (1)
stack b11 b12 (1)
unstack b19 b27 (1)
put-down b19 (1)
unstack b27 b14 (1)
put-down b27 (1)
pick-up b19 (1)
stack b19 b27 (1)
unstack b14 b15 (1)
put-down b14 (1)
pick-up b15 (1)
stack b15 b11 (1)
pick-up b14 (1)
stack b14 b15 (1)
unstack b19 b27 (1)
put-down b19 (1)
pick-up b27 (1)
stack b27 b14 (1)
pick-up b19 (1)
stack b19 b27 (1)
unstack b2 b4 (1)
put-down b2 (1)
unstack b4 b17 (1)
put-down b4 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b17 b25 (1)
put-down b17 (1)
unstack b25 b24 (1)
put-down b25 (1)
pick-up b24 (1)
stack b24 b23 (1)
pick-up b25 (1)
stack b25 b24 (1)
pick-up b17 (1)
stack b17 b25 (1)
unstack b2 b4 (1)
put-down b2 (1)
pick-up b4 (1)
stack b4 b17 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b19 b27 (1)
put-down b19 (1)
unstack b27 b14 (1)
put-down b27 (1)
pick-up b19 (1)
stack b19 b27 (1)
unstack b14 b15 (1)
put-down b14 (1)
unstack b15 b11 (1)
put-down b15 (1)
pick-up b14 (1)
stack b14 b15 (1)
unstack b19 b27 (1)
put-down b19 (1)
pick-up b27 (1)
stack b27 b14 (1)
pick-up b19 (1)
stack b19 b27 (1)
unstack b11 b12 (1)
put-down b11 (1)
unstack b12 b22 (1)
put-down b12 (1)
pick-up b11 (1)
stack b11 b12 (1)
unstack b22 b26 (1)
put-down b22 (1)
unstack b26 b9 (1)
put-down b26 (1)
pick-up b9 (1)
stack b9 b3 (1)
pick-up b26 (1)
stack b26 b9 (1)
pick-up b22 (1)
stack b22 b26 (1)
unstack b11 b12 (1)
put-down b11 (1)
pick-up b12 (1)
stack b12 b22 (1)
pick-up b11 (1)
stack b11 b12 (1)
unstack b19 b27 (1)
put-down b19 (1)
unstack b27 b14 (1)
put-down b27 (1)
pick-up b19 (1)
stack b19 b27 (1)
unstack b14 b15 (1)
put-down b14 (1)
pick-up b15 (1)
stack b15 b11 (1)
pick-up b14 (1)
stack b14 b15 (1)
unstack b19 b27 (1)
put-down b19 (1)
pick-up b27 (1)
stack b27 b14 (1)
pick-up b19 (1)
stack b19 b27 (1)
[t=0.0548337s, 27588 KB] Plan length: 172 step(s).
[t=0.0548337s, 27588 KB] Plan cost: 172
[t=0.0548337s, 27588 KB] Expanded 712 state(s).
[t=0.0548337s, 27588 KB] Reopened 0 state(s).
[t=0.0548337s, 27588 KB] Evaluated 713 state(s).
[t=0.0548337s, 27588 KB] Evaluations: 1426
[t=0.0548337s, 27588 KB] Generated 9849 state(s).
[t=0.0548337s, 27588 KB] Dead ends: 0 state(s).
[t=0.0548337s, 27588 KB] Number of registered states: 713
[t=0.0548337s, 27588 KB] Int hash set load factor: 713/1024 = 0.696289
[t=0.0548337s, 27588 KB] Int hash set resizes: 10
[t=0.0548337s, 27588 KB] Search time: 0.0265128s
[t=0.0548337s, 27588 KB] Total time: 0.0548337s
Solution found.
Peak memory: 27588 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.24s
