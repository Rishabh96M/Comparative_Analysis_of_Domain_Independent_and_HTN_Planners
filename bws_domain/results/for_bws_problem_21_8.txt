INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py ../bws_domain/bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_8.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.009s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4268 total queue pushes
Completing instantiation... [0.010s CPU, 0.014s wall-clock]
Instantiating: [0.020s CPU, 0.024s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.010s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.020s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.010s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.005s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 21
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7606
Translator peak memory: 36452 KB
Writing output... [0.010s CPU, 0.004s wall-clock]
Done! [0.070s CPU, 0.078s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.4854e-05s, 24488 KB] reading input...
[t=0.00254389s, 25268 KB] done reading input!
[t=0.00339177s, 25664 KB] Initializing landmark count heuristic...
[t=0.00342305s, 25664 KB] Generating landmark graph...
[t=0.00348058s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00353169s, 25664 KB] Initializing Exploration...
[t=0.00377323s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0126724s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0127087s, 26380 KB] Landmarks generation time: 0.00922867s
[t=0.0127222s, 26380 KB] Discovered 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0127582s, 26380 KB] 571 edges
[t=0.0127677s, 26380 KB] approx. reasonable orders
[t=0.0131446s, 26380 KB] approx. obedient reasonable orders
[t=0.0131718s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.013181s, 26380 KB] Landmarks generation time: 0.00975526s
[t=0.0131906s, 26380 KB] Discovered 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0131993s, 26380 KB] 574 edges
[t=0.0132075s, 26380 KB] Landmark graph generation time: 0.00979143s
[t=0.0132161s, 26380 KB] Landmark graph contains 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.013224s, 26380 KB] Landmark graph contains 574 orderings.
[t=0.0134973s, 26380 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0143041s, 26380 KB] time to simplify: 0.000862482s
[t=0.0144091s, 26380 KB] Initializing additive heuristic...
[t=0.0144319s, 26380 KB] Initializing FF heuristic...
[t=0.0144783s, 26380 KB] Building successor generator...done!
[t=0.0146433s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0146519s, 26380 KB] time for successor generation creation: 0.000131013s
[t=0.0146699s, 26380 KB] Variables: 43
[t=0.0146782s, 26380 KB] FactPairs: 506
[t=0.0146859s, 26380 KB] Bytes per state: 16
[t=0.0147859s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0148173s, 26380 KB] 43 initial landmarks, 21 goal landmarks
[t=0.0148635s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0148725s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0148806s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.014893s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0149012s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0150054s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0150143s, 26380 KB] g=2, 5 evaluated, 4 expanded
[t=0.0150666s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0150749s, 26380 KB] g=3, 7 evaluated, 6 expanded
[t=0.015106s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0151144s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0151222s, 26380 KB] g=4, 8 evaluated, 7 expanded
[t=0.0151969s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0152054s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.015213s, 26380 KB] g=6, 11 evaluated, 10 expanded
[t=0.0153065s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0153155s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0153233s, 26380 KB] g=8, 15 evaluated, 14 expanded
[t=0.0153537s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0153619s, 26380 KB] g=9, 16 evaluated, 15 expanded
[t=0.0156469s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0156563s, 26380 KB] g=13, 29 evaluated, 28 expanded
[t=0.0158814s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0158906s, 26380 KB] g=16, 39 evaluated, 38 expanded
[t=0.0160016s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0160142s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0160223s, 26380 KB] g=18, 44 evaluated, 43 expanded
[t=0.0161964s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0162062s, 26380 KB] g=21, 52 evaluated, 51 expanded
[t=0.0162999s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0163098s, 26380 KB] g=23, 56 evaluated, 55 expanded
[t=0.0165303s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0165424s, 26380 KB] g=25, 66 evaluated, 65 expanded
[t=0.0165749s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0165834s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0165911s, 26380 KB] g=26, 67 evaluated, 66 expanded
[t=0.0166224s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0166485s, 26380 KB] g=27, 68 evaluated, 67 expanded
[t=0.0166808s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0166898s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0166987s, 26380 KB] g=28, 69 evaluated, 68 expanded
[t=0.0168922s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.016902s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0169096s, 26380 KB] g=30, 77 evaluated, 76 expanded
[t=0.0170434s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0170523s, 26380 KB] g=32, 83 evaluated, 82 expanded
[t=0.0172129s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0172219s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0172295s, 26380 KB] g=34, 90 evaluated, 89 expanded
[t=0.017368s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0173777s, 26380 KB] g=35, 96 evaluated, 95 expanded
[t=0.0174086s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0174169s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0174248s, 26380 KB] g=36, 97 evaluated, 96 expanded
[t=0.0176105s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0176201s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0176286s, 26380 KB] g=38, 105 evaluated, 104 expanded
[t=0.0176613s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0176696s, 26380 KB] g=39, 106 evaluated, 105 expanded
[t=0.0177015s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0177098s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0177175s, 26380 KB] g=40, 107 evaluated, 106 expanded
[t=0.0178551s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0178642s, 26380 KB] g=41, 113 evaluated, 112 expanded
[t=0.0178951s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0179038s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0179145s, 26380 KB] g=42, 114 evaluated, 113 expanded
[t=0.0180962s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.018106s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0181138s, 26380 KB] g=44, 122 evaluated, 121 expanded
[t=0.0182868s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0182959s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0183038s, 26380 KB] g=46, 129 evaluated, 128 expanded
[t=0.0188359s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0188505s, 26380 KB] g=50, 152 evaluated, 151 expanded
[t=0.0189667s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0189757s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0189838s, 26380 KB] g=52, 157 evaluated, 156 expanded
[t=0.0192961s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0193114s, 26380 KB] g=56, 171 evaluated, 170 expanded
[t=0.0194262s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0194495s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.019458s, 26380 KB] g=58, 175 evaluated, 174 expanded
[t=0.0201195s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0201307s, 26380 KB] g=69, 205 evaluated, 204 expanded
[t=0.0201837s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0201922s, 26380 KB] g=70, 207 evaluated, 206 expanded
[t=0.0202864s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0202945s, 26380 KB] g=71, 211 evaluated, 210 expanded
[t=0.020325s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0203336s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0203416s, 26380 KB] g=72, 212 evaluated, 211 expanded
[t=0.0204562s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0204645s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0204721s, 26380 KB] g=74, 217 evaluated, 216 expanded
[t=0.0205659s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0205742s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0205818s, 26380 KB] g=76, 221 evaluated, 220 expanded
[t=0.0207798s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0207882s, 26380 KB] g=80, 230 evaluated, 229 expanded
[t=0.0208607s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.020869s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0208767s, 26380 KB] g=82, 233 evaluated, 232 expanded
[t=0.0219531s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0219644s, 26380 KB] g=100, 287 evaluated, 286 expanded
[t=0.0220305s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0220394s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0220499s, 26380 KB] g=102, 290 evaluated, 289 expanded
[t=0.0222411s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0222498s, 26380 KB] g=110, 302 evaluated, 301 expanded
[t=0.022267s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0222752s, 26380 KB] g=111, 303 evaluated, 302 expanded
[t=0.0222895s, 26380 KB] Solution found!
[t=0.0222994s, 26380 KB] Actual search time: 0.00747938s
unstack b13 b4 (1)
put-down b13 (1)
unstack b4 b19 (1)
stack b4 b13 (1)
unstack b19 b20 (1)
stack b19 b15 (1)
unstack b20 b16 (1)
stack b20 b7 (1)
unstack b16 b17 (1)
put-down b16 (1)
unstack b20 b7 (1)
put-down b20 (1)
unstack b7 b9 (1)
put-down b7 (1)
pick-up b16 (1)
stack b16 b9 (1)
pick-up b20 (1)
stack b20 b7 (1)
unstack b16 b9 (1)
put-down b16 (1)
unstack b9 b2 (1)
put-down b9 (1)
unstack b2 b8 (1)
put-down b2 (1)
unstack b8 b10 (1)
stack b8 b19 (1)
unstack b10 b18 (1)
put-down b10 (1)
pick-up b16 (1)
stack b16 b9 (1)
unstack b18 b6 (1)
put-down b18 (1)
unstack b6 b5 (1)
stack b6 b20 (1)
unstack b5 b12 (1)
put-down b5 (1)
unstack b12 b1 (1)
stack b12 b6 (1)
unstack b1 b3 (1)
stack b1 b5 (1)
unstack b3 b14 (1)
put-down b3 (1)
pick-up b17 (1)
stack b17 b3 (1)
pick-up b18 (1)
stack b18 b14 (1)
unstack b16 b9 (1)
put-down b16 (1)
pick-up b9 (1)
stack b9 b18 (1)
pick-up b16 (1)
stack b16 b9 (1)
unstack b4 b13 (1)
put-down b4 (1)
pick-up b13 (1)
stack b13 b12 (1)
pick-up b4 (1)
stack b4 b13 (1)
unstack b16 b9 (1)
put-down b16 (1)
unstack b9 b18 (1)
put-down b9 (1)
pick-up b16 (1)
stack b16 b9 (1)
unstack b18 b14 (1)
put-down b18 (1)
unstack b14 b21 (1)
put-down b14 (1)
unstack b21 b11 (1)
put-down b21 (1)
pick-up b2 (1)
stack b2 b11 (1)
pick-up b14 (1)
stack b14 b21 (1)
pick-up b18 (1)
stack b18 b14 (1)
unstack b16 b9 (1)
put-down b16 (1)
pick-up b9 (1)
stack b9 b18 (1)
pick-up b16 (1)
stack b16 b9 (1)
unstack b4 b13 (1)
put-down b4 (1)
unstack b13 b12 (1)
put-down b13 (1)
unstack b12 b6 (1)
put-down b12 (1)
pick-up b13 (1)
stack b13 b12 (1)
pick-up b4 (1)
stack b4 b13 (1)
unstack b6 b20 (1)
put-down b6 (1)
unstack b20 b7 (1)
put-down b20 (1)
pick-up b7 (1)
stack b7 b10 (1)
pick-up b20 (1)
stack b20 b7 (1)
pick-up b6 (1)
stack b6 b20 (1)
unstack b4 b13 (1)
put-down b4 (1)
unstack b13 b12 (1)
put-down b13 (1)
pick-up b12 (1)
stack b12 b6 (1)
pick-up b13 (1)
stack b13 b12 (1)
pick-up b4 (1)
stack b4 b13 (1)
[t=0.0223084s, 26380 KB] Plan length: 112 step(s).
[t=0.0223084s, 26380 KB] Plan cost: 112
[t=0.0223084s, 26380 KB] Expanded 303 state(s).
[t=0.0223084s, 26380 KB] Reopened 0 state(s).
[t=0.0223084s, 26380 KB] Evaluated 304 state(s).
[t=0.0223084s, 26380 KB] Evaluations: 608
[t=0.0223084s, 26380 KB] Generated 2669 state(s).
[t=0.0223084s, 26380 KB] Dead ends: 0 state(s).
[t=0.0223084s, 26380 KB] Number of registered states: 304
[t=0.0223084s, 26380 KB] Int hash set load factor: 304/512 = 0.59375
[t=0.0223084s, 26380 KB] Int hash set resizes: 9
[t=0.0223084s, 26380 KB] Search time: 0.00752277s
[t=0.0223084s, 26380 KB] Total time: 0.0223084s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.12s
