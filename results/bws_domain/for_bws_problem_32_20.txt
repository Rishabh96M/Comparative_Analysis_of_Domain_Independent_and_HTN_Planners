INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_32/bws_problem_32_20.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.020s wall-clock]
3298 relevant atoms
2208 auxiliary atoms
5506 final queue length
9675 total queue pushes
Completing instantiation... [0.040s CPU, 0.041s wall-clock]
Instantiating: [0.060s CPU, 0.063s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
33 uncovered facts
Choosing groups: [0.000s CPU, 0.003s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.013s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.054s wall-clock]
3040 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
64 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.032s wall-clock]
Reordering and filtering variables...
65 of 65 variables necessary.
33 of 65 mutex groups necessary.
2048 of 2048 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.014s wall-clock]
Translator variables: 65
Translator derived variables: 0
Translator facts: 1122
Translator goal facts: 30
Translator mutex groups: 33
Translator total mutex groups size: 1089
Translator operators: 2048
Translator axioms: 0
Translator task size: 17570
Translator peak memory: 42624 KB
Writing output... [0.020s CPU, 0.012s wall-clock]
Done! [0.200s CPU, 0.194s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.195e-05s, 24488 KB] reading input...
[t=0.00699252s, 26784 KB] done reading input!
[t=0.00798352s, 27180 KB] Initializing landmark count heuristic...
[t=0.0080305s, 27180 KB] Generating landmark graph...
[t=0.00814613s, 27312 KB] Building a landmark graph with reasonable orders.
[t=0.00824918s, 27312 KB] Initializing Exploration...
[t=0.00879234s, 27768 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0413583s, 28696 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0415183s, 28696 KB] Landmarks generation time: 0.0333838s
[t=0.0415451s, 28696 KB] Discovered 147 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0415691s, 28696 KB] 534 edges
[t=0.0415795s, 28696 KB] approx. reasonable orders
[t=0.052787s, 28696 KB] approx. obedient reasonable orders
[t=0.0536085s, 28696 KB] Removed 17 reasonable or obedient reasonable orders
[t=0.0536251s, 28696 KB] Landmarks generation time: 0.0455926s
[t=0.0536377s, 28696 KB] Discovered 147 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0536467s, 28696 KB] 692 edges
[t=0.0536554s, 28696 KB] Landmark graph generation time: 0.0456319s
[t=0.053664s, 28696 KB] Landmark graph contains 147 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0536722s, 28696 KB] Landmark graph contains 692 orderings.
[t=0.0543837s, 28728 KB] Simplifying 8128 unary operators... done! [6144 unary operators]
[t=0.056655s, 28860 KB] time to simplify: 0.00229931s
[t=0.0568035s, 28860 KB] Initializing additive heuristic...
[t=0.0568248s, 28860 KB] Initializing FF heuristic...
[t=0.0569216s, 28860 KB] Building successor generator...done!
[t=0.0573281s, 28860 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0573385s, 28860 KB] time for successor generation creation: 0.000377967s
[t=0.0573558s, 28860 KB] Variables: 65
[t=0.0573641s, 28860 KB] FactPairs: 1122
[t=0.0573721s, 28860 KB] Bytes per state: 32
[t=0.0575034s, 28860 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0575492s, 28860 KB] 64 initial landmarks, 30 goal landmarks
[t=0.057655s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 83
[t=0.057665s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 61
[t=0.0576746s, 28860 KB] g=0, 1 evaluated, 0 expanded
[t=0.0576935s, 28860 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 83
[t=0.0577027s, 28860 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 61
[t=0.0580675s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 82
[t=0.0580785s, 28860 KB] g=1, 8 evaluated, 7 expanded
[t=0.0589684s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 81
[t=0.0589806s, 28860 KB] g=4, 26 evaluated, 25 expanded
[t=0.0593595s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 60
[t=0.059369s, 28860 KB] g=2, 34 evaluated, 33 expanded
[t=0.0597013s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 80
[t=0.0597106s, 28860 KB] g=6, 41 evaluated, 40 expanded
[t=0.0607458s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 79
[t=0.0607563s, 28860 KB] g=8, 63 evaluated, 62 expanded
[t=0.0620678s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 78
[t=0.0621049s, 28860 KB] g=10, 89 evaluated, 88 expanded
[t=0.0635788s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 77
[t=0.0635958s, 28860 KB] g=12, 119 evaluated, 118 expanded
[t=0.0649842s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 76
[t=0.0650203s, 28860 KB] g=14, 147 evaluated, 146 expanded
[t=0.0658508s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 59
[t=0.0658732s, 28860 KB] g=6, 164 evaluated, 163 expanded
[t=0.0665248s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 75
[t=0.0665457s, 28860 KB] g=16, 177 evaluated, 176 expanded
[t=0.0668576s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 58
[t=0.0668898s, 28860 KB] g=8, 183 evaluated, 182 expanded
[t=0.0679064s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 57
[t=0.067926s, 28860 KB] g=10, 204 evaluated, 203 expanded
[t=0.0681718s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0681847s, 28860 KB] g=18, 209 evaluated, 208 expanded
[t=0.0688894s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 56
[t=0.0689157s, 28860 KB] g=12, 223 evaluated, 222 expanded
[t=0.0697662s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 55
[t=0.0697815s, 28860 KB] g=14, 240 evaluated, 239 expanded
[t=0.0699378s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.069949s, 28860 KB] g=20, 243 evaluated, 242 expanded
[t=0.071705s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0717232s, 28860 KB] g=22, 279 evaluated, 278 expanded
[t=0.0726409s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.072663s, 28860 KB] g=18, 296 evaluated, 295 expanded
[t=0.0737028s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0737135s, 28860 KB] g=24, 317 evaluated, 316 expanded
[t=0.0755786s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0755905s, 28860 KB] g=26, 357 evaluated, 356 expanded
[t=0.0767251s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0767353s, 28860 KB] g=26, 381 evaluated, 380 expanded
[t=0.0776887s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0777025s, 28860 KB] g=28, 401 evaluated, 400 expanded
[t=0.0778587s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.077868s, 28860 KB] g=28, 404 evaluated, 403 expanded
[t=0.0788373s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0788479s, 28860 KB] g=30, 425 evaluated, 424 expanded
[t=0.0795375s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0795482s, 28860 KB] g=29, 440 evaluated, 439 expanded
[t=0.0816492s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0816622s, 28860 KB] g=32, 483 evaluated, 482 expanded
[t=0.0839494s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0839641s, 28860 KB] g=34, 531 evaluated, 530 expanded
[t=0.0863967s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.086419s, 28860 KB] g=36, 582 evaluated, 581 expanded
[t=0.0872314s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0872411s, 28860 KB] g=36, 600 evaluated, 599 expanded
[t=0.0890717s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0890867s, 28860 KB] g=38, 639 evaluated, 638 expanded
[t=0.0891533s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0891631s, 28860 KB] g=40, 640 evaluated, 639 expanded
[t=0.0937207s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0937529s, 28860 KB] g=40, 737 evaluated, 736 expanded
[t=0.0959012s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0959282s, 28860 KB] g=42, 782 evaluated, 781 expanded
[t=0.0960562s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0960762s, 28860 KB] g=44, 784 evaluated, 783 expanded
[t=0.0971469s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0971625s, 28860 KB] g=46, 806 evaluated, 805 expanded
[t=0.101616s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.1017s, 28860 KB] g=44, 901 evaluated, 900 expanded
[t=0.104084s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.104116s, 28860 KB] g=52, 951 evaluated, 950 expanded
[t=0.105044s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.105056s, 28860 KB] g=46, 971 evaluated, 970 expanded
[t=0.106871s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.106915s, 28860 KB] g=58, 1006 evaluated, 1005 expanded
[t=0.107643s, 28860 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.107654s, 28860 KB] g=48, 1021 evaluated, 1020 expanded
[t=0.112057s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.112072s, 28860 KB] g=64, 1119 evaluated, 1118 expanded
[t=0.112887s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.112897s, 28860 KB] g=66, 1137 evaluated, 1136 expanded
[t=0.117357s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.117374s, 28860 KB] g=70, 1238 evaluated, 1237 expanded
[t=0.118161s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.118173s, 28860 KB] g=72, 1255 evaluated, 1254 expanded
[t=0.138079s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.138257s, 28860 KB] g=84, 1686 evaluated, 1685 expanded
[t=0.139307s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.139319s, 28860 KB] g=86, 1708 evaluated, 1707 expanded
[t=0.140186s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.140197s, 28860 KB] g=88, 1728 evaluated, 1727 expanded
[t=0.141065s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.14108s, 28860 KB] g=90, 1747 evaluated, 1746 expanded
[t=0.141888s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.141916s, 28860 KB] g=92, 1764 evaluated, 1763 expanded
[t=0.14339s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.143408s, 28860 KB] g=94, 1796 evaluated, 1795 expanded
[t=0.14412s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.144138s, 28860 KB] g=96, 1811 evaluated, 1810 expanded
[t=0.149653s, 28860 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.149689s, 28860 KB] g=102, 1931 evaluated, 1930 expanded
[t=0.152826s, 28992 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.15287s, 28992 KB] g=106, 1995 evaluated, 1994 expanded
[t=0.153304s, 28992 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.153316s, 28992 KB] g=108, 2004 evaluated, 2003 expanded
[t=0.169292s, 29124 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.169401s, 29124 KB] g=120, 2362 evaluated, 2361 expanded
[t=0.172002s, 29124 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.172065s, 29124 KB] g=124, 2418 evaluated, 2417 expanded
[t=0.172518s, 29124 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.172532s, 29124 KB] g=126, 2428 evaluated, 2427 expanded
[t=0.229375s, 29784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.229479s, 29784 KB] g=156, 3803 evaluated, 3802 expanded
[t=0.230625s, 29784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.230643s, 29784 KB] g=160, 3832 evaluated, 3831 expanded
[t=0.230821s, 29784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.230833s, 29784 KB] g=162, 3837 evaluated, 3836 expanded
[t=0.231459s, 29784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.231473s, 29784 KB] g=166, 3855 evaluated, 3854 expanded
[t=0.231664s, 29784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.231675s, 29784 KB] g=168, 3860 evaluated, 3859 expanded
[t=0.23321s, 29784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.233226s, 29784 KB] g=180, 3908 evaluated, 3907 expanded
[t=0.234112s, 29784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.234129s, 29784 KB] g=184, 3930 evaluated, 3929 expanded
[t=0.234355s, 29784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.234368s, 29784 KB] g=186, 3936 evaluated, 3935 expanded
[t=0.243177s, 29928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.243218s, 29928 KB] g=216, 4164 evaluated, 4163 expanded
[t=0.243972s, 29928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.243985s, 29928 KB] g=220, 4185 evaluated, 4184 expanded
[t=0.244191s, 29928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.244202s, 29928 KB] g=222, 4191 evaluated, 4190 expanded
[t=0.245505s, 29928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.245517s, 29928 KB] g=234, 4228 evaluated, 4227 expanded
[t=0.245899s, 29928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.245913s, 29928 KB] g=238, 4238 evaluated, 4237 expanded
[t=0.245934s, 29928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.245943s, 29928 KB] g=239, 4239 evaluated, 4238 expanded
[t=0.246005s, 29928 KB] Solution found!
[t=0.246028s, 29928 KB] Actual search time: 0.188474s
pick-up b5 (1)
stack b5 b19 (1)
unstack b1 b24 (1)
put-down b1 (1)
unstack b24 b9 (1)
stack b24 b7 (1)
unstack b16 b28 (1)
stack b16 b9 (1)
unstack b2 b26 (1)
stack b2 b28 (1)
pick-up b1 (1)
stack b1 b26 (1)
unstack b30 b25 (1)
stack b30 b24 (1)
unstack b25 b12 (1)
put-down b25 (1)
pick-up b12 (1)
stack b12 b30 (1)
unstack b31 b14 (1)
put-down b31 (1)
unstack b14 b13 (1)
put-down b14 (1)
unstack b13 b32 (1)
put-down b13 (1)
unstack b32 b3 (1)
put-down b32 (1)
pick-up b11 (1)
stack b11 b3 (1)
pick-up b14 (1)
stack b14 b32 (1)
unstack b1 b26 (1)
put-down b1 (1)
unstack b26 b10 (1)
stack b26 b25 (1)
pick-up b1 (1)
stack b1 b26 (1)
unstack b10 b15 (1)
put-down b10 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b16 b9 (1)
put-down b16 (1)
pick-up b9 (1)
stack b9 b14 (1)
pick-up b16 (1)
stack b16 b9 (1)
unstack b2 b28 (1)
put-down b2 (1)
unstack b28 b17 (1)
stack b28 b13 (1)
pick-up b2 (1)
stack b2 b28 (1)
unstack b17 b20 (1)
put-down b17 (1)
unstack b20 b23 (1)
put-down b20 (1)
pick-up b23 (1)
stack b23 b1 (1)
unstack b11 b3 (1)
put-down b11 (1)
unstack b3 b18 (1)
stack b3 b23 (1)
pick-up b10 (1)
stack b10 b18 (1)
pick-up b11 (1)
stack b11 b3 (1)
unstack b10 b18 (1)
put-down b10 (1)
pick-up b18 (1)
stack b18 b16 (1)
pick-up b10 (1)
stack b10 b18 (1)
unstack b15 b5 (1)
put-down b15 (1)
unstack b5 b19 (1)
put-down b5 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b19 b29 (1)
put-down b19 (1)
unstack b29 b27 (1)
stack b29 b11 (1)
unstack b27 b22 (1)
stack b27 b2 (1)
unstack b22 b4 (1)
stack b22 b17 (1)
pick-up b31 (1)
stack b31 b29 (1)
unstack b4 b21 (1)
stack b4 b20 (1)
unstack b21 b6 (1)
stack b21 b12 (1)
pick-up b19 (1)
stack b19 b21 (1)
pick-up b6 (1)
stack b6 b10 (1)
unstack b15 b5 (1)
put-down b15 (1)
pick-up b5 (1)
stack b5 b19 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b22 b17 (1)
put-down b22 (1)
pick-up b17 (1)
stack b17 b6 (1)
pick-up b22 (1)
stack b22 b17 (1)
unstack b27 b2 (1)
put-down b27 (1)
unstack b2 b28 (1)
put-down b2 (1)
pick-up b27 (1)
stack b27 b2 (1)
unstack b28 b13 (1)
put-down b28 (1)
pick-up b13 (1)
stack b13 b22 (1)
pick-up b28 (1)
stack b28 b13 (1)
unstack b27 b2 (1)
put-down b27 (1)
pick-up b2 (1)
stack b2 b28 (1)
pick-up b27 (1)
stack b27 b2 (1)
unstack b15 b5 (1)
put-down b15 (1)
unstack b5 b19 (1)
put-down b5 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b19 b21 (1)
put-down b19 (1)
unstack b21 b12 (1)
put-down b21 (1)
pick-up b19 (1)
stack b19 b21 (1)
unstack b15 b5 (1)
put-down b15 (1)
pick-up b5 (1)
stack b5 b19 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b12 b30 (1)
put-down b12 (1)
unstack b30 b24 (1)
put-down b30 (1)
pick-up b12 (1)
stack b12 b30 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b8 (1)
stack b7 b27 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b12 b30 (1)
put-down b12 (1)
pick-up b30 (1)
stack b30 b24 (1)
pick-up b12 (1)
stack b12 b30 (1)
unstack b4 b20 (1)
put-down b4 (1)
pick-up b20 (1)
stack b20 b8 (1)
pick-up b4 (1)
stack b4 b20 (1)
unstack b15 b5 (1)
put-down b15 (1)
unstack b5 b19 (1)
put-down b5 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b19 b21 (1)
put-down b19 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b19 (1)
stack b19 b21 (1)
unstack b15 b5 (1)
put-down b15 (1)
pick-up b5 (1)
stack b5 b19 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b31 b29 (1)
put-down b31 (1)
unstack b29 b11 (1)
put-down b29 (1)
pick-up b31 (1)
stack b31 b29 (1)
unstack b11 b3 (1)
put-down b11 (1)
unstack b3 b23 (1)
put-down b3 (1)
pick-up b11 (1)
stack b11 b3 (1)
unstack b31 b29 (1)
put-down b31 (1)
pick-up b29 (1)
stack b29 b11 (1)
pick-up b31 (1)
stack b31 b29 (1)
unstack b23 b1 (1)
put-down b23 (1)
unstack b1 b26 (1)
put-down b1 (1)
pick-up b23 (1)
stack b23 b1 (1)
unstack b26 b25 (1)
put-down b26 (1)
pick-up b25 (1)
stack b25 b15 (1)
pick-up b26 (1)
stack b26 b25 (1)
unstack b23 b1 (1)
put-down b23 (1)
pick-up b1 (1)
stack b1 b26 (1)
pick-up b23 (1)
stack b23 b1 (1)
unstack b31 b29 (1)
put-down b31 (1)
unstack b29 b11 (1)
put-down b29 (1)
pick-up b31 (1)
stack b31 b29 (1)
unstack b11 b3 (1)
put-down b11 (1)
pick-up b3 (1)
stack b3 b23 (1)
pick-up b11 (1)
stack b11 b3 (1)
unstack b31 b29 (1)
put-down b31 (1)
pick-up b29 (1)
stack b29 b11 (1)
pick-up b31 (1)
stack b31 b29 (1)
[t=0.246038s, 29928 KB] Plan length: 240 step(s).
[t=0.246038s, 29928 KB] Plan cost: 240
[t=0.246038s, 29928 KB] Expanded 4240 state(s).
[t=0.246038s, 29928 KB] Reopened 0 state(s).
[t=0.246038s, 29928 KB] Evaluated 4241 state(s).
[t=0.246038s, 29928 KB] Evaluations: 8482
[t=0.246038s, 29928 KB] Generated 72652 state(s).
[t=0.246038s, 29928 KB] Dead ends: 0 state(s).
[t=0.246038s, 29928 KB] Number of registered states: 4241
[t=0.246038s, 29928 KB] Int hash set load factor: 4241/8192 = 0.5177
[t=0.246038s, 29928 KB] Int hash set resizes: 13
[t=0.246038s, 29928 KB] Search time: 0.188535s
[t=0.246038s, 29928 KB] Total time: 0.246038s
Solution found.
Peak memory: 29928 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.49s
