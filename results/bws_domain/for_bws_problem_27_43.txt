INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_27/bws_problem_27_43.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.017s wall-clock]
2378 relevant atoms
1593 auxiliary atoms
3971 final queue length
6947 total queue pushes
Completing instantiation... [0.030s CPU, 0.029s wall-clock]
Instantiating: [0.050s CPU, 0.048s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
28 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.041s wall-clock]
2160 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
54 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.019s wall-clock]
Reordering and filtering variables...
55 of 55 variables necessary.
28 of 55 mutex groups necessary.
1458 of 1458 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.009s wall-clock]
Translator variables: 55
Translator derived variables: 0
Translator facts: 812
Translator goal facts: 22
Translator mutex groups: 28
Translator total mutex groups size: 784
Translator operators: 1458
Translator axioms: 0
Translator task size: 12527
Translator peak memory: 39668 KB
Writing output... [0.010s CPU, 0.008s wall-clock]
Done! [0.140s CPU, 0.138s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=3.5593e-05s, 24488 KB] reading input...
[t=0.00481297s, 25936 KB] done reading input!
[t=0.00648009s, 26332 KB] Initializing landmark count heuristic...
[t=0.00663687s, 26332 KB] Generating landmark graph...
[t=0.00677293s, 26332 KB] Building a landmark graph with reasonable orders.
[t=0.00686605s, 26464 KB] Initializing Exploration...
[t=0.00735787s, 26732 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.026856s, 27660 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0269962s, 27660 KB] Landmarks generation time: 0.0202291s
[t=0.0270176s, 27660 KB] Discovered 118 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0270381s, 27660 KB] 811 edges
[t=0.0270479s, 27660 KB] approx. reasonable orders
[t=0.0325676s, 27660 KB] approx. obedient reasonable orders
[t=0.0333295s, 27660 KB] Removed 1 reasonable or obedient reasonable orders
[t=0.0333543s, 27660 KB] Landmarks generation time: 0.0267071s
[t=0.0333655s, 27660 KB] Discovered 118 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0333746s, 27660 KB] 910 edges
[t=0.033383s, 27660 KB] Landmark graph generation time: 0.0267539s
[t=0.0333916s, 27660 KB] Landmark graph contains 118 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0333996s, 27660 KB] Landmark graph contains 910 orderings.
[t=0.0339403s, 27660 KB] Simplifying 5778 unary operators... done! [4374 unary operators]
[t=0.0352812s, 27660 KB] time to simplify: 0.00143423s
[t=0.0354618s, 27660 KB] Initializing additive heuristic...
[t=0.0354782s, 27660 KB] Initializing FF heuristic...
[t=0.0355303s, 27660 KB] Building successor generator...done!
[t=0.0358089s, 27660 KB] peak memory difference for successor generator creation: 0 KB
[t=0.035818s, 27660 KB] time for successor generation creation: 0.000243193s
[t=0.0358308s, 27660 KB] Variables: 55
[t=0.0358388s, 27660 KB] FactPairs: 812
[t=0.0358465s, 27660 KB] Bytes per state: 24
[t=0.035937s, 27660 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0359694s, 27660 KB] 53 initial landmarks, 22 goal landmarks
[t=0.0360338s, 27660 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0360431s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0360512s, 27660 KB] g=0, 1 evaluated, 0 expanded
[t=0.0360646s, 27660 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.036073s, 27660 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0363382s, 27660 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0363478s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0363553s, 27660 KB] g=2, 8 evaluated, 7 expanded
[t=0.0365571s, 27660 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0365657s, 27660 KB] g=4, 14 evaluated, 13 expanded
[t=0.0371399s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.03715s, 27660 KB] g=6, 31 evaluated, 30 expanded
[t=0.037258s, 27660 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0372665s, 27660 KB] g=6, 34 evaluated, 33 expanded
[t=0.0376438s, 27660 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0376594s, 27660 KB] g=8, 45 evaluated, 44 expanded
[t=0.0381469s, 27660 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0381564s, 27660 KB] g=10, 60 evaluated, 59 expanded
[t=0.0386367s, 27660 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0386459s, 27660 KB] g=12, 74 evaluated, 73 expanded
[t=0.0399375s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.039955s, 27660 KB] g=12, 112 evaluated, 111 expanded
[t=0.041587s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0416034s, 27660 KB] g=18, 160 evaluated, 159 expanded
[t=0.042032s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0420421s, 27660 KB] g=20, 173 evaluated, 172 expanded
[t=0.0427336s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0427506s, 27660 KB] g=22, 192 evaluated, 191 expanded
[t=0.0432665s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0432822s, 27660 KB] g=24, 206 evaluated, 205 expanded
[t=0.0441128s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0441393s, 27660 KB] g=28, 229 evaluated, 228 expanded
[t=0.0445569s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0445772s, 27660 KB] g=30, 240 evaluated, 239 expanded
[t=0.0450534s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0450659s, 27660 KB] g=32, 252 evaluated, 251 expanded
[t=0.0455331s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0455463s, 27660 KB] g=34, 264 evaluated, 263 expanded
[t=0.0461311s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0461457s, 27660 KB] g=36, 280 evaluated, 279 expanded
[t=0.0468001s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0468181s, 27660 KB] g=38, 297 evaluated, 296 expanded
[t=0.0471519s, 27660 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0471735s, 27660 KB] g=18, 306 evaluated, 305 expanded
[t=0.0474518s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0474627s, 27660 KB] g=40, 314 evaluated, 313 expanded
[t=0.0480881s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0481131s, 27660 KB] g=42, 332 evaluated, 331 expanded
[t=0.0486287s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0486507s, 27660 KB] g=44, 344 evaluated, 343 expanded
[t=0.0503394s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0503622s, 27660 KB] g=46, 392 evaluated, 391 expanded
[t=0.051224s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0512486s, 27660 KB] g=48, 413 evaluated, 412 expanded
[t=0.051727s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0517518s, 27660 KB] g=50, 426 evaluated, 425 expanded
[t=0.0521194s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0521332s, 27660 KB] g=52, 436 evaluated, 435 expanded
[t=0.0557172s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0557381s, 27660 KB] g=58, 544 evaluated, 543 expanded
[t=0.0578465s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0578668s, 27660 KB] g=62, 607 evaluated, 606 expanded
[t=0.0582478s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0582581s, 27660 KB] g=64, 618 evaluated, 617 expanded
[t=0.0594792s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0595124s, 27660 KB] g=70, 653 evaluated, 652 expanded
[t=0.0624388s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0624592s, 27660 KB] g=78, 740 evaluated, 739 expanded
[t=0.0626669s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0626762s, 27660 KB] g=80, 746 evaluated, 745 expanded
[t=0.0703672s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0703943s, 27660 KB] g=96, 982 evaluated, 981 expanded
[t=0.0723157s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0723387s, 27660 KB] g=104, 1037 evaluated, 1036 expanded
[t=0.0730435s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0730696s, 27660 KB] g=108, 1058 evaluated, 1057 expanded
[t=0.0732362s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0732483s, 27660 KB] g=110, 1063 evaluated, 1062 expanded
[t=0.0770122s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0770574s, 27660 KB] g=132, 1190 evaluated, 1189 expanded
[t=0.0772117s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0772417s, 27660 KB] g=134, 1195 evaluated, 1194 expanded
[t=0.0779027s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0779267s, 27660 KB] g=142, 1217 evaluated, 1216 expanded
[t=0.0780606s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0780711s, 27660 KB] g=142, 1221 evaluated, 1220 expanded
[t=0.0781273s, 27660 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0781374s, 27660 KB] g=143, 1223 evaluated, 1222 expanded
[t=0.0781558s, 27660 KB] Solution found!
[t=0.078169s, 27660 KB] Actual search time: 0.0421976s
unstack b1 b9 (1)
put-down b1 (1)
unstack b11 b17 (1)
put-down b11 (1)
unstack b22 b27 (1)
put-down b22 (1)
unstack b27 b14 (1)
put-down b27 (1)
unstack b4 b24 (1)
put-down b4 (1)
unstack b24 b10 (1)
put-down b24 (1)
pick-up b17 (1)
stack b17 b9 (1)
unstack b10 b19 (1)
stack b10 b14 (1)
unstack b19 b18 (1)
stack b19 b22 (1)
unstack b18 b5 (1)
put-down b18 (1)
pick-up b11 (1)
stack b11 b18 (1)
pick-up b27 (1)
stack b27 b24 (1)
unstack b5 b26 (1)
put-down b5 (1)
unstack b26 b25 (1)
stack b26 b11 (1)
unstack b25 b2 (1)
stack b25 b4 (1)
unstack b2 b20 (1)
stack b2 b23 (1)
unstack b20 b21 (1)
stack b20 b7 (1)
unstack b21 b6 (1)
stack b21 b20 (1)
unstack b6 b16 (1)
stack b6 b27 (1)
unstack b16 b8 (1)
put-down b16 (1)
unstack b8 b13 (1)
stack b8 b17 (1)
unstack b13 b12 (1)
put-down b13 (1)
unstack b12 b15 (1)
stack b12 b16 (1)
unstack b15 b3 (1)
stack b15 b21 (1)
pick-up b13 (1)
stack b13 b3 (1)
pick-up b5 (1)
stack b5 b13 (1)
unstack b10 b14 (1)
put-down b10 (1)
pick-up b14 (1)
stack b14 b8 (1)
pick-up b10 (1)
stack b10 b14 (1)
unstack b19 b22 (1)
put-down b19 (1)
pick-up b22 (1)
stack b22 b26 (1)
pick-up b19 (1)
stack b19 b22 (1)
unstack b25 b4 (1)
put-down b25 (1)
pick-up b4 (1)
stack b4 b15 (1)
pick-up b25 (1)
stack b25 b4 (1)
unstack b6 b27 (1)
put-down b6 (1)
unstack b27 b24 (1)
put-down b27 (1)
pick-up b24 (1)
stack b24 b12 (1)
pick-up b27 (1)
stack b27 b24 (1)
pick-up b6 (1)
stack b6 b27 (1)
unstack b10 b14 (1)
put-down b10 (1)
unstack b14 b8 (1)
put-down b14 (1)
unstack b8 b17 (1)
put-down b8 (1)
pick-up b14 (1)
stack b14 b8 (1)
pick-up b10 (1)
stack b10 b14 (1)
unstack b17 b9 (1)
put-down b17 (1)
pick-up b9 (1)
stack b9 b5 (1)
pick-up b17 (1)
stack b17 b9 (1)
unstack b10 b14 (1)
put-down b10 (1)
unstack b14 b8 (1)
put-down b14 (1)
pick-up b10 (1)
stack b10 b14 (1)
pick-up b8 (1)
stack b8 b17 (1)
unstack b10 b14 (1)
put-down b10 (1)
pick-up b14 (1)
stack b14 b8 (1)
pick-up b10 (1)
stack b10 b14 (1)
unstack b25 b4 (1)
put-down b25 (1)
unstack b4 b15 (1)
put-down b4 (1)
unstack b15 b21 (1)
put-down b15 (1)
pick-up b4 (1)
stack b4 b15 (1)
pick-up b25 (1)
stack b25 b4 (1)
unstack b21 b20 (1)
put-down b21 (1)
unstack b20 b7 (1)
put-down b20 (1)
pick-up b21 (1)
stack b21 b20 (1)
pick-up b7 (1)
stack b7 b2 (1)
unstack b21 b20 (1)
put-down b21 (1)
pick-up b20 (1)
stack b20 b7 (1)
pick-up b21 (1)
stack b21 b20 (1)
unstack b25 b4 (1)
put-down b25 (1)
unstack b4 b15 (1)
put-down b4 (1)
pick-up b15 (1)
stack b15 b21 (1)
pick-up b4 (1)
stack b4 b15 (1)
pick-up b25 (1)
stack b25 b4 (1)
[t=0.0781789s, 27660 KB] Plan length: 144 step(s).
[t=0.0781789s, 27660 KB] Plan cost: 144
[t=0.0781789s, 27660 KB] Expanded 1223 state(s).
[t=0.0781789s, 27660 KB] Reopened 0 state(s).
[t=0.0781789s, 27660 KB] Evaluated 1224 state(s).
[t=0.0781789s, 27660 KB] Evaluations: 2448
[t=0.0781789s, 27660 KB] Generated 14762 state(s).
[t=0.0781789s, 27660 KB] Dead ends: 0 state(s).
[t=0.0781789s, 27660 KB] Number of registered states: 1224
[t=0.0781789s, 27660 KB] Int hash set load factor: 1224/2048 = 0.597656
[t=0.0781789s, 27660 KB] Int hash set resizes: 11
[t=0.0781789s, 27660 KB] Search time: 0.0422423s
[t=0.0781789s, 27660 KB] Total time: 0.0781789s
Solution found.
Peak memory: 27660 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.26s
