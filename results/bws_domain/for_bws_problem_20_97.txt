INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_20/bws_problem_20_97.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.008s wall-clock]
1342 relevant atoms
900 auxiliary atoms
2242 final queue length
3887 total queue pushes
Completing instantiation... [0.010s CPU, 0.016s wall-clock]
Instantiating: [0.020s CPU, 0.025s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
21 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.022s wall-clock]
1180 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
40 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.010s wall-clock]
Reordering and filtering variables...
41 of 41 variables necessary.
21 of 41 mutex groups necessary.
800 of 800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.005s wall-clock]
Translator variables: 41
Translator derived variables: 0
Translator facts: 462
Translator goal facts: 17
Translator mutex groups: 21
Translator total mutex groups size: 441
Translator operators: 800
Translator axioms: 0
Translator task size: 6901
Translator peak memory: 35940 KB
Writing output... [0.010s CPU, 0.004s wall-clock]
Done! [0.080s CPU, 0.077s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.1204e-05s, 24488 KB] reading input...
[t=0.00228261s, 25180 KB] done reading input!
[t=0.00311053s, 25444 KB] Initializing landmark count heuristic...
[t=0.00314332s, 25444 KB] Generating landmark graph...
[t=0.00320117s, 25576 KB] Building a landmark graph with reasonable orders.
[t=0.0032562s, 25576 KB] Initializing Exploration...
[t=0.00349594s, 25744 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0109282s, 26140 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0110209s, 26140 KB] Landmarks generation time: 0.00782068s
[t=0.0110358s, 26140 KB] Discovered 79 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0110548s, 26140 KB] 244 edges
[t=0.0110656s, 26140 KB] approx. reasonable orders
[t=0.0114733s, 26140 KB] approx. obedient reasonable orders
[t=0.0114967s, 26140 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0115059s, 26140 KB] Landmarks generation time: 0.00836012s
[t=0.0115159s, 26140 KB] Discovered 79 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0115272s, 26140 KB] 254 edges
[t=0.0115361s, 26140 KB] Landmark graph generation time: 0.00839985s
[t=0.0115449s, 26140 KB] Landmark graph contains 79 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0115533s, 26140 KB] Landmark graph contains 254 orderings.
[t=0.0119137s, 26280 KB] Simplifying 3160 unary operators... done! [2400 unary operators]
[t=0.0126862s, 26280 KB] time to simplify: 0.000829999s
[t=0.0127953s, 26280 KB] Initializing additive heuristic...
[t=0.0128094s, 26280 KB] Initializing FF heuristic...
[t=0.0128682s, 26280 KB] Building successor generator...done!
[t=0.0130423s, 26280 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0130508s, 26280 KB] time for successor generation creation: 0.000141371s
[t=0.0130632s, 26280 KB] Variables: 41
[t=0.0130716s, 26280 KB] FactPairs: 462
[t=0.0130806s, 26280 KB] Bytes per state: 16
[t=0.0131799s, 26280 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0132141s, 26280 KB] 36 initial landmarks, 17 goal landmarks
[t=0.0132624s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0132723s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0132811s, 26280 KB] g=0, 1 evaluated, 0 expanded
[t=0.013295s, 26280 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0133037s, 26280 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0133375s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0133473s, 26280 KB] g=1, 2 evaluated, 1 expanded
[t=0.0134487s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0134583s, 26280 KB] g=3, 6 evaluated, 5 expanded
[t=0.0135763s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0135859s, 26280 KB] g=5, 11 evaluated, 10 expanded
[t=0.0138957s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0139087s, 26280 KB] g=2, 25 evaluated, 24 expanded
[t=0.0140071s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0140167s, 26280 KB] g=8, 29 evaluated, 28 expanded
[t=0.01426s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0142717s, 26280 KB] g=10, 40 evaluated, 39 expanded
[t=0.0145328s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0145427s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0145508s, 26280 KB] g=12, 52 evaluated, 51 expanded
[t=0.0147121s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0147215s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0147299s, 26280 KB] g=14, 59 evaluated, 58 expanded
[t=0.0149651s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0149884s, 26280 KB] g=16, 66 evaluated, 65 expanded
[t=0.0151084s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0151314s, 26280 KB] g=16, 69 evaluated, 68 expanded
[t=0.0153833s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0153989s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.015412s, 26280 KB] g=18, 79 evaluated, 78 expanded
[t=0.0156225s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0156388s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0156515s, 26280 KB] g=20, 85 evaluated, 84 expanded
[t=0.0157788s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0157897s, 26280 KB] g=22, 90 evaluated, 89 expanded
[t=0.015932s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0159418s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0159502s, 26280 KB] g=24, 96 evaluated, 95 expanded
[t=0.0160952s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0161063s, 26280 KB] g=26, 102 evaluated, 101 expanded
[t=0.0161622s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0161718s, 26280 KB] g=26, 104 evaluated, 103 expanded
[t=0.0163954s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0164045s, 26280 KB] g=28, 114 evaluated, 113 expanded
[t=0.016541s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0165506s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0165591s, 26280 KB] g=30, 120 evaluated, 119 expanded
[t=0.0168581s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0168689s, 26280 KB] g=34, 133 evaluated, 132 expanded
[t=0.0169855s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0169947s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0170027s, 26280 KB] g=36, 138 evaluated, 137 expanded
[t=0.0172467s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0172559s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0172643s, 26280 KB] g=40, 149 evaluated, 148 expanded
[t=0.0173808s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0173906s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0173993s, 26280 KB] g=42, 154 evaluated, 153 expanded
[t=0.0186635s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0186758s, 26280 KB] g=52, 213 evaluated, 212 expanded
[t=0.0187927s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0188021s, 26280 KB] g=53, 218 evaluated, 217 expanded
[t=0.0188398s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0188503s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0188588s, 26280 KB] g=54, 219 evaluated, 218 expanded
[t=0.0189746s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0189897s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.019002s, 26280 KB] g=56, 224 evaluated, 223 expanded
[t=0.0193455s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0193695s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0193787s, 26280 KB] g=62, 238 evaluated, 237 expanded
[t=0.022479s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0224999s, 26280 KB] g=68, 386 evaluated, 385 expanded
[t=0.0225915s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0226012s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0226094s, 26280 KB] g=70, 390 evaluated, 389 expanded
[t=0.0231614s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0231759s, 26280 KB] g=78, 417 evaluated, 416 expanded
[t=0.0233516s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0233612s, 26280 KB] g=82, 426 evaluated, 425 expanded
[t=0.0234239s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0234332s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0234417s, 26280 KB] g=84, 429 evaluated, 428 expanded
[t=0.0245086s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0245269s, 26280 KB] g=102, 492 evaluated, 491 expanded
[t=0.0245795s, 26280 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0245889s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0245978s, 26280 KB] g=104, 495 evaluated, 494 expanded
[t=0.0247574s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.02477s, 26280 KB] g=112, 507 evaluated, 506 expanded
[t=0.0247942s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0248097s, 26280 KB] g=112, 508 evaluated, 507 expanded
[t=0.0248401s, 26280 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.024857s, 26280 KB] g=113, 509 evaluated, 508 expanded
[t=0.024883s, 26280 KB] Solution found!
[t=0.024917s, 26280 KB] Actual search time: 0.0117045s
unstack b11 b5 (1)
put-down b11 (1)
unstack b13 b6 (1)
put-down b13 (1)
unstack b17 b2 (1)
put-down b17 (1)
pick-up b13 (1)
stack b13 b2 (1)
unstack b5 b12 (1)
put-down b5 (1)
unstack b6 b14 (1)
stack b6 b5 (1)
unstack b14 b4 (1)
stack b14 b7 (1)
unstack b4 b16 (1)
stack b4 b14 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b16 b20 (1)
stack b16 b6 (1)
unstack b8 b10 (1)
put-down b8 (1)
unstack b10 b19 (1)
stack b10 b16 (1)
unstack b19 b1 (1)
put-down b19 (1)
pick-up b17 (1)
stack b17 b1 (1)
pick-up b8 (1)
stack b8 b19 (1)
unstack b13 b2 (1)
put-down b13 (1)
pick-up b2 (1)
stack b2 b10 (1)
pick-up b13 (1)
stack b13 b2 (1)
unstack b17 b1 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b12 (1)
pick-up b17 (1)
stack b17 b1 (1)
unstack b11 b4 (1)
put-down b11 (1)
unstack b4 b14 (1)
put-down b4 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b14 b7 (1)
put-down b14 (1)
unstack b7 b18 (1)
stack b7 b8 (1)
unstack b18 b3 (1)
stack b18 b20 (1)
unstack b11 b4 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b14 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b7 b8 (1)
put-down b7 (1)
unstack b8 b19 (1)
put-down b8 (1)
pick-up b19 (1)
stack b19 b18 (1)
pick-up b8 (1)
stack b8 b19 (1)
pick-up b7 (1)
stack b7 b8 (1)
unstack b11 b4 (1)
put-down b11 (1)
unstack b4 b14 (1)
put-down b4 (1)
pick-up b11 (1)
stack b11 b4 (1)
pick-up b14 (1)
stack b14 b7 (1)
unstack b11 b4 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b14 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b13 b2 (1)
put-down b13 (1)
unstack b2 b10 (1)
put-down b2 (1)
unstack b10 b16 (1)
put-down b10 (1)
pick-up b2 (1)
stack b2 b10 (1)
pick-up b13 (1)
stack b13 b2 (1)
unstack b16 b6 (1)
put-down b16 (1)
unstack b6 b5 (1)
put-down b6 (1)
pick-up b5 (1)
stack b5 b3 (1)
pick-up b6 (1)
stack b6 b5 (1)
pick-up b16 (1)
stack b16 b6 (1)
unstack b13 b2 (1)
put-down b13 (1)
unstack b2 b10 (1)
put-down b2 (1)
pick-up b10 (1)
stack b10 b16 (1)
pick-up b2 (1)
stack b2 b10 (1)
pick-up b13 (1)
stack b13 b2 (1)
[t=0.0249323s, 26280 KB] Plan length: 114 step(s).
[t=0.0249323s, 26280 KB] Plan cost: 114
[t=0.0249323s, 26280 KB] Expanded 509 state(s).
[t=0.0249323s, 26280 KB] Reopened 0 state(s).
[t=0.0249323s, 26280 KB] Evaluated 510 state(s).
[t=0.0249323s, 26280 KB] Evaluations: 1020
[t=0.0249323s, 26280 KB] Generated 3781 state(s).
[t=0.0249323s, 26280 KB] Dead ends: 0 state(s).
[t=0.0249323s, 26280 KB] Number of registered states: 510
[t=0.0249323s, 26280 KB] Int hash set load factor: 510/512 = 0.996094
[t=0.0249323s, 26280 KB] Int hash set resizes: 9
[t=0.0249323s, 26280 KB] Search time: 0.0117525s
[t=0.0249323s, 26280 KB] Total time: 0.0249323s
Solution found.
Peak memory: 26280 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.15s
