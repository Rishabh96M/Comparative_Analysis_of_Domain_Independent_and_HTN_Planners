INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_30/bws_problem_30_13.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.017s wall-clock]
2912 relevant atoms
1950 auxiliary atoms
4862 final queue length
8527 total queue pushes
Completing instantiation... [0.040s CPU, 0.030s wall-clock]
Instantiating: [0.050s CPU, 0.049s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
31 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.050s wall-clock]
2670 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
60 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.023s wall-clock]
Reordering and filtering variables...
61 of 61 variables necessary.
31 of 61 mutex groups necessary.
1800 of 1800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.011s wall-clock]
Translator variables: 61
Translator derived variables: 0
Translator facts: 992
Translator goal facts: 24
Translator mutex groups: 31
Translator total mutex groups size: 961
Translator operators: 1800
Translator axioms: 0
Translator task size: 15448
Translator peak memory: 41336 KB
Writing output... [0.010s CPU, 0.009s wall-clock]
Done! [0.160s CPU, 0.159s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9011e-05s, 24488 KB] reading input...
[t=0.00512196s, 26364 KB] done reading input!
[t=0.00600519s, 26760 KB] Initializing landmark count heuristic...
[t=0.00603461s, 26760 KB] Generating landmark graph...
[t=0.00613721s, 26892 KB] Building a landmark graph with reasonable orders.
[t=0.00622639s, 27024 KB] Initializing Exploration...
[t=0.00678337s, 27316 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0331128s, 28372 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0333721s, 28372 KB] Landmarks generation time: 0.0272647s
[t=0.0334197s, 28372 KB] Discovered 134 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0334571s, 28372 KB] 821 edges
[t=0.0334707s, 28372 KB] approx. reasonable orders
[t=0.0407605s, 28372 KB] approx. obedient reasonable orders
[t=0.0413679s, 28372 KB] Removed 2 reasonable or obedient reasonable orders
[t=0.0413823s, 28372 KB] Landmarks generation time: 0.0353452s
[t=0.0413932s, 28372 KB] Discovered 134 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0414052s, 28372 KB] 940 edges
[t=0.0414139s, 28372 KB] Landmark graph generation time: 0.0353862s
[t=0.0414225s, 28372 KB] Landmark graph contains 134 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0414306s, 28372 KB] Landmark graph contains 940 orderings.
[t=0.0421728s, 28400 KB] Simplifying 7140 unary operators... done! [5400 unary operators]
[t=0.043835s, 28400 KB] time to simplify: 0.0017704s
[t=0.0440628s, 28552 KB] Initializing additive heuristic...
[t=0.044083s, 28552 KB] Initializing FF heuristic...
[t=0.0441377s, 28552 KB] Building successor generator...done!
[t=0.0444542s, 28552 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0444626s, 28552 KB] time for successor generation creation: 0.000278638s
[t=0.0444755s, 28552 KB] Variables: 61
[t=0.0444834s, 28552 KB] FactPairs: 992
[t=0.0444916s, 28552 KB] Bytes per state: 24
[t=0.0445771s, 28552 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0446107s, 28552 KB] 61 initial landmarks, 24 goal landmarks
[t=0.0446847s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0446934s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0447014s, 28552 KB] g=0, 1 evaluated, 0 expanded
[t=0.044715s, 28552 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0447234s, 28552 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0449863s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0449958s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0450063s, 28552 KB] g=2, 7 evaluated, 6 expanded
[t=0.0452612s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0452707s, 28552 KB] g=4, 13 evaluated, 12 expanded
[t=0.0453586s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0453672s, 28552 KB] g=4, 15 evaluated, 14 expanded
[t=0.0457475s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0457581s, 28552 KB] g=6, 24 evaluated, 23 expanded
[t=0.045888s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0458971s, 28552 KB] g=6, 27 evaluated, 26 expanded
[t=0.0463137s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.046323s, 28552 KB] g=8, 37 evaluated, 36 expanded
[t=0.0464536s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0464646s, 28552 KB] g=8, 40 evaluated, 39 expanded
[t=0.0468423s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0468511s, 28552 KB] g=10, 49 evaluated, 48 expanded
[t=0.0471012s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0471099s, 28552 KB] g=10, 55 evaluated, 54 expanded
[t=0.0473571s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0473657s, 28552 KB] g=11, 61 evaluated, 60 expanded
[t=0.0482141s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0482297s, 28552 KB] g=14, 82 evaluated, 81 expanded
[t=0.0490659s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.049076s, 28552 KB] g=16, 102 evaluated, 101 expanded
[t=0.049943s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0499543s, 28552 KB] g=18, 123 evaluated, 122 expanded
[t=0.0502584s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0502683s, 28552 KB] g=16, 130 evaluated, 129 expanded
[t=0.0510862s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0511002s, 28552 KB] g=20, 150 evaluated, 149 expanded
[t=0.0522688s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0522884s, 28552 KB] g=22, 178 evaluated, 177 expanded
[t=0.0529756s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0529877s, 28552 KB] g=24, 194 evaluated, 193 expanded
[t=0.0535264s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0535388s, 28552 KB] g=24, 206 evaluated, 205 expanded
[t=0.0540058s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0540167s, 28552 KB] g=26, 217 evaluated, 216 expanded
[t=0.0546761s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0546874s, 28552 KB] g=26, 233 evaluated, 232 expanded
[t=0.0558078s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0558316s, 28552 KB] g=28, 259 evaluated, 258 expanded
[t=0.0572019s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0572152s, 28552 KB] g=30, 290 evaluated, 289 expanded
[t=0.0572677s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0572775s, 28552 KB] g=30, 291 evaluated, 290 expanded
[t=0.0594878s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0595006s, 28552 KB] g=32, 344 evaluated, 343 expanded
[t=0.0611291s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0611393s, 28552 KB] g=34, 384 evaluated, 383 expanded
[t=0.0624164s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0624281s, 28552 KB] g=36, 414 evaluated, 413 expanded
[t=0.0637217s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0637317s, 28552 KB] g=38, 445 evaluated, 444 expanded
[t=0.0642868s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0642965s, 28552 KB] g=40, 458 evaluated, 457 expanded
[t=0.0646484s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0646579s, 28552 KB] g=38, 466 evaluated, 465 expanded
[t=0.0650397s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0650499s, 28552 KB] g=42, 475 evaluated, 474 expanded
[t=0.0659062s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0659185s, 28552 KB] g=44, 495 evaluated, 494 expanded
[t=0.0664984s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0665086s, 28552 KB] g=46, 509 evaluated, 508 expanded
[t=0.0673463s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0673673s, 28552 KB] g=48, 528 evaluated, 527 expanded
[t=0.0681321s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0681449s, 28552 KB] g=50, 546 evaluated, 545 expanded
[t=0.0696429s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0696667s, 28552 KB] g=54, 582 evaluated, 581 expanded
[t=0.0704431s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0704602s, 28552 KB] g=56, 601 evaluated, 600 expanded
[t=0.0712355s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0712467s, 28552 KB] g=58, 620 evaluated, 619 expanded
[t=0.0720755s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0720865s, 28552 KB] g=60, 640 evaluated, 639 expanded
[t=0.0727718s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0727822s, 28552 KB] g=62, 656 evaluated, 655 expanded
[t=0.0734851s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0734966s, 28552 KB] g=64, 672 evaluated, 671 expanded
[t=0.0778796s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0778956s, 28552 KB] g=70, 778 evaluated, 777 expanded
[t=0.081072s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0810865s, 28552 KB] g=74, 854 evaluated, 853 expanded
[t=0.0816216s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.081634s, 28552 KB] g=76, 866 evaluated, 865 expanded
[t=0.0911672s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0912071s, 28552 KB] g=90, 1092 evaluated, 1091 expanded
[t=0.107388s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.107422s, 28552 KB] g=100, 1484 evaluated, 1483 expanded
[t=0.120701s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.120733s, 28552 KB] g=116, 1809 evaluated, 1808 expanded
[t=0.121912s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.121928s, 28552 KB] g=48, 1837 evaluated, 1836 expanded
[t=0.12328s, 28552 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.123295s, 28552 KB] g=50, 1869 evaluated, 1868 expanded
[t=0.124341s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.124352s, 28552 KB] g=124, 1894 evaluated, 1893 expanded
[t=0.124654s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.124663s, 28552 KB] g=124, 1901 evaluated, 1900 expanded
[t=0.124875s, 28552 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.124884s, 28552 KB] g=126, 1906 evaluated, 1905 expanded
[t=0.192799s, 28948 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.19286s, 28948 KB] g=63, 3602 evaluated, 3601 expanded
[t=0.195705s, 29080 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.195731s, 29080 KB] g=68, 3672 evaluated, 3671 expanded
[t=0.197506s, 29080 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.197532s, 29080 KB] g=70, 3715 evaluated, 3714 expanded
[t=0.222037s, 29364 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.222109s, 29364 KB] g=76, 4325 evaluated, 4324 expanded
[t=0.222207s, 29364 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.222219s, 29364 KB] g=77, 4327 evaluated, 4326 expanded
[t=0.224813s, 29364 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.224835s, 29364 KB] g=80, 4391 evaluated, 4390 expanded
[t=0.226694s, 29364 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.226707s, 29364 KB] g=82, 4438 evaluated, 4437 expanded
[t=0.256522s, 29628 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.256576s, 29628 KB] g=180, 5205 evaluated, 5204 expanded
[t=0.256816s, 29628 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.256826s, 29628 KB] g=182, 5211 evaluated, 5210 expanded
[t=0.257734s, 29628 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.257748s, 29628 KB] g=186, 5235 evaluated, 5234 expanded
[t=0.257997s, 29628 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.258006s, 29628 KB] g=188, 5241 evaluated, 5240 expanded
[t=0.261927s, 29760 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.261943s, 29760 KB] g=200, 5349 evaluated, 5348 expanded
[t=0.262712s, 29760 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.262723s, 29760 KB] g=204, 5370 evaluated, 5369 expanded
[t=0.262867s, 29760 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.262878s, 29760 KB] g=206, 5374 evaluated, 5373 expanded
[t=0.265696s, 29760 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.265718s, 29760 KB] g=222, 5456 evaluated, 5455 expanded
[t=0.266439s, 29760 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.266452s, 29760 KB] g=230, 5478 evaluated, 5477 expanded
[t=0.266698s, 29760 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.266712s, 29760 KB] g=234, 5486 evaluated, 5485 expanded
[t=0.266772s, 29760 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.266781s, 29760 KB] g=235, 5488 evaluated, 5487 expanded
[t=0.266838s, 29760 KB] Solution found!
[t=0.266874s, 29760 KB] Actual search time: 0.222262s
unstack b11 b8 (1)
put-down b11 (1)
unstack b17 b29 (1)
stack b17 b7 (1)
unstack b5 b23 (1)
stack b5 b15 (1)
unstack b8 b30 (1)
stack b8 b29 (1)
unstack b30 b2 (1)
stack b30 b17 (1)
unstack b2 b20 (1)
put-down b2 (1)
unstack b20 b18 (1)
put-down b20 (1)
pick-up b2 (1)
stack b2 b18 (1)
unstack b23 b28 (1)
put-down b23 (1)
unstack b28 b22 (1)
put-down b28 (1)
unstack b22 b26 (1)
put-down b22 (1)
unstack b26 b13 (1)
put-down b26 (1)
unstack b13 b9 (1)
put-down b13 (1)
pick-up b28 (1)
stack b28 b13 (1)
pick-up b9 (1)
stack b9 b11 (1)
unstack b2 b18 (1)
put-down b2 (1)
unstack b18 b21 (1)
put-down b18 (1)
unstack b21 b1 (1)
put-down b21 (1)
unstack b1 b12 (1)
stack b1 b8 (1)
unstack b12 b14 (1)
stack b12 b23 (1)
unstack b14 b19 (1)
stack b14 b5 (1)
unstack b19 b27 (1)
put-down b19 (1)
unstack b27 b6 (1)
put-down b27 (1)
pick-up b2 (1)
stack b2 b18 (1)
pick-up b20 (1)
stack b20 b14 (1)
unstack b6 b16 (1)
put-down b6 (1)
unstack b16 b3 (1)
stack b16 b20 (1)
unstack b3 b25 (1)
stack b3 b28 (1)
unstack b25 b4 (1)
stack b25 b9 (1)
unstack b4 b24 (1)
put-down b4 (1)
pick-up b24 (1)
stack b24 b30 (1)
pick-up b6 (1)
stack b6 b24 (1)
unstack b12 b23 (1)
put-down b12 (1)
pick-up b23 (1)
stack b23 b6 (1)
pick-up b12 (1)
stack b12 b23 (1)
unstack b2 b18 (1)
put-down b2 (1)
pick-up b18 (1)
stack b18 b25 (1)
pick-up b2 (1)
stack b2 b18 (1)
unstack b3 b28 (1)
put-down b3 (1)
unstack b28 b13 (1)
put-down b28 (1)
pick-up b13 (1)
stack b13 b12 (1)
pick-up b28 (1)
stack b28 b13 (1)
pick-up b3 (1)
stack b3 b28 (1)
unstack b1 b8 (1)
put-down b1 (1)
unstack b8 b29 (1)
put-down b8 (1)
pick-up b1 (1)
stack b1 b8 (1)
pick-up b29 (1)
stack b29 b3 (1)
unstack b1 b8 (1)
put-down b1 (1)
pick-up b8 (1)
stack b8 b29 (1)
pick-up b1 (1)
stack b1 b8 (1)
unstack b16 b20 (1)
put-down b16 (1)
unstack b20 b14 (1)
put-down b20 (1)
unstack b14 b5 (1)
put-down b14 (1)
pick-up b20 (1)
stack b20 b14 (1)
pick-up b16 (1)
stack b16 b20 (1)
unstack b5 b15 (1)
put-down b5 (1)
pick-up b15 (1)
stack b15 b27 (1)
pick-up b5 (1)
stack b5 b15 (1)
unstack b16 b20 (1)
put-down b16 (1)
unstack b20 b14 (1)
put-down b20 (1)
pick-up b14 (1)
stack b14 b5 (1)
pick-up b20 (1)
stack b20 b14 (1)
pick-up b16 (1)
stack b16 b20 (1)
unstack b1 b8 (1)
put-down b1 (1)
unstack b8 b29 (1)
put-down b8 (1)
pick-up b1 (1)
stack b1 b8 (1)
unstack b29 b3 (1)
put-down b29 (1)
unstack b3 b28 (1)
put-down b3 (1)
unstack b28 b13 (1)
put-down b28 (1)
pick-up b3 (1)
stack b3 b28 (1)
pick-up b29 (1)
stack b29 b3 (1)
unstack b1 b8 (1)
put-down b1 (1)
pick-up b8 (1)
stack b8 b29 (1)
pick-up b1 (1)
stack b1 b8 (1)
unstack b13 b12 (1)
put-down b13 (1)
unstack b12 b23 (1)
put-down b12 (1)
pick-up b13 (1)
stack b13 b12 (1)
unstack b23 b6 (1)
put-down b23 (1)
unstack b6 b24 (1)
put-down b6 (1)
pick-up b23 (1)
stack b23 b6 (1)
unstack b13 b12 (1)
put-down b13 (1)
pick-up b12 (1)
stack b12 b23 (1)
pick-up b13 (1)
stack b13 b12 (1)
unstack b24 b30 (1)
put-down b24 (1)
unstack b30 b17 (1)
put-down b30 (1)
pick-up b24 (1)
stack b24 b30 (1)
unstack b17 b7 (1)
put-down b17 (1)
unstack b7 b10 (1)
stack b7 b21 (1)
pick-up b10 (1)
stack b10 b2 (1)
pick-up b17 (1)
stack b17 b7 (1)
pick-up b22 (1)
stack b22 b10 (1)
unstack b24 b30 (1)
put-down b24 (1)
pick-up b30 (1)
stack b30 b17 (1)
pick-up b24 (1)
stack b24 b30 (1)
unstack b13 b12 (1)
put-down b13 (1)
unstack b12 b23 (1)
put-down b12 (1)
pick-up b13 (1)
stack b13 b12 (1)
unstack b23 b6 (1)
put-down b23 (1)
pick-up b6 (1)
stack b6 b24 (1)
pick-up b23 (1)
stack b23 b6 (1)
unstack b13 b12 (1)
put-down b13 (1)
pick-up b12 (1)
stack b12 b23 (1)
pick-up b13 (1)
stack b13 b12 (1)
unstack b1 b8 (1)
put-down b1 (1)
unstack b8 b29 (1)
put-down b8 (1)
unstack b29 b3 (1)
put-down b29 (1)
pick-up b8 (1)
stack b8 b29 (1)
pick-up b1 (1)
stack b1 b8 (1)
unstack b3 b28 (1)
put-down b3 (1)
pick-up b28 (1)
stack b28 b13 (1)
pick-up b3 (1)
stack b3 b28 (1)
unstack b1 b8 (1)
put-down b1 (1)
unstack b8 b29 (1)
put-down b8 (1)
pick-up b1 (1)
stack b1 b8 (1)
pick-up b29 (1)
stack b29 b3 (1)
unstack b1 b8 (1)
put-down b1 (1)
pick-up b8 (1)
stack b8 b29 (1)
pick-up b1 (1)
stack b1 b8 (1)
[t=0.266884s, 29760 KB] Plan length: 236 step(s).
[t=0.266884s, 29760 KB] Plan cost: 236
[t=0.266884s, 29760 KB] Expanded 5489 state(s).
[t=0.266884s, 29760 KB] Reopened 0 state(s).
[t=0.266884s, 29760 KB] Evaluated 5490 state(s).
[t=0.266884s, 29760 KB] Evaluations: 10980
[t=0.266884s, 29760 KB] Generated 85110 state(s).
[t=0.266884s, 29760 KB] Dead ends: 0 state(s).
[t=0.266884s, 29760 KB] Number of registered states: 5490
[t=0.266884s, 29760 KB] Int hash set load factor: 5490/8192 = 0.670166
[t=0.266884s, 29760 KB] Int hash set resizes: 13
[t=0.266884s, 29760 KB] Search time: 0.222307s
[t=0.266884s, 29760 KB] Total time: 0.266884s
Solution found.
Peak memory: 29760 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.48s
