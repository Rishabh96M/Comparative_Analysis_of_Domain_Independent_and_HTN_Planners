INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_22/bws_problem_22_59.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
1608 relevant atoms
1078 auxiliary atoms
2686 final queue length
4673 total queue pushes
Completing instantiation... [0.020s CPU, 0.016s wall-clock]
Instantiating: [0.030s CPU, 0.028s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
23 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.024s wall-clock]
1430 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
44 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.012s wall-clock]
Reordering and filtering variables...
45 of 45 variables necessary.
23 of 45 mutex groups necessary.
968 of 968 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.006s wall-clock]
Translator variables: 45
Translator derived variables: 0
Translator facts: 552
Translator goal facts: 19
Translator mutex groups: 23
Translator total mutex groups size: 529
Translator operators: 968
Translator axioms: 0
Translator task size: 8339
Translator peak memory: 36972 KB
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.086s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.7825e-05s, 24488 KB] reading input...
[t=0.00276217s, 25340 KB] done reading input!
[t=0.00361801s, 25736 KB] Initializing landmark count heuristic...
[t=0.00364973s, 25736 KB] Generating landmark graph...
[t=0.00370869s, 25736 KB] Building a landmark graph with reasonable orders.
[t=0.00376697s, 25736 KB] Initializing Exploration...
[t=0.00406143s, 26000 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.014282s, 26532 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0143745s, 26532 KB] Landmarks generation time: 0.0106688s
[t=0.0143904s, 26532 KB] Discovered 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0144193s, 26532 KB] 377 edges
[t=0.0144295s, 26532 KB] approx. reasonable orders
[t=0.0149691s, 26532 KB] approx. obedient reasonable orders
[t=0.0150007s, 26532 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0150096s, 26532 KB] Landmarks generation time: 0.0113581s
[t=0.0150196s, 26532 KB] Discovered 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0150279s, 26532 KB] 387 edges
[t=0.0150367s, 26532 KB] Landmark graph generation time: 0.0113939s
[t=0.0150452s, 26532 KB] Landmark graph contains 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0150532s, 26532 KB] Landmark graph contains 387 orderings.
[t=0.0155707s, 26532 KB] Simplifying 3828 unary operators... done! [2904 unary operators]
[t=0.016562s, 26532 KB] time to simplify: 0.00105719s
[t=0.0166896s, 26532 KB] Initializing additive heuristic...
[t=0.016704s, 26532 KB] Initializing FF heuristic...
[t=0.016768s, 26532 KB] Building successor generator...done!
[t=0.01697s, 26532 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0169794s, 26532 KB] time for successor generation creation: 0.000162471s
[t=0.016992s, 26532 KB] Variables: 45
[t=0.0170002s, 26532 KB] FactPairs: 552
[t=0.017008s, 26532 KB] Bytes per state: 20
[t=0.0171318s, 26532 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0171685s, 26532 KB] 44 initial landmarks, 19 goal landmarks
[t=0.0172311s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0172423s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0172505s, 26532 KB] g=0, 1 evaluated, 0 expanded
[t=0.0172663s, 26532 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0172749s, 26532 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0174842s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0175148s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0175228s, 26532 KB] g=2, 9 evaluated, 8 expanded
[t=0.0176054s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0176276s, 26532 KB] g=3, 12 evaluated, 11 expanded
[t=0.0176626s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0176714s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0176792s, 26532 KB] g=4, 13 evaluated, 12 expanded
[t=0.0178322s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0178436s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0178516s, 26532 KB] g=6, 19 evaluated, 18 expanded
[t=0.0179758s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0179883s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0179966s, 26532 KB] g=8, 24 evaluated, 23 expanded
[t=0.0181227s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0181328s, 26532 KB] g=10, 29 evaluated, 28 expanded
[t=0.0182605s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0182726s, 26532 KB] g=11, 34 evaluated, 33 expanded
[t=0.0184681s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0184784s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0184944s, 26532 KB] g=14, 42 evaluated, 41 expanded
[t=0.0186683s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0186778s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0186861s, 26532 KB] g=16, 49 evaluated, 48 expanded
[t=0.0188779s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0188894s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0188977s, 26532 KB] g=18, 57 evaluated, 56 expanded
[t=0.0190928s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0191038s, 26532 KB] g=21, 65 evaluated, 64 expanded
[t=0.019137s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0191459s, 26532 KB] g=22, 66 evaluated, 65 expanded
[t=0.0193178s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0193287s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0193367s, 26532 KB] g=24, 73 evaluated, 72 expanded
[t=0.0195377s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0195501s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0195582s, 26532 KB] g=26, 81 evaluated, 80 expanded
[t=0.019707s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0197166s, 26532 KB] g=28, 87 evaluated, 86 expanded
[t=0.0198896s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0198988s, 26532 KB] g=30, 94 evaluated, 93 expanded
[t=0.0199326s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0199411s, 26532 KB] g=30, 95 evaluated, 94 expanded
[t=0.0202704s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0202815s, 26532 KB] g=32, 108 evaluated, 107 expanded
[t=0.0204315s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0204518s, 26532 KB] g=32, 112 evaluated, 111 expanded
[t=0.0211981s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.02121s, 26532 KB] g=38, 142 evaluated, 141 expanded
[t=0.0215282s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0215403s, 26532 KB] g=38, 155 evaluated, 154 expanded
[t=0.0221996s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0222179s, 26532 KB] g=43, 182 evaluated, 181 expanded
[t=0.0228012s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0228359s, 26532 KB] g=46, 205 evaluated, 204 expanded
[t=0.0231948s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.023207s, 26532 KB] g=48, 219 evaluated, 218 expanded
[t=0.023275s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0232866s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0232962s, 26532 KB] g=48, 221 evaluated, 220 expanded
[t=0.0235225s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0235319s, 26532 KB] g=50, 230 evaluated, 229 expanded
[t=0.0235885s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0236025s, 26532 KB] g=50, 232 evaluated, 231 expanded
[t=0.0238405s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0238497s, 26532 KB] g=52, 242 evaluated, 241 expanded
[t=0.0240409s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0240496s, 26532 KB] g=52, 250 evaluated, 249 expanded
[t=0.024105s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.024114s, 26532 KB] g=54, 252 evaluated, 251 expanded
[t=0.0243978s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0244114s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0244268s, 26532 KB] g=56, 263 evaluated, 262 expanded
[t=0.0245524s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0245611s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0245686s, 26532 KB] g=58, 268 evaluated, 267 expanded
[t=0.0254281s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0254445s, 26532 KB] g=64, 306 evaluated, 305 expanded
[t=0.0255481s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0255569s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0255647s, 26532 KB] g=66, 310 evaluated, 309 expanded
[t=0.0267442s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0267545s, 26532 KB] g=74, 363 evaluated, 362 expanded
[t=0.0268981s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0269068s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0269146s, 26532 KB] g=76, 369 evaluated, 368 expanded
[t=0.0270319s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0270406s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0270483s, 26532 KB] g=78, 374 evaluated, 373 expanded
[t=0.0271402s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0271487s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0271562s, 26532 KB] g=80, 378 evaluated, 377 expanded
[t=0.0277233s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0277339s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0277419s, 26532 KB] g=88, 406 evaluated, 405 expanded
[t=0.02781s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0278185s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0278262s, 26532 KB] g=90, 409 evaluated, 408 expanded
[t=0.0282595s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0282686s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0282768s, 26532 KB] g=104, 435 evaluated, 434 expanded
[t=0.0283249s, 26532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0283362s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.028349s, 26532 KB] g=106, 438 evaluated, 437 expanded
[t=0.0284085s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0284174s, 26532 KB] g=110, 442 evaluated, 441 expanded
[t=0.0284357s, 26532 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0284442s, 26532 KB] g=111, 443 evaluated, 442 expanded
[t=0.0284586s, 26532 KB] Solution found!
[t=0.0284694s, 26532 KB] Actual search time: 0.0112974s
unstack b8 b18 (1)
put-down b8 (1)
unstack b18 b4 (1)
stack b18 b1 (1)
pick-up b14 (1)
stack b14 b4 (1)
unstack b22 b9 (1)
stack b22 b14 (1)
unstack b9 b7 (1)
put-down b9 (1)
unstack b7 b6 (1)
put-down b7 (1)
unstack b6 b5 (1)
stack b6 b3 (1)
unstack b5 b16 (1)
stack b5 b20 (1)
pick-up b16 (1)
stack b16 b8 (1)
unstack b18 b1 (1)
put-down b18 (1)
unstack b1 b2 (1)
stack b1 b22 (1)
unstack b2 b21 (1)
put-down b2 (1)
pick-up b18 (1)
stack b18 b1 (1)
unstack b21 b11 (1)
put-down b21 (1)
unstack b11 b12 (1)
stack b11 b21 (1)
pick-up b7 (1)
stack b7 b12 (1)
unstack b6 b3 (1)
put-down b6 (1)
pick-up b3 (1)
stack b3 b11 (1)
pick-up b6 (1)
stack b6 b3 (1)
unstack b7 b12 (1)
put-down b7 (1)
unstack b12 b10 (1)
put-down b12 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b17 (1)
stack b15 b2 (1)
unstack b17 b13 (1)
stack b17 b16 (1)
pick-up b10 (1)
stack b10 b9 (1)
pick-up b12 (1)
stack b12 b10 (1)
pick-up b13 (1)
stack b13 b5 (1)
pick-up b19 (1)
stack b19 b13 (1)
unstack b12 b10 (1)
put-down b12 (1)
unstack b10 b9 (1)
put-down b10 (1)
pick-up b12 (1)
stack b12 b10 (1)
pick-up b7 (1)
stack b7 b12 (1)
pick-up b9 (1)
stack b9 b15 (1)
unstack b6 b3 (1)
put-down b6 (1)
unstack b3 b11 (1)
put-down b3 (1)
unstack b11 b21 (1)
put-down b11 (1)
pick-up b21 (1)
stack b21 b17 (1)
pick-up b11 (1)
stack b11 b21 (1)
pick-up b3 (1)
stack b3 b11 (1)
pick-up b6 (1)
stack b6 b3 (1)
unstack b7 b12 (1)
put-down b7 (1)
unstack b12 b10 (1)
put-down b12 (1)
pick-up b10 (1)
stack b10 b9 (1)
pick-up b12 (1)
stack b12 b10 (1)
pick-up b7 (1)
stack b7 b12 (1)
unstack b18 b1 (1)
put-down b18 (1)
unstack b1 b22 (1)
put-down b1 (1)
pick-up b18 (1)
stack b18 b1 (1)
unstack b22 b14 (1)
put-down b22 (1)
unstack b14 b4 (1)
put-down b14 (1)
pick-up b4 (1)
stack b4 b6 (1)
pick-up b14 (1)
stack b14 b4 (1)
pick-up b22 (1)
stack b22 b14 (1)
unstack b18 b1 (1)
put-down b18 (1)
pick-up b1 (1)
stack b1 b22 (1)
pick-up b18 (1)
stack b18 b1 (1)
[t=0.0284786s, 26532 KB] Plan length: 112 step(s).
[t=0.0284786s, 26532 KB] Plan cost: 112
[t=0.0284786s, 26532 KB] Expanded 443 state(s).
[t=0.0284786s, 26532 KB] Reopened 0 state(s).
[t=0.0284786s, 26532 KB] Evaluated 444 state(s).
[t=0.0284786s, 26532 KB] Evaluations: 888
[t=0.0284786s, 26532 KB] Generated 3913 state(s).
[t=0.0284786s, 26532 KB] Dead ends: 0 state(s).
[t=0.0284786s, 26532 KB] Number of registered states: 444
[t=0.0284786s, 26532 KB] Int hash set load factor: 444/512 = 0.867188
[t=0.0284786s, 26532 KB] Int hash set resizes: 9
[t=0.0284786s, 26532 KB] Search time: 0.0113473s
[t=0.0284786s, 26532 KB] Total time: 0.0284786s
Solution found.
Peak memory: 26532 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.17s
