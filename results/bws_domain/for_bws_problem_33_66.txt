INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_33/bws_problem_33_66.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 21 rules.
Computing model... [0.030s CPU, 0.021s wall-clock]
3500 relevant atoms
2343 auxiliary atoms
5843 final queue length
10269 total queue pushes
Completing instantiation... [0.040s CPU, 0.042s wall-clock]
Instantiating: [0.070s CPU, 0.066s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
34 uncovered facts
Choosing groups: [0.010s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.057s wall-clock]
3234 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
66 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.029s wall-clock]
Reordering and filtering variables...
67 of 67 variables necessary.
34 of 67 mutex groups necessary.
2178 of 2178 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.015s wall-clock]
Translator variables: 67
Translator derived variables: 0
Translator facts: 1190
Translator goal facts: 27
Translator mutex groups: 34
Translator total mutex groups size: 1156
Translator operators: 2178
Translator axioms: 0
Translator task size: 18676
Translator peak memory: 43544 KB
Writing output... [0.020s CPU, 0.011s wall-clock]
Done! [0.200s CPU, 0.198s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.7744e-05s, 24488 KB] reading input...
[t=0.00658831s, 26928 KB] done reading input!
[t=0.00782579s, 27324 KB] Initializing landmark count heuristic...
[t=0.00789508s, 27324 KB] Generating landmark graph...
[t=0.00805169s, 27456 KB] Building a landmark graph with reasonable orders.
[t=0.00817147s, 27588 KB] Initializing Exploration...
[t=0.00883375s, 28188 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0418623s, 29252 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0419715s, 29252 KB] Landmarks generation time: 0.0339249s
[t=0.0419947s, 29252 KB] Discovered 140 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0420112s, 29252 KB] 746 edges
[t=0.042021s, 29252 KB] approx. reasonable orders
[t=0.0441012s, 29252 KB] approx. obedient reasonable orders
[t=0.0441633s, 29252 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0441743s, 29252 KB] Landmarks generation time: 0.036275s
[t=0.0441843s, 29252 KB] Discovered 140 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0441925s, 29252 KB] 762 edges
[t=0.0442009s, 29252 KB] Landmark graph generation time: 0.036316s
[t=0.0442127s, 29252 KB] Landmark graph contains 140 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.044228s, 29252 KB] Landmark graph contains 762 orderings.
[t=0.0449257s, 29252 KB] Simplifying 8646 unary operators... done! [6534 unary operators]
[t=0.0473095s, 29252 KB] time to simplify: 0.00244386s
[t=0.0475235s, 29252 KB] Initializing additive heuristic...
[t=0.0475458s, 29252 KB] Initializing FF heuristic...
[t=0.0476155s, 29252 KB] Building successor generator...done!
[t=0.0480345s, 29252 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0480449s, 29252 KB] time for successor generation creation: 0.000388538s
[t=0.0480633s, 29252 KB] Variables: 67
[t=0.0480722s, 29252 KB] FactPairs: 1190
[t=0.0480807s, 29252 KB] Bytes per state: 32
[t=0.0481871s, 29252 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0482333s, 29252 KB] 64 initial landmarks, 27 goal landmarks
[t=0.0483273s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 76
[t=0.0483424s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0483515s, 29252 KB] g=0, 1 evaluated, 0 expanded
[t=0.0483662s, 29252 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 76
[t=0.0483749s, 29252 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0485476s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 75
[t=0.0485567s, 29252 KB] g=1, 4 evaluated, 3 expanded
[t=0.0491216s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0491318s, 29252 KB] g=3, 15 evaluated, 14 expanded
[t=0.0495389s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0495491s, 29252 KB] g=6, 23 evaluated, 22 expanded
[t=0.0501026s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0501156s, 29252 KB] g=4, 34 evaluated, 33 expanded
[t=0.0503868s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0503974s, 29252 KB] g=8, 39 evaluated, 38 expanded
[t=0.0506602s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0506781s, 29252 KB] g=6, 44 evaluated, 43 expanded
[t=0.0512272s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0512389s, 29252 KB] g=8, 55 evaluated, 54 expanded
[t=0.0516408s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0516548s, 29252 KB] g=10, 63 evaluated, 62 expanded
[t=0.0521651s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0521881s, 29252 KB] g=12, 73 evaluated, 72 expanded
[t=0.0522483s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0522601s, 29252 KB] g=12, 74 evaluated, 73 expanded
[t=0.0529103s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0529444s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0529544s, 29252 KB] g=14, 87 evaluated, 86 expanded
[t=0.0533446s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0533628s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0533719s, 29252 KB] g=16, 94 evaluated, 93 expanded
[t=0.053689s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0536985s, 29252 KB] g=18, 100 evaluated, 99 expanded
[t=0.0539944s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0540064s, 29252 KB] g=19, 105 evaluated, 104 expanded
[t=0.0541788s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0541894s, 29252 KB] g=21, 108 evaluated, 107 expanded
[t=0.0543154s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0543248s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0543339s, 29252 KB] g=22, 110 evaluated, 109 expanded
[t=0.0547418s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0547513s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0547594s, 29252 KB] g=24, 118 evaluated, 117 expanded
[t=0.0552422s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0552569s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0552654s, 29252 KB] g=26, 127 evaluated, 126 expanded
[t=0.055689s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0557054s, 29252 KB] g=28, 135 evaluated, 134 expanded
[t=0.0557735s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0557825s, 29252 KB] g=28, 136 evaluated, 135 expanded
[t=0.0565334s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0565439s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0565528s, 29252 KB] g=30, 151 evaluated, 150 expanded
[t=0.057066s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0570758s, 29252 KB] g=32, 161 evaluated, 160 expanded
[t=0.0571888s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0571987s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0572075s, 29252 KB] g=32, 163 evaluated, 162 expanded
[t=0.0576043s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.057614s, 29252 KB] g=34, 171 evaluated, 170 expanded
[t=0.0577536s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0577735s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0577852s, 29252 KB] g=34, 173 evaluated, 172 expanded
[t=0.058201s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0582112s, 29252 KB] g=36, 181 evaluated, 180 expanded
[t=0.058464s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0584765s, 29252 KB] g=37, 186 evaluated, 185 expanded
[t=0.0608832s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0609013s, 29252 KB] g=41, 234 evaluated, 233 expanded
[t=0.0614666s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0614776s, 29252 KB] g=43, 245 evaluated, 244 expanded
[t=0.0615985s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0616087s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0616188s, 29252 KB] g=44, 247 evaluated, 246 expanded
[t=0.0622099s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0622212s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0622305s, 29252 KB] g=46, 258 evaluated, 257 expanded
[t=0.0627944s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0628112s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0628204s, 29252 KB] g=48, 269 evaluated, 268 expanded
[t=0.0632601s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0632701s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0632788s, 29252 KB] g=50, 278 evaluated, 277 expanded
[t=0.0652063s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0652523s, 29252 KB] g=53, 307 evaluated, 306 expanded
[t=0.0663062s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0663207s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0663296s, 29252 KB] g=56, 328 evaluated, 327 expanded
[t=0.0668657s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0668758s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0668842s, 29252 KB] g=58, 339 evaluated, 338 expanded
[t=0.0677226s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0677574s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0677662s, 29252 KB] g=60, 348 evaluated, 347 expanded
[t=0.0692968s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.069407s, 29252 KB] g=63, 367 evaluated, 366 expanded
[t=0.0707066s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0707321s, 29252 KB] g=66, 388 evaluated, 387 expanded
[t=0.0711993s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0712097s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0712184s, 29252 KB] g=68, 397 evaluated, 396 expanded
[t=0.074621s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0746639s, 29252 KB] g=73, 463 evaluated, 462 expanded
[t=0.0747701s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0747799s, 29252 KB] g=74, 465 evaluated, 464 expanded
[t=0.0757076s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0757316s, 29252 KB] g=76, 485 evaluated, 484 expanded
[t=0.0761561s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0761661s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.076175s, 29252 KB] g=78, 494 evaluated, 493 expanded
[t=0.0771955s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0772313s, 29252 KB] g=82, 515 evaluated, 514 expanded
[t=0.0777696s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0777832s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0777914s, 29252 KB] g=84, 525 evaluated, 524 expanded
[t=0.0782992s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0783251s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0783336s, 29252 KB] g=86, 535 evaluated, 534 expanded
[t=0.0787188s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0787286s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0787369s, 29252 KB] g=88, 543 evaluated, 542 expanded
[t=0.0791436s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0791617s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.079173s, 29252 KB] g=90, 551 evaluated, 550 expanded
[t=0.0819143s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0819476s, 29252 KB] g=96, 608 evaluated, 607 expanded
[t=0.0820065s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0820164s, 29252 KB] g=94, 609 evaluated, 608 expanded
[t=0.0826564s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0826697s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0826779s, 29252 KB] g=96, 622 evaluated, 621 expanded
[t=0.0846328s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0846599s, 29252 KB] g=100, 665 evaluated, 664 expanded
[t=0.0849108s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0849226s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0849408s, 29252 KB] g=102, 670 evaluated, 669 expanded
[t=0.0861375s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0861516s, 29252 KB] g=108, 696 evaluated, 695 expanded
[t=0.0863815s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0863926s, 29252 KB] g=110, 701 evaluated, 700 expanded
[t=0.0870807s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0871122s, 29252 KB] g=114, 715 evaluated, 714 expanded
[t=0.0873194s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0873291s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0873375s, 29252 KB] g=116, 719 evaluated, 718 expanded
[t=0.089697s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0897165s, 29252 KB] g=126, 768 evaluated, 767 expanded
[t=0.0899074s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0899167s, 29252 KB] g=128, 772 evaluated, 771 expanded
[t=0.0908658s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0908753s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0908832s, 29252 KB] g=130, 793 evaluated, 792 expanded
[t=0.105243s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.105275s, 29252 KB] g=166, 1100 evaluated, 1099 expanded
[t=0.107343s, 29252 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.107397s, 29252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.10741s, 29252 KB] g=184, 1133 evaluated, 1132 expanded
[t=0.253482s, 29712 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.253694s, 29712 KB] g=236, 4172 evaluated, 4171 expanded
[t=0.253909s, 29712 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.253923s, 29712 KB] g=238, 4176 evaluated, 4175 expanded
[t=0.256579s, 29712 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.256599s, 29712 KB] g=250, 4230 evaluated, 4229 expanded
[t=0.257007s, 29712 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.257018s, 29712 KB] g=254, 4239 evaluated, 4238 expanded
[t=0.257163s, 29712 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.257174s, 29712 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.257182s, 29712 KB] g=256, 4242 evaluated, 4241 expanded
[t=0.267467s, 29712 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.267547s, 29712 KB] g=290, 4490 evaluated, 4489 expanded
[t=0.267906s, 29712 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.267918s, 29712 KB] g=294, 4499 evaluated, 4498 expanded
[t=0.268049s, 29848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.268067s, 29848 KB] g=296, 4502 evaluated, 4501 expanded
[t=0.269262s, 29848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.269274s, 29848 KB] g=312, 4539 evaluated, 4538 expanded
[t=0.269541s, 29848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.269551s, 29848 KB] g=320, 4549 evaluated, 4548 expanded
[t=0.269654s, 29848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.269664s, 29848 KB] g=324, 4553 evaluated, 4552 expanded
[t=0.269688s, 29848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.269697s, 29848 KB] g=325, 4554 evaluated, 4553 expanded
[t=0.269717s, 29848 KB] Solution found!
[t=0.269734s, 29848 KB] Actual search time: 0.221497s
unstack b33 b14 (1)
put-down b33 (1)
unstack b8 b23 (1)
stack b8 b14 (1)
unstack b23 b6 (1)
put-down b23 (1)
unstack b21 b2 (1)
put-down b21 (1)
unstack b2 b16 (1)
put-down b2 (1)
unstack b16 b22 (1)
stack b16 b21 (1)
unstack b22 b30 (1)
stack b22 b8 (1)
pick-up b2 (1)
stack b2 b30 (1)
unstack b26 b31 (1)
put-down b26 (1)
unstack b31 b19 (1)
put-down b31 (1)
unstack b19 b12 (1)
stack b19 b16 (1)
unstack b12 b9 (1)
put-down b12 (1)
unstack b6 b10 (1)
stack b6 b9 (1)
unstack b10 b29 (1)
put-down b10 (1)
unstack b29 b15 (1)
stack b29 b12 (1)
pick-up b26 (1)
stack b26 b10 (1)
pick-up b33 (1)
stack b33 b29 (1)
unstack b15 b28 (1)
put-down b15 (1)
unstack b28 b5 (1)
put-down b28 (1)
unstack b2 b30 (1)
put-down b2 (1)
unstack b30 b32 (1)
put-down b30 (1)
unstack b32 b11 (1)
stack b32 b23 (1)
unstack b11 b17 (1)
put-down b11 (1)
pick-up b15 (1)
stack b15 b17 (1)
pick-up b2 (1)
stack b2 b30 (1)
unstack b6 b9 (1)
put-down b6 (1)
unstack b9 b18 (1)
put-down b9 (1)
unstack b18 b7 (1)
stack b18 b11 (1)
pick-up b31 (1)
stack b31 b7 (1)
pick-up b6 (1)
stack b6 b9 (1)
unstack b31 b7 (1)
put-down b31 (1)
unstack b7 b1 (1)
put-down b7 (1)
pick-up b1 (1)
stack b1 b22 (1)
pick-up b31 (1)
stack b31 b7 (1)
unstack b15 b17 (1)
put-down b15 (1)
unstack b17 b3 (1)
put-down b17 (1)
unstack b3 b4 (1)
stack b3 b2 (1)
pick-up b17 (1)
stack b17 b3 (1)
pick-up b15 (1)
stack b15 b17 (1)
unstack b4 b27 (1)
put-down b4 (1)
unstack b27 b25 (1)
put-down b27 (1)
unstack b25 b13 (1)
stack b25 b18 (1)
unstack b13 b24 (1)
stack b13 b26 (1)
pick-up b28 (1)
stack b28 b25 (1)
pick-up b4 (1)
stack b4 b27 (1)
unstack b31 b7 (1)
put-down b31 (1)
pick-up b7 (1)
stack b7 b24 (1)
pick-up b31 (1)
stack b31 b7 (1)
unstack b6 b9 (1)
put-down b6 (1)
pick-up b9 (1)
stack b9 b13 (1)
pick-up b6 (1)
stack b6 b9 (1)
unstack b19 b16 (1)
put-down b19 (1)
unstack b16 b21 (1)
put-down b16 (1)
pick-up b19 (1)
stack b19 b16 (1)
pick-up b21 (1)
stack b21 b15 (1)
unstack b19 b16 (1)
put-down b19 (1)
pick-up b16 (1)
stack b16 b21 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b1 b22 (1)
put-down b1 (1)
unstack b22 b8 (1)
put-down b22 (1)
unstack b8 b14 (1)
put-down b8 (1)
pick-up b14 (1)
stack b14 b6 (1)
pick-up b8 (1)
stack b8 b14 (1)
pick-up b22 (1)
stack b22 b8 (1)
pick-up b1 (1)
stack b1 b22 (1)
unstack b19 b16 (1)
put-down b19 (1)
unstack b16 b21 (1)
put-down b16 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b21 b15 (1)
put-down b21 (1)
unstack b15 b17 (1)
put-down b15 (1)
pick-up b21 (1)
stack b21 b15 (1)
unstack b19 b16 (1)
put-down b19 (1)
pick-up b16 (1)
stack b16 b21 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b17 b3 (1)
put-down b17 (1)
unstack b3 b2 (1)
put-down b3 (1)
pick-up b17 (1)
stack b17 b3 (1)
unstack b2 b30 (1)
put-down b2 (1)
pick-up b30 (1)
stack b30 b1 (1)
unstack b17 b3 (1)
put-down b17 (1)
pick-up b3 (1)
stack b3 b2 (1)
pick-up b17 (1)
stack b17 b3 (1)
unstack b30 b1 (1)
put-down b30 (1)
unstack b1 b22 (1)
put-down b1 (1)
pick-up b30 (1)
stack b30 b1 (1)
unstack b17 b3 (1)
put-down b17 (1)
unstack b3 b2 (1)
put-down b3 (1)
pick-up b17 (1)
stack b17 b3 (1)
pick-up b2 (1)
stack b2 b30 (1)
unstack b17 b3 (1)
put-down b17 (1)
pick-up b3 (1)
stack b3 b2 (1)
pick-up b17 (1)
stack b17 b3 (1)
unstack b19 b16 (1)
put-down b19 (1)
unstack b16 b21 (1)
put-down b16 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b21 b15 (1)
put-down b21 (1)
pick-up b15 (1)
stack b15 b17 (1)
pick-up b21 (1)
stack b21 b15 (1)
unstack b19 b16 (1)
put-down b19 (1)
pick-up b16 (1)
stack b16 b21 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b22 b8 (1)
put-down b22 (1)
unstack b8 b14 (1)
put-down b8 (1)
pick-up b22 (1)
stack b22 b8 (1)
unstack b14 b6 (1)
put-down b14 (1)
unstack b6 b9 (1)
put-down b6 (1)
pick-up b14 (1)
stack b14 b6 (1)
unstack b22 b8 (1)
put-down b22 (1)
pick-up b8 (1)
stack b8 b14 (1)
pick-up b22 (1)
stack b22 b8 (1)
unstack b9 b13 (1)
put-down b9 (1)
unstack b13 b26 (1)
put-down b13 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b26 b10 (1)
put-down b26 (1)
pick-up b10 (1)
stack b10 b5 (1)
pick-up b26 (1)
stack b26 b10 (1)
unstack b9 b13 (1)
put-down b9 (1)
pick-up b13 (1)
stack b13 b26 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b22 b8 (1)
put-down b22 (1)
unstack b8 b14 (1)
put-down b8 (1)
pick-up b22 (1)
stack b22 b8 (1)
unstack b14 b6 (1)
put-down b14 (1)
pick-up b6 (1)
stack b6 b9 (1)
pick-up b14 (1)
stack b14 b6 (1)
unstack b22 b8 (1)
put-down b22 (1)
pick-up b8 (1)
stack b8 b14 (1)
pick-up b22 (1)
stack b22 b8 (1)
unstack b19 b16 (1)
put-down b19 (1)
unstack b16 b21 (1)
put-down b16 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b21 b15 (1)
put-down b21 (1)
unstack b15 b17 (1)
put-down b15 (1)
unstack b17 b3 (1)
put-down b17 (1)
pick-up b15 (1)
stack b15 b17 (1)
pick-up b21 (1)
stack b21 b15 (1)
unstack b19 b16 (1)
put-down b19 (1)
pick-up b16 (1)
stack b16 b21 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b3 b2 (1)
put-down b3 (1)
unstack b2 b30 (1)
put-down b2 (1)
pick-up b3 (1)
stack b3 b2 (1)
unstack b30 b1 (1)
put-down b30 (1)
pick-up b1 (1)
stack b1 b22 (1)
pick-up b30 (1)
stack b30 b1 (1)
unstack b3 b2 (1)
put-down b3 (1)
pick-up b2 (1)
stack b2 b30 (1)
pick-up b3 (1)
stack b3 b2 (1)
unstack b19 b16 (1)
put-down b19 (1)
unstack b16 b21 (1)
put-down b16 (1)
unstack b21 b15 (1)
put-down b21 (1)
pick-up b16 (1)
stack b16 b21 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b15 b17 (1)
put-down b15 (1)
pick-up b17 (1)
stack b17 b3 (1)
pick-up b15 (1)
stack b15 b17 (1)
unstack b19 b16 (1)
put-down b19 (1)
unstack b16 b21 (1)
put-down b16 (1)
pick-up b19 (1)
stack b19 b16 (1)
pick-up b21 (1)
stack b21 b15 (1)
unstack b19 b16 (1)
put-down b19 (1)
pick-up b16 (1)
stack b16 b21 (1)
pick-up b19 (1)
stack b19 b16 (1)
[t=0.269745s, 29848 KB] Plan length: 326 step(s).
[t=0.269745s, 29848 KB] Plan cost: 326
[t=0.269745s, 29848 KB] Expanded 4554 state(s).
[t=0.269745s, 29848 KB] Reopened 0 state(s).
[t=0.269745s, 29848 KB] Evaluated 4555 state(s).
[t=0.269745s, 29848 KB] Evaluations: 9110
[t=0.269745s, 29848 KB] Generated 53347 state(s).
[t=0.269745s, 29848 KB] Dead ends: 0 state(s).
[t=0.269745s, 29848 KB] Number of registered states: 4555
[t=0.269745s, 29848 KB] Int hash set load factor: 4555/8192 = 0.55603
[t=0.269745s, 29848 KB] Int hash set resizes: 13
[t=0.269745s, 29848 KB] Search time: 0.221559s
[t=0.269745s, 29848 KB] Total time: 0.269745s
Solution found.
Peak memory: 29848 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.52s
