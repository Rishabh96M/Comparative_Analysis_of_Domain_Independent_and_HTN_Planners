INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_67.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4269 total queue pushes
Completing instantiation... [0.010s CPU, 0.015s wall-clock]
Instantiating: [0.020s CPU, 0.027s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.023s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.011s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 17
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7602
Translator peak memory: 36460 KB
Writing output... [0.010s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.083s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=4.8459e-05s, 24488 KB] reading input...
[t=0.00280717s, 25268 KB] done reading input!
[t=0.00369187s, 25664 KB] Initializing landmark count heuristic...
[t=0.0037286s, 25664 KB] Generating landmark graph...
[t=0.00379697s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00385326s, 25664 KB] Initializing Exploration...
[t=0.00412731s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0130732s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.013121s, 26380 KB] Landmarks generation time: 0.00932373s
[t=0.013135s, 26380 KB] Discovered 88 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0131509s, 26380 KB] 375 edges
[t=0.0131607s, 26380 KB] approx. reasonable orders
[t=0.0148397s, 26380 KB] approx. obedient reasonable orders
[t=0.0148649s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0148746s, 26380 KB] Landmarks generation time: 0.0111428s
[t=0.0148839s, 26380 KB] Discovered 88 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.014892s, 26380 KB] 412 edges
[t=0.0149003s, 26380 KB] Landmark graph generation time: 0.0111789s
[t=0.014909s, 26380 KB] Landmark graph contains 88 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0149172s, 26380 KB] Landmark graph contains 412 orderings.
[t=0.0152049s, 26380 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0160641s, 26380 KB] time to simplify: 0.000916454s
[t=0.0161765s, 26380 KB] Initializing additive heuristic...
[t=0.0161903s, 26380 KB] Initializing FF heuristic...
[t=0.016246s, 26380 KB] Building successor generator...done!
[t=0.0164366s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0164457s, 26380 KB] time for successor generation creation: 0.000155644s
[t=0.016459s, 26380 KB] Variables: 43
[t=0.0164674s, 26380 KB] FactPairs: 506
[t=0.0164757s, 26380 KB] Bytes per state: 16
[t=0.0165689s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0166024s, 26380 KB] 40 initial landmarks, 17 goal landmarks
[t=0.0166528s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0166671s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0166755s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.0166889s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0166975s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0168339s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0168433s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0168516s, 26380 KB] g=2, 6 evaluated, 5 expanded
[t=0.0170499s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0170622s, 26380 KB] g=4, 11 evaluated, 10 expanded
[t=0.0170958s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0171047s, 26380 KB] g=4, 12 evaluated, 11 expanded
[t=0.0172977s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0173074s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0173163s, 26380 KB] g=6, 20 evaluated, 19 expanded
[t=0.01742s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0174294s, 26380 KB] g=8, 24 evaluated, 23 expanded
[t=0.017585s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0175939s, 26380 KB] g=10, 30 evaluated, 29 expanded
[t=0.0178619s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0178708s, 26380 KB] g=12, 41 evaluated, 40 expanded
[t=0.0181988s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0182081s, 26380 KB] g=14, 55 evaluated, 54 expanded
[t=0.018341s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0183499s, 26380 KB] g=12, 60 evaluated, 59 expanded
[t=0.0185924s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0186051s, 26380 KB] g=16, 70 evaluated, 69 expanded
[t=0.018937s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.018947s, 26380 KB] g=18, 84 evaluated, 83 expanded
[t=0.0193278s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0193386s, 26380 KB] g=20, 100 evaluated, 99 expanded
[t=0.0196958s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0197061s, 26380 KB] g=22, 115 evaluated, 114 expanded
[t=0.0199278s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.019938s, 26380 KB] g=24, 124 evaluated, 123 expanded
[t=0.019998s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0200072s, 26380 KB] g=24, 126 evaluated, 125 expanded
[t=0.0203669s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0203771s, 26380 KB] g=25, 141 evaluated, 140 expanded
[t=0.0207555s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0207649s, 26380 KB] g=26, 157 evaluated, 156 expanded
[t=0.02105s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0210597s, 26380 KB] g=28, 169 evaluated, 168 expanded
[t=0.0211652s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0211745s, 26380 KB] g=28, 173 evaluated, 172 expanded
[t=0.0213698s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0213788s, 26380 KB] g=29, 181 evaluated, 180 expanded
[t=0.0215362s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0215452s, 26380 KB] g=30, 187 evaluated, 186 expanded
[t=0.0221629s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0221758s, 26380 KB] g=32, 210 evaluated, 209 expanded
[t=0.0222598s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.022269s, 26380 KB] g=34, 213 evaluated, 212 expanded
[t=0.0226558s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0226664s, 26380 KB] g=36, 229 evaluated, 228 expanded
[t=0.0228651s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0228744s, 26380 KB] g=34, 237 evaluated, 236 expanded
[t=0.0230024s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0230125s, 26380 KB] g=38, 242 evaluated, 241 expanded
[t=0.0234775s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0234887s, 26380 KB] g=36, 261 evaluated, 260 expanded
[t=0.0236582s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0236676s, 26380 KB] g=40, 268 evaluated, 267 expanded
[t=0.0239732s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0239827s, 26380 KB] g=42, 281 evaluated, 280 expanded
[t=0.024039s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0240485s, 26380 KB] g=38, 283 evaluated, 282 expanded
[t=0.0244868s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0244971s, 26380 KB] g=40, 302 evaluated, 301 expanded
[t=0.0250472s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.025062s, 26380 KB] g=42, 326 evaluated, 325 expanded
[t=0.0252492s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0252593s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0252679s, 26380 KB] g=44, 334 evaluated, 333 expanded
[t=0.0254294s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0254392s, 26380 KB] g=46, 341 evaluated, 340 expanded
[t=0.025558s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0255677s, 26380 KB] g=46, 346 evaluated, 345 expanded
[t=0.0257915s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0258029s, 26380 KB] g=48, 356 evaluated, 355 expanded
[t=0.0258583s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0258682s, 26380 KB] g=48, 358 evaluated, 357 expanded
[t=0.0259889s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0260012s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0260097s, 26380 KB] g=50, 363 evaluated, 362 expanded
[t=0.0263816s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0264042s, 26380 KB] g=56, 379 evaluated, 378 expanded
[t=0.0265278s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0265393s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0265476s, 26380 KB] g=58, 384 evaluated, 383 expanded
[t=0.0266242s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0266347s, 26380 KB] g=58, 387 evaluated, 386 expanded
[t=0.0267311s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0267441s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0267524s, 26380 KB] g=60, 391 evaluated, 390 expanded
[t=0.0274588s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0275081s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0275299s, 26380 KB] g=68, 419 evaluated, 418 expanded
[t=0.0275877s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.027602s, 26380 KB] g=68, 421 evaluated, 420 expanded
[t=0.0276754s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0276866s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0276961s, 26380 KB] g=70, 424 evaluated, 423 expanded
[t=0.0286591s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0286767s, 26380 KB] g=90, 475 evaluated, 474 expanded
[t=0.028737s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0287481s, 26380 KB] g=92, 478 evaluated, 477 expanded
[t=0.0289046s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0289148s, 26380 KB] g=92, 487 evaluated, 486 expanded
[t=0.0289699s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0289824s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.028991s, 26380 KB] g=94, 490 evaluated, 489 expanded
[t=0.029165s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0291769s, 26380 KB] g=102, 501 evaluated, 500 expanded
[t=0.0292337s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0292463s, 26380 KB] g=106, 505 evaluated, 504 expanded
[t=0.0292643s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0292736s, 26380 KB] g=107, 506 evaluated, 505 expanded
[t=0.029289s, 26380 KB] Solution found!
[t=0.0293028s, 26380 KB] Actual search time: 0.0126992s
unstack b12 b11 (1)
put-down b12 (1)
unstack b11 b16 (1)
stack b11 b14 (1)
unstack b3 b17 (1)
stack b3 b5 (1)
unstack b16 b15 (1)
put-down b16 (1)
unstack b11 b14 (1)
put-down b11 (1)
unstack b14 b21 (1)
put-down b14 (1)
unstack b15 b13 (1)
put-down b15 (1)
unstack b17 b1 (1)
put-down b17 (1)
unstack b21 b7 (1)
put-down b21 (1)
unstack b7 b6 (1)
stack b7 b11 (1)
unstack b6 b18 (1)
stack b6 b3 (1)
unstack b18 b4 (1)
put-down b18 (1)
unstack b4 b19 (1)
put-down b4 (1)
unstack b19 b20 (1)
put-down b19 (1)
unstack b20 b9 (1)
put-down b20 (1)
unstack b9 b10 (1)
stack b9 b13 (1)
pick-up b4 (1)
stack b4 b9 (1)
pick-up b10 (1)
stack b10 b7 (1)
pick-up b14 (1)
stack b14 b1 (1)
pick-up b16 (1)
stack b16 b19 (1)
pick-up b18 (1)
stack b18 b16 (1)
pick-up b15 (1)
stack b15 b18 (1)
pick-up b21 (1)
stack b21 b6 (1)
pick-up b17 (1)
stack b17 b21 (1)
pick-up b20 (1)
stack b20 b17 (1)
unstack b4 b9 (1)
put-down b4 (1)
unstack b9 b13 (1)
put-down b9 (1)
unstack b13 b2 (1)
stack b13 b15 (1)
pick-up b9 (1)
stack b9 b13 (1)
pick-up b4 (1)
stack b4 b9 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b7 b11 (1)
put-down b7 (1)
pick-up b11 (1)
stack b11 b14 (1)
pick-up b7 (1)
stack b7 b11 (1)
pick-up b10 (1)
stack b10 b7 (1)
unstack b20 b17 (1)
put-down b20 (1)
unstack b17 b21 (1)
put-down b17 (1)
unstack b21 b6 (1)
put-down b21 (1)
pick-up b17 (1)
stack b17 b21 (1)
pick-up b20 (1)
stack b20 b17 (1)
unstack b6 b3 (1)
put-down b6 (1)
unstack b3 b5 (1)
put-down b3 (1)
unstack b5 b8 (1)
put-down b5 (1)
pick-up b8 (1)
stack b8 b10 (1)
pick-up b5 (1)
stack b5 b8 (1)
pick-up b3 (1)
stack b3 b5 (1)
pick-up b6 (1)
stack b6 b3 (1)
unstack b20 b17 (1)
put-down b20 (1)
unstack b17 b21 (1)
put-down b17 (1)
pick-up b20 (1)
stack b20 b17 (1)
pick-up b21 (1)
stack b21 b6 (1)
unstack b20 b17 (1)
put-down b20 (1)
pick-up b17 (1)
stack b17 b21 (1)
pick-up b20 (1)
stack b20 b17 (1)
[t=0.0293142s, 26380 KB] Plan length: 108 step(s).
[t=0.0293142s, 26380 KB] Plan cost: 108
[t=0.0293142s, 26380 KB] Expanded 506 state(s).
[t=0.0293142s, 26380 KB] Reopened 0 state(s).
[t=0.0293142s, 26380 KB] Evaluated 507 state(s).
[t=0.0293142s, 26380 KB] Evaluations: 1014
[t=0.0293142s, 26380 KB] Generated 4925 state(s).
[t=0.0293142s, 26380 KB] Dead ends: 0 state(s).
[t=0.0293142s, 26380 KB] Number of registered states: 507
[t=0.0293142s, 26380 KB] Int hash set load factor: 507/512 = 0.990234
[t=0.0293142s, 26380 KB] Int hash set resizes: 9
[t=0.0293142s, 26380 KB] Search time: 0.0127458s
[t=0.0293142s, 26380 KB] Total time: 0.0293142s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.16s
