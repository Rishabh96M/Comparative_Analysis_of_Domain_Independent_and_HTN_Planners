INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_46.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4271 total queue pushes
Completing instantiation... [0.020s CPU, 0.015s wall-clock]
Instantiating: [0.030s CPU, 0.025s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.022s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.010s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 18
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7603
Translator peak memory: 36456 KB
Writing output... [0.010s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.079s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=3.3113e-05s, 24488 KB] reading input...
[t=0.00286718s, 25268 KB] done reading input!
[t=0.0040793s, 25664 KB] Initializing landmark count heuristic...
[t=0.00414687s, 25664 KB] Generating landmark graph...
[t=0.00420854s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00427101s, 25664 KB] Initializing Exploration...
[t=0.00455366s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0127851s, 26248 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0128456s, 26248 KB] Landmarks generation time: 0.00863615s
[t=0.012859s, 26248 KB] Discovered 89 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0128767s, 26248 KB] 249 edges
[t=0.0128868s, 26248 KB] approx. reasonable orders
[t=0.0135057s, 26248 KB] approx. obedient reasonable orders
[t=0.0135266s, 26248 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0135371s, 26248 KB] Landmarks generation time: 0.00938639s
[t=0.0135461s, 26248 KB] Discovered 89 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0135542s, 26248 KB] 261 edges
[t=0.0135622s, 26248 KB] Landmark graph generation time: 0.00942222s
[t=0.0135707s, 26248 KB] Landmark graph contains 89 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0135786s, 26248 KB] Landmark graph contains 261 orderings.
[t=0.0138443s, 26248 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0146664s, 26380 KB] time to simplify: 0.00087698s
[t=0.0147744s, 26380 KB] Initializing additive heuristic...
[t=0.0147882s, 26380 KB] Initializing FF heuristic...
[t=0.0148356s, 26380 KB] Building successor generator...done!
[t=0.0150093s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0150187s, 26380 KB] time for successor generation creation: 0.000147294s
[t=0.0150305s, 26380 KB] Variables: 43
[t=0.0150386s, 26380 KB] FactPairs: 506
[t=0.015047s, 26380 KB] Bytes per state: 16
[t=0.0151269s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0151588s, 26380 KB] 42 initial landmarks, 18 goal landmarks
[t=0.0152024s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0152232s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0152414s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.0152549s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.015264s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0153978s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0154069s, 26380 KB] g=1, 6 evaluated, 5 expanded
[t=0.0154425s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0154512s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0154593s, 26380 KB] g=2, 7 evaluated, 6 expanded
[t=0.0156293s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0156385s, 26380 KB] g=4, 13 evaluated, 12 expanded
[t=0.0157386s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0157582s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0157664s, 26380 KB] g=4, 16 evaluated, 15 expanded
[t=0.0159208s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0159296s, 26380 KB] g=6, 22 evaluated, 21 expanded
[t=0.0160099s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0160187s, 26380 KB] g=6, 25 evaluated, 24 expanded
[t=0.0162589s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.016268s, 26380 KB] g=8, 35 evaluated, 34 expanded
[t=0.0165052s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.016517s, 26380 KB] g=10, 45 evaluated, 44 expanded
[t=0.0166646s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0166751s, 26380 KB] g=12, 51 evaluated, 50 expanded
[t=0.0168406s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0168561s, 26380 KB] g=13, 58 evaluated, 57 expanded
[t=0.017395s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0174161s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0174349s, 26380 KB] g=16, 81 evaluated, 80 expanded
[t=0.0180272s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0180404s, 26380 KB] g=19, 107 evaluated, 106 expanded
[t=0.0187218s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0187339s, 26380 KB] g=22, 136 evaluated, 135 expanded
[t=0.0189446s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0189542s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0189621s, 26380 KB] g=24, 145 evaluated, 144 expanded
[t=0.0191854s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0191941s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0192019s, 26380 KB] g=26, 155 evaluated, 154 expanded
[t=0.0194026s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0194113s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0194191s, 26380 KB] g=28, 164 evaluated, 163 expanded
[t=0.0197338s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.019743s, 26380 KB] g=31, 178 evaluated, 177 expanded
[t=0.0197748s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0197831s, 26380 KB] g=32, 179 evaluated, 178 expanded
[t=0.0199634s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0199721s, 26380 KB] g=34, 187 evaluated, 186 expanded
[t=0.020225s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0202346s, 26380 KB] g=36, 198 evaluated, 197 expanded
[t=0.0204851s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0204942s, 26380 KB] g=38, 209 evaluated, 208 expanded
[t=0.0209913s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0210005s, 26380 KB] g=40, 232 evaluated, 231 expanded
[t=0.0211366s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0211452s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.021153s, 26380 KB] g=42, 238 evaluated, 237 expanded
[t=0.0215942s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0216038s, 26380 KB] g=47, 258 evaluated, 257 expanded
[t=0.0216384s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0216466s, 26380 KB] g=48, 259 evaluated, 258 expanded
[t=0.0218099s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0218188s, 26380 KB] g=50, 266 evaluated, 265 expanded
[t=0.0220063s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0220179s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0220265s, 26380 KB] g=52, 274 evaluated, 273 expanded
[t=0.0221951s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0222041s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.022212s, 26380 KB] g=54, 281 evaluated, 280 expanded
[t=0.0223591s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0223694s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.022378s, 26380 KB] g=56, 287 evaluated, 286 expanded
[t=0.0224995s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0225091s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0225173s, 26380 KB] g=58, 292 evaluated, 291 expanded
[t=0.0226348s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0226436s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0226517s, 26380 KB] g=60, 297 evaluated, 296 expanded
[t=0.0228347s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0228437s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0228514s, 26380 KB] g=64, 305 evaluated, 304 expanded
[t=0.0229461s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0229634s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0229713s, 26380 KB] g=66, 309 evaluated, 308 expanded
[t=0.0237927s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0238021s, 26380 KB] g=76, 347 evaluated, 346 expanded
[t=0.023896s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0239043s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.023912s, 26380 KB] g=78, 351 evaluated, 350 expanded
[t=0.0241074s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0241166s, 26380 KB] g=82, 360 evaluated, 359 expanded
[t=0.0241878s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0241968s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0242047s, 26380 KB] g=84, 363 evaluated, 362 expanded
[t=0.0291756s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0292063s, 26380 KB] g=118, 614 evaluated, 613 expanded
[t=0.029381s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0293918s, 26380 KB] g=122, 623 evaluated, 622 expanded
[t=0.0294548s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.029464s, 26380 KB] g=124, 626 evaluated, 625 expanded
[t=0.0300469s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0300637s, 26380 KB] g=140, 663 evaluated, 662 expanded
[t=0.0302088s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0302191s, 26380 KB] g=148, 674 evaluated, 673 expanded
[t=0.0302356s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.030245s, 26380 KB] g=149, 675 evaluated, 674 expanded
[t=0.0302712s, 26380 KB] Solution found!
[t=0.0302894s, 26380 KB] Actual search time: 0.0151299s
unstack b21 b7 (1)
stack b21 b13 (1)
unstack b17 b2 (1)
stack b17 b5 (1)
pick-up b2 (1)
stack b2 b11 (1)
unstack b10 b20 (1)
put-down b10 (1)
unstack b7 b15 (1)
put-down b7 (1)
unstack b15 b8 (1)
put-down b15 (1)
unstack b8 b12 (1)
put-down b8 (1)
pick-up b7 (1)
stack b7 b12 (1)
unstack b2 b11 (1)
put-down b2 (1)
unstack b11 b9 (1)
put-down b11 (1)
unstack b9 b19 (1)
stack b9 b2 (1)
unstack b19 b18 (1)
put-down b19 (1)
pick-up b11 (1)
stack b11 b19 (1)
pick-up b18 (1)
stack b18 b20 (1)
unstack b17 b5 (1)
put-down b17 (1)
unstack b5 b4 (1)
stack b5 b9 (1)
pick-up b10 (1)
stack b10 b4 (1)
pick-up b17 (1)
stack b17 b5 (1)
unstack b10 b4 (1)
put-down b10 (1)
pick-up b4 (1)
stack b4 b17 (1)
pick-up b10 (1)
stack b10 b4 (1)
unstack b21 b13 (1)
put-down b21 (1)
unstack b13 b16 (1)
put-down b13 (1)
unstack b16 b14 (1)
stack b16 b10 (1)
unstack b14 b3 (1)
put-down b14 (1)
unstack b3 b6 (1)
stack b3 b7 (1)
pick-up b13 (1)
stack b13 b16 (1)
pick-up b8 (1)
stack b8 b3 (1)
pick-up b15 (1)
stack b15 b14 (1)
pick-up b21 (1)
stack b21 b13 (1)
unstack b6 b1 (1)
put-down b6 (1)
pick-up b1 (1)
stack b1 b15 (1)
pick-up b6 (1)
stack b6 b1 (1)
unstack b8 b3 (1)
put-down b8 (1)
unstack b3 b7 (1)
put-down b3 (1)
pick-up b8 (1)
stack b8 b3 (1)
unstack b7 b12 (1)
put-down b7 (1)
pick-up b12 (1)
stack b12 b6 (1)
pick-up b7 (1)
stack b7 b12 (1)
unstack b8 b3 (1)
put-down b8 (1)
pick-up b3 (1)
stack b3 b7 (1)
pick-up b8 (1)
stack b8 b3 (1)
unstack b21 b13 (1)
put-down b21 (1)
unstack b13 b16 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b13 (1)
unstack b16 b10 (1)
put-down b16 (1)
unstack b10 b4 (1)
put-down b10 (1)
unstack b4 b17 (1)
put-down b4 (1)
pick-up b10 (1)
stack b10 b4 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b21 b13 (1)
put-down b21 (1)
pick-up b13 (1)
stack b13 b16 (1)
pick-up b21 (1)
stack b21 b13 (1)
unstack b17 b5 (1)
put-down b17 (1)
unstack b5 b9 (1)
put-down b5 (1)
pick-up b17 (1)
stack b17 b5 (1)
unstack b9 b2 (1)
put-down b9 (1)
pick-up b2 (1)
stack b2 b11 (1)
pick-up b9 (1)
stack b9 b2 (1)
unstack b17 b5 (1)
put-down b17 (1)
pick-up b5 (1)
stack b5 b9 (1)
pick-up b17 (1)
stack b17 b5 (1)
unstack b21 b13 (1)
put-down b21 (1)
unstack b13 b16 (1)
put-down b13 (1)
unstack b16 b10 (1)
put-down b16 (1)
pick-up b13 (1)
stack b13 b16 (1)
pick-up b21 (1)
stack b21 b13 (1)
unstack b10 b4 (1)
put-down b10 (1)
pick-up b4 (1)
stack b4 b17 (1)
pick-up b10 (1)
stack b10 b4 (1)
unstack b21 b13 (1)
put-down b21 (1)
unstack b13 b16 (1)
put-down b13 (1)
pick-up b16 (1)
stack b16 b10 (1)
pick-up b13 (1)
stack b13 b16 (1)
pick-up b21 (1)
stack b21 b13 (1)
[t=0.0303009s, 26380 KB] Plan length: 150 step(s).
[t=0.0303009s, 26380 KB] Plan cost: 150
[t=0.0303009s, 26380 KB] Expanded 675 state(s).
[t=0.0303009s, 26380 KB] Reopened 0 state(s).
[t=0.0303009s, 26380 KB] Evaluated 676 state(s).
[t=0.0303009s, 26380 KB] Evaluations: 1352
[t=0.0303009s, 26380 KB] Generated 5373 state(s).
[t=0.0303009s, 26380 KB] Dead ends: 0 state(s).
[t=0.0303009s, 26380 KB] Number of registered states: 676
[t=0.0303009s, 26380 KB] Int hash set load factor: 676/1024 = 0.660156
[t=0.0303009s, 26380 KB] Int hash set resizes: 10
[t=0.0303009s, 26380 KB] Search time: 0.0151743s
[t=0.0303009s, 26380 KB] Total time: 0.0303009s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.16s
