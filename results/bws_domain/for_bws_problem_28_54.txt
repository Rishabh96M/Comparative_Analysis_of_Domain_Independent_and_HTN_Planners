INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_28/bws_problem_28_54.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.016s wall-clock]
2550 relevant atoms
1708 auxiliary atoms
4258 final queue length
7455 total queue pushes
Completing instantiation... [0.020s CPU, 0.028s wall-clock]
Instantiating: [0.040s CPU, 0.047s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
29 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.047s wall-clock]
2324 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
56 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.020s wall-clock]
Reordering and filtering variables...
57 of 57 variables necessary.
29 of 57 mutex groups necessary.
1568 of 1568 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.010s wall-clock]
Translator variables: 57
Translator derived variables: 0
Translator facts: 870
Translator goal facts: 25
Translator mutex groups: 29
Translator total mutex groups size: 841
Translator operators: 1568
Translator axioms: 0
Translator task size: 13469
Translator peak memory: 40316 KB
Writing output... [0.010s CPU, 0.008s wall-clock]
Done! [0.150s CPU, 0.147s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.0476e-05s, 24488 KB] reading input...
[t=0.00470245s, 26076 KB] done reading input!
[t=0.00588609s, 26472 KB] Initializing landmark count heuristic...
[t=0.00594346s, 26472 KB] Generating landmark graph...
[t=0.00603241s, 26604 KB] Building a landmark graph with reasonable orders.
[t=0.00612163s, 26604 KB] Initializing Exploration...
[t=0.00656569s, 27016 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0270059s, 27676 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0271006s, 27676 KB] Landmarks generation time: 0.0210711s
[t=0.027124s, 27676 KB] Discovered 121 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0271403s, 27676 KB] 560 edges
[t=0.02715s, 27676 KB] approx. reasonable orders
[t=0.028196s, 27676 KB] approx. obedient reasonable orders
[t=0.0282321s, 27676 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0282419s, 27676 KB] Landmarks generation time: 0.0222963s
[t=0.0282522s, 27676 KB] Discovered 121 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0282602s, 27676 KB] 575 edges
[t=0.0282689s, 27676 KB] Landmark graph generation time: 0.0223327s
[t=0.0282777s, 27676 KB] Landmark graph contains 121 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.028286s, 27676 KB] Landmark graph contains 575 orderings.
[t=0.0289618s, 27696 KB] Simplifying 6216 unary operators... done! [4704 unary operators]
[t=0.0306623s, 27828 KB] time to simplify: 0.00183421s
[t=0.0308998s, 27828 KB] Initializing additive heuristic...
[t=0.0309207s, 27828 KB] Initializing FF heuristic...
[t=0.0309999s, 27828 KB] Building successor generator...done!
[t=0.0313132s, 27828 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0313225s, 27828 KB] time for successor generation creation: 0.000275625s
[t=0.0313433s, 27828 KB] Variables: 57
[t=0.0313526s, 27828 KB] FactPairs: 870
[t=0.0313606s, 27828 KB] Bytes per state: 24
[t=0.0314915s, 27828 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0315424s, 27828 KB] 55 initial landmarks, 25 goal landmarks
[t=0.0316196s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.03163s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0316385s, 27828 KB] g=0, 1 evaluated, 0 expanded
[t=0.0316543s, 27828 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0316635s, 27828 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0319293s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0319389s, 27828 KB] g=2, 7 evaluated, 6 expanded
[t=0.0324662s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0324769s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0324851s, 27828 KB] g=4, 21 evaluated, 20 expanded
[t=0.0327284s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0327397s, 27828 KB] g=6, 27 evaluated, 26 expanded
[t=0.033264s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0332736s, 27828 KB] g=8, 41 evaluated, 40 expanded
[t=0.0335633s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.033573s, 27828 KB] g=10, 49 evaluated, 48 expanded
[t=0.0341844s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0342019s, 27828 KB] g=12, 65 evaluated, 64 expanded
[t=0.0344967s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0345065s, 27828 KB] g=8, 73 evaluated, 72 expanded
[t=0.0347591s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0347679s, 27828 KB] g=14, 80 evaluated, 79 expanded
[t=0.0352332s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0352484s, 27828 KB] g=16, 92 evaluated, 91 expanded
[t=0.0354857s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0355127s, 27828 KB] g=17, 98 evaluated, 97 expanded
[t=0.0355823s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0355916s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0356s, 27828 KB] g=18, 99 evaluated, 98 expanded
[t=0.0360406s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0360554s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0360641s, 27828 KB] g=20, 110 evaluated, 109 expanded
[t=0.0365234s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0365602s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.036569s, 27828 KB] g=22, 120 evaluated, 119 expanded
[t=0.0369619s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.036972s, 27828 KB] g=24, 130 evaluated, 129 expanded
[t=0.0371154s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0371341s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0371567s, 27828 KB] g=24, 133 evaluated, 132 expanded
[t=0.0375418s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0375583s, 27828 KB] g=26, 142 evaluated, 141 expanded
[t=0.0379168s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0379264s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0379344s, 27828 KB] g=28, 152 evaluated, 151 expanded
[t=0.0382918s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0383012s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0383091s, 27828 KB] g=30, 162 evaluated, 161 expanded
[t=0.0384267s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0384355s, 27828 KB] g=31, 165 evaluated, 164 expanded
[t=0.0384818s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0384902s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0385067s, 27828 KB] g=32, 166 evaluated, 165 expanded
[t=0.0389058s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0389153s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0389235s, 27828 KB] g=34, 177 evaluated, 176 expanded
[t=0.0393375s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0393467s, 27828 KB] g=37, 188 evaluated, 187 expanded
[t=0.0393961s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0394049s, 27828 KB] g=38, 189 evaluated, 188 expanded
[t=0.0397734s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0397825s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0397902s, 27828 KB] g=40, 199 evaluated, 198 expanded
[t=0.0401678s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0401789s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.040192s, 27828 KB] g=42, 209 evaluated, 208 expanded
[t=0.0405859s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0405958s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.040604s, 27828 KB] g=44, 219 evaluated, 218 expanded
[t=0.0409815s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0409955s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0410101s, 27828 KB] g=46, 229 evaluated, 228 expanded
[t=0.0414184s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0414286s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0414375s, 27828 KB] g=48, 240 evaluated, 239 expanded
[t=0.0417691s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0417788s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0417864s, 27828 KB] g=50, 249 evaluated, 248 expanded
[t=0.0420927s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0421016s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0421104s, 27828 KB] g=52, 257 evaluated, 256 expanded
[t=0.0423724s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0423837s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0423921s, 27828 KB] g=54, 264 evaluated, 263 expanded
[t=0.0449364s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0449593s, 27828 KB] g=62, 334 evaluated, 333 expanded
[t=0.0453887s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0453994s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0454108s, 27828 KB] g=64, 346 evaluated, 345 expanded
[t=0.0510547s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0511065s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0511168s, 27828 KB] g=72, 504 evaluated, 503 expanded
[t=0.0513437s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0513534s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0513616s, 27828 KB] g=74, 510 evaluated, 509 expanded
[t=0.0546103s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0546337s, 27828 KB] g=82, 600 evaluated, 599 expanded
[t=0.0547925s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0548027s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0548109s, 27828 KB] g=84, 604 evaluated, 603 expanded
[t=0.0570468s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0570642s, 27828 KB] g=94, 668 evaluated, 667 expanded
[t=0.057214s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0572237s, 27828 KB] g=96, 672 evaluated, 671 expanded
[t=0.0577196s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0577421s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0577537s, 27828 KB] g=102, 686 evaluated, 685 expanded
[t=0.0652575s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0653298s, 27828 KB] g=126, 897 evaluated, 896 expanded
[t=0.0655154s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0655258s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0655337s, 27828 KB] g=128, 902 evaluated, 901 expanded
[t=0.0661002s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0661117s, 27828 KB] g=132, 918 evaluated, 917 expanded
[t=0.0662728s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0662829s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0662919s, 27828 KB] g=134, 922 evaluated, 921 expanded
[t=0.0673938s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0674116s, 27828 KB] g=142, 953 evaluated, 952 expanded
[t=0.0675224s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.067532s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0675409s, 27828 KB] g=144, 956 evaluated, 955 expanded
[t=0.0862905s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0863669s, 27828 KB] g=186, 1596 evaluated, 1595 expanded
[t=0.0870401s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0870516s, 27828 KB] g=194, 1624 evaluated, 1623 expanded
[t=0.0871261s, 27828 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0871358s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0871437s, 27828 KB] g=196, 1627 evaluated, 1626 expanded
[t=0.0879972s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0880078s, 27828 KB] g=212, 1668 evaluated, 1667 expanded
[t=0.0881978s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0882068s, 27828 KB] g=220, 1679 evaluated, 1678 expanded
[t=0.0882261s, 27828 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0882353s, 27828 KB] g=221, 1680 evaluated, 1679 expanded
[t=0.0882515s, 27828 KB] Solution found!
[t=0.0882667s, 27828 KB] Actual search time: 0.0567202s
unstack b11 b9 (1)
put-down b11 (1)
unstack b9 b13 (1)
put-down b9 (1)
unstack b24 b5 (1)
put-down b24 (1)
unstack b25 b8 (1)
put-down b25 (1)
unstack b28 b23 (1)
put-down b28 (1)
unstack b3 b4 (1)
put-down b3 (1)
unstack b4 b19 (1)
stack b4 b24 (1)
unstack b8 b27 (1)
put-down b8 (1)
unstack b27 b7 (1)
stack b27 b13 (1)
unstack b7 b2 (1)
stack b7 b19 (1)
unstack b2 b14 (1)
stack b2 b5 (1)
pick-up b3 (1)
stack b3 b7 (1)
unstack b14 b22 (1)
put-down b14 (1)
unstack b22 b18 (1)
stack b22 b11 (1)
unstack b18 b21 (1)
stack b18 b4 (1)
unstack b21 b1 (1)
stack b21 b9 (1)
pick-up b1 (1)
stack b1 b22 (1)
unstack b23 b10 (1)
put-down b23 (1)
unstack b10 b6 (1)
stack b10 b2 (1)
unstack b6 b17 (1)
stack b6 b28 (1)
unstack b17 b12 (1)
stack b17 b14 (1)
unstack b12 b20 (1)
stack b12 b18 (1)
unstack b20 b26 (1)
put-down b20 (1)
pick-up b23 (1)
stack b23 b10 (1)
pick-up b25 (1)
stack b25 b17 (1)
pick-up b26 (1)
stack b26 b3 (1)
pick-up b8 (1)
stack b8 b6 (1)
unstack b1 b22 (1)
put-down b1 (1)
unstack b22 b11 (1)
put-down b22 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b22 (1)
stack b22 b11 (1)
pick-up b1 (1)
stack b1 b22 (1)
unstack b25 b17 (1)
put-down b25 (1)
unstack b17 b14 (1)
put-down b17 (1)
pick-up b14 (1)
stack b14 b20 (1)
pick-up b17 (1)
stack b17 b14 (1)
pick-up b25 (1)
stack b25 b17 (1)
unstack b8 b6 (1)
put-down b8 (1)
unstack b6 b28 (1)
put-down b6 (1)
pick-up b28 (1)
stack b28 b26 (1)
pick-up b6 (1)
stack b6 b28 (1)
pick-up b8 (1)
stack b8 b6 (1)
unstack b23 b10 (1)
put-down b23 (1)
unstack b10 b2 (1)
put-down b10 (1)
pick-up b23 (1)
stack b23 b10 (1)
unstack b2 b5 (1)
put-down b2 (1)
pick-up b5 (1)
stack b5 b1 (1)
pick-up b2 (1)
stack b2 b5 (1)
unstack b23 b10 (1)
put-down b23 (1)
pick-up b10 (1)
stack b10 b2 (1)
pick-up b23 (1)
stack b23 b10 (1)
unstack b8 b6 (1)
put-down b8 (1)
unstack b6 b28 (1)
put-down b6 (1)
unstack b28 b26 (1)
put-down b28 (1)
pick-up b6 (1)
stack b6 b28 (1)
pick-up b8 (1)
stack b8 b6 (1)
unstack b26 b3 (1)
put-down b26 (1)
unstack b3 b7 (1)
put-down b3 (1)
pick-up b26 (1)
stack b26 b3 (1)
unstack b7 b19 (1)
put-down b7 (1)
unstack b19 b16 (1)
put-down b19 (1)
pick-up b16 (1)
stack b16 b25 (1)
pick-up b19 (1)
stack b19 b16 (1)
pick-up b7 (1)
stack b7 b19 (1)
unstack b26 b3 (1)
put-down b26 (1)
pick-up b3 (1)
stack b3 b7 (1)
pick-up b26 (1)
stack b26 b3 (1)
unstack b8 b6 (1)
put-down b8 (1)
unstack b6 b28 (1)
put-down b6 (1)
pick-up b28 (1)
stack b28 b26 (1)
pick-up b6 (1)
stack b6 b28 (1)
pick-up b8 (1)
stack b8 b6 (1)
unstack b23 b10 (1)
put-down b23 (1)
unstack b10 b2 (1)
put-down b10 (1)
pick-up b23 (1)
stack b23 b10 (1)
unstack b2 b5 (1)
put-down b2 (1)
unstack b5 b1 (1)
put-down b5 (1)
unstack b1 b22 (1)
put-down b1 (1)
pick-up b5 (1)
stack b5 b1 (1)
pick-up b2 (1)
stack b2 b5 (1)
unstack b23 b10 (1)
put-down b23 (1)
pick-up b10 (1)
stack b10 b2 (1)
pick-up b23 (1)
stack b23 b10 (1)
unstack b22 b11 (1)
put-down b22 (1)
unstack b11 b12 (1)
put-down b11 (1)
unstack b12 b18 (1)
put-down b12 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b22 (1)
stack b22 b11 (1)
unstack b18 b4 (1)
put-down b18 (1)
unstack b4 b24 (1)
put-down b4 (1)
pick-up b24 (1)
stack b24 b8 (1)
pick-up b4 (1)
stack b4 b24 (1)
pick-up b18 (1)
stack b18 b4 (1)
unstack b22 b11 (1)
put-down b22 (1)
unstack b11 b12 (1)
put-down b11 (1)
pick-up b12 (1)
stack b12 b18 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b22 (1)
stack b22 b11 (1)
unstack b23 b10 (1)
put-down b23 (1)
unstack b10 b2 (1)
put-down b10 (1)
unstack b2 b5 (1)
put-down b2 (1)
pick-up b10 (1)
stack b10 b2 (1)
pick-up b23 (1)
stack b23 b10 (1)
unstack b5 b1 (1)
put-down b5 (1)
pick-up b1 (1)
stack b1 b22 (1)
pick-up b5 (1)
stack b5 b1 (1)
unstack b23 b10 (1)
put-down b23 (1)
unstack b10 b2 (1)
put-down b10 (1)
pick-up b2 (1)
stack b2 b5 (1)
pick-up b10 (1)
stack b10 b2 (1)
pick-up b23 (1)
stack b23 b10 (1)
[t=0.0882763s, 27828 KB] Plan length: 222 step(s).
[t=0.0882763s, 27828 KB] Plan cost: 222
[t=0.0882763s, 27828 KB] Expanded 1680 state(s).
[t=0.0882763s, 27828 KB] Reopened 0 state(s).
[t=0.0882763s, 27828 KB] Evaluated 1681 state(s).
[t=0.0882763s, 27828 KB] Evaluations: 3362
[t=0.0882763s, 27828 KB] Generated 14774 state(s).
[t=0.0882763s, 27828 KB] Dead ends: 0 state(s).
[t=0.0882763s, 27828 KB] Number of registered states: 1681
[t=0.0882763s, 27828 KB] Int hash set load factor: 1681/2048 = 0.820801
[t=0.0882763s, 27828 KB] Int hash set resizes: 11
[t=0.0882763s, 27828 KB] Search time: 0.0567857s
[t=0.0882763s, 27828 KB] Total time: 0.0882763s
Solution found.
Peak memory: 27828 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.27s
