INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_22/bws_problem_22_41.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
1608 relevant atoms
1078 auxiliary atoms
2686 final queue length
4669 total queue pushes
Completing instantiation... [0.020s CPU, 0.019s wall-clock]
Instantiating: [0.030s CPU, 0.031s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.004s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
23 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.028s wall-clock]
1430 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
44 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.013s wall-clock]
Reordering and filtering variables...
45 of 45 variables necessary.
23 of 45 mutex groups necessary.
968 of 968 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.006s wall-clock]
Translator variables: 45
Translator derived variables: 0
Translator facts: 552
Translator goal facts: 18
Translator mutex groups: 23
Translator total mutex groups size: 529
Translator operators: 968
Translator axioms: 0
Translator task size: 8338
Translator peak memory: 36976 KB
Writing output... [0.000s CPU, 0.006s wall-clock]
Done! [0.090s CPU, 0.097s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=3.6607e-05s, 24488 KB] reading input...
[t=0.00310648s, 25340 KB] done reading input!
[t=0.00420737s, 25736 KB] Initializing landmark count heuristic...
[t=0.00424447s, 25736 KB] Generating landmark graph...
[t=0.00432298s, 25736 KB] Building a landmark graph with reasonable orders.
[t=0.00439473s, 25736 KB] Initializing Exploration...
[t=0.00466912s, 26000 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0153514s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0154202s, 26528 KB] Landmarks generation time: 0.0110989s
[t=0.0154343s, 26528 KB] Discovered 96 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0154501s, 26528 KB] 498 edges
[t=0.0154593s, 26528 KB] approx. reasonable orders
[t=0.0156527s, 26528 KB] approx. obedient reasonable orders
[t=0.0156781s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0156873s, 26528 KB] Landmarks generation time: 0.0114405s
[t=0.0156965s, 26528 KB] Discovered 96 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0157043s, 26528 KB] 502 edges
[t=0.0157121s, 26528 KB] Landmark graph generation time: 0.0114742s
[t=0.0157205s, 26528 KB] Landmark graph contains 96 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0157282s, 26528 KB] Landmark graph contains 502 orderings.
[t=0.0160436s, 26528 KB] Simplifying 3828 unary operators... done! [2904 unary operators]
[t=0.0170189s, 26528 KB] time to simplify: 0.00104456s
[t=0.0171555s, 26528 KB] Initializing additive heuristic...
[t=0.0171703s, 26528 KB] Initializing FF heuristic...
[t=0.0172285s, 26528 KB] Building successor generator...done!
[t=0.0174511s, 26528 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0174606s, 26528 KB] time for successor generation creation: 0.000192949s
[t=0.0174753s, 26528 KB] Variables: 45
[t=0.0174837s, 26528 KB] FactPairs: 552
[t=0.017492s, 26528 KB] Bytes per state: 20
[t=0.0176594s, 26528 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0177s, 26528 KB] 45 initial landmarks, 18 goal landmarks
[t=0.0177667s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0177775s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0177865s, 26528 KB] g=0, 1 evaluated, 0 expanded
[t=0.0178007s, 26528 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0178095s, 26528 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0179864s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0179994s, 26528 KB] g=2, 7 evaluated, 6 expanded
[t=0.0181343s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0181439s, 26528 KB] g=3, 12 evaluated, 11 expanded
[t=0.0183487s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.018359s, 26528 KB] g=6, 20 evaluated, 19 expanded
[t=0.0186289s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0186818s, 26528 KB] g=8, 30 evaluated, 29 expanded
[t=0.0188762s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0188899s, 26528 KB] g=6, 36 evaluated, 35 expanded
[t=0.0190366s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0190493s, 26528 KB] g=10, 41 evaluated, 40 expanded
[t=0.0192307s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0192405s, 26528 KB] g=8, 48 evaluated, 47 expanded
[t=0.0194818s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0194936s, 26528 KB] g=10, 58 evaluated, 57 expanded
[t=0.0195956s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0196058s, 26528 KB] g=12, 62 evaluated, 61 expanded
[t=0.0197357s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0197475s, 26528 KB] g=14, 67 evaluated, 66 expanded
[t=0.0198972s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.019921s, 26528 KB] g=16, 73 evaluated, 72 expanded
[t=0.0202809s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0202952s, 26528 KB] g=19, 87 evaluated, 86 expanded
[t=0.0205253s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0205474s, 26528 KB] g=12, 96 evaluated, 95 expanded
[t=0.0207464s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0207591s, 26528 KB] g=22, 104 evaluated, 103 expanded
[t=0.0210579s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0210724s, 26528 KB] g=16, 116 evaluated, 115 expanded
[t=0.0212735s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0212837s, 26528 KB] g=18, 124 evaluated, 123 expanded
[t=0.0213216s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0213312s, 26528 KB] g=24, 125 evaluated, 124 expanded
[t=0.0215409s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.021553s, 26528 KB] g=20, 133 evaluated, 132 expanded
[t=0.021828s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0218405s, 26528 KB] g=26, 144 evaluated, 143 expanded
[t=0.0223198s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0223345s, 26528 KB] g=28, 162 evaluated, 161 expanded
[t=0.0227412s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0227539s, 26528 KB] g=30, 178 evaluated, 177 expanded
[t=0.0229828s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0229983s, 26528 KB] g=30, 187 evaluated, 186 expanded
[t=0.023205s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0232163s, 26528 KB] g=32, 195 evaluated, 194 expanded
[t=0.0232677s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0232769s, 26528 KB] g=32, 196 evaluated, 195 expanded
[t=0.0236778s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0236933s, 26528 KB] g=34, 209 evaluated, 208 expanded
[t=0.0237563s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0237662s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0237747s, 26528 KB] g=34, 211 evaluated, 210 expanded
[t=0.0239531s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0239629s, 26528 KB] g=36, 218 evaluated, 217 expanded
[t=0.0241395s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.024149s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0241573s, 26528 KB] g=38, 225 evaluated, 224 expanded
[t=0.0246368s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0246505s, 26528 KB] g=42, 245 evaluated, 244 expanded
[t=0.0248105s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.024823s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0248311s, 26528 KB] g=44, 251 evaluated, 250 expanded
[t=0.026391s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0264096s, 26528 KB] g=56, 314 evaluated, 313 expanded
[t=0.0266369s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0266463s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0266546s, 26528 KB] g=58, 323 evaluated, 322 expanded
[t=0.026854s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0268632s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0268714s, 26528 KB] g=60, 331 evaluated, 330 expanded
[t=0.0270671s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0270769s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0270851s, 26528 KB] g=62, 339 evaluated, 338 expanded
[t=0.0272946s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0273185s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0273268s, 26528 KB] g=64, 347 evaluated, 346 expanded
[t=0.027481s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0274931s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0275013s, 26528 KB] g=66, 353 evaluated, 352 expanded
[t=0.0276503s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.027661s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0276698s, 26528 KB] g=68, 359 evaluated, 358 expanded
[t=0.0279289s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.027948s, 26528 KB] g=71, 370 evaluated, 369 expanded
[t=0.0279867s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0279961s, 26528 KB] g=72, 371 evaluated, 370 expanded
[t=0.0281181s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0281265s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0281346s, 26528 KB] g=74, 376 evaluated, 375 expanded
[t=0.0282572s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0282658s, 26528 KB] g=77, 381 evaluated, 380 expanded
[t=0.0283249s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0283334s, 26528 KB] g=78, 383 evaluated, 382 expanded
[t=0.0284332s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0284454s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0284539s, 26528 KB] g=80, 387 evaluated, 386 expanded
[t=0.0288315s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0288545s, 26528 KB] g=84, 398 evaluated, 397 expanded
[t=0.0289495s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0289582s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0289662s, 26528 KB] g=86, 402 evaluated, 401 expanded
[t=0.0299985s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0300157s, 26528 KB] g=98, 448 evaluated, 447 expanded
[t=0.030183s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0301922s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0302004s, 26528 KB] g=104, 455 evaluated, 454 expanded
[t=0.0326968s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0327095s, 26528 KB] g=130, 581 evaluated, 580 expanded
[t=0.0329061s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0329201s, 26528 KB] g=134, 590 evaluated, 589 expanded
[t=0.0329979s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0330103s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0330239s, 26528 KB] g=136, 593 evaluated, 592 expanded
[t=0.033732s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0337473s, 26528 KB] g=152, 630 evaluated, 629 expanded
[t=0.0339615s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0339752s, 26528 KB] g=160, 641 evaluated, 640 expanded
[t=0.0340021s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.034014s, 26528 KB] g=160, 642 evaluated, 641 expanded
[t=0.0340313s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0340401s, 26528 KB] g=161, 643 evaluated, 642 expanded
[t=0.0340554s, 26528 KB] Solution found!
[t=0.0340676s, 26528 KB] Actual search time: 0.0163635s
unstack b19 b22 (1)
put-down b19 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b21 (1)
put-down b16 (1)
unstack b21 b3 (1)
put-down b21 (1)
pick-up b19 (1)
stack b19 b3 (1)
unstack b2 b1 (1)
put-down b2 (1)
unstack b1 b13 (1)
put-down b1 (1)
unstack b13 b11 (1)
put-down b13 (1)
unstack b11 b18 (1)
put-down b11 (1)
unstack b18 b20 (1)
put-down b18 (1)
unstack b20 b6 (1)
stack b20 b13 (1)
unstack b6 b5 (1)
stack b6 b16 (1)
unstack b5 b10 (1)
stack b5 b19 (1)
unstack b10 b14 (1)
put-down b10 (1)
pick-up b1 (1)
stack b1 b5 (1)
pick-up b11 (1)
stack b11 b18 (1)
pick-up b2 (1)
stack b2 b6 (1)
unstack b14 b7 (1)
put-down b14 (1)
pick-up b7 (1)
stack b7 b1 (1)
unstack b20 b13 (1)
put-down b20 (1)
pick-up b13 (1)
stack b13 b14 (1)
pick-up b20 (1)
stack b20 b13 (1)
unstack b7 b1 (1)
put-down b7 (1)
unstack b1 b5 (1)
put-down b1 (1)
pick-up b7 (1)
stack b7 b1 (1)
unstack b5 b19 (1)
put-down b5 (1)
unstack b19 b3 (1)
put-down b19 (1)
unstack b3 b4 (1)
stack b3 b2 (1)
pick-up b19 (1)
stack b19 b3 (1)
unstack b4 b9 (1)
stack b4 b10 (1)
unstack b9 b8 (1)
put-down b9 (1)
pick-up b17 (1)
stack b17 b8 (1)
pick-up b22 (1)
stack b22 b9 (1)
pick-up b5 (1)
stack b5 b19 (1)
unstack b17 b8 (1)
put-down b17 (1)
unstack b8 b12 (1)
stack b8 b11 (1)
pick-up b17 (1)
stack b17 b8 (1)
unstack b12 b15 (1)
put-down b12 (1)
pick-up b15 (1)
stack b15 b20 (1)
pick-up b12 (1)
stack b12 b15 (1)
unstack b7 b1 (1)
put-down b7 (1)
pick-up b1 (1)
stack b1 b5 (1)
pick-up b7 (1)
stack b7 b1 (1)
unstack b17 b8 (1)
put-down b17 (1)
unstack b8 b11 (1)
put-down b8 (1)
pick-up b17 (1)
stack b17 b8 (1)
unstack b11 b18 (1)
put-down b11 (1)
pick-up b18 (1)
stack b18 b12 (1)
unstack b17 b8 (1)
put-down b17 (1)
pick-up b8 (1)
stack b8 b11 (1)
pick-up b17 (1)
stack b17 b8 (1)
unstack b18 b12 (1)
put-down b18 (1)
unstack b12 b15 (1)
put-down b12 (1)
pick-up b18 (1)
stack b18 b12 (1)
unstack b17 b8 (1)
put-down b17 (1)
unstack b8 b11 (1)
put-down b8 (1)
pick-up b11 (1)
stack b11 b18 (1)
pick-up b8 (1)
stack b8 b11 (1)
pick-up b17 (1)
stack b17 b8 (1)
unstack b15 b20 (1)
put-down b15 (1)
unstack b20 b13 (1)
put-down b20 (1)
pick-up b15 (1)
stack b15 b20 (1)
unstack b13 b14 (1)
put-down b13 (1)
pick-up b14 (1)
stack b14 b4 (1)
pick-up b13 (1)
stack b13 b14 (1)
unstack b15 b20 (1)
put-down b15 (1)
pick-up b20 (1)
stack b20 b13 (1)
pick-up b15 (1)
stack b15 b20 (1)
unstack b17 b8 (1)
put-down b17 (1)
unstack b8 b11 (1)
put-down b8 (1)
unstack b11 b18 (1)
put-down b11 (1)
pick-up b8 (1)
stack b8 b11 (1)
pick-up b17 (1)
stack b17 b8 (1)
unstack b18 b12 (1)
put-down b18 (1)
pick-up b12 (1)
stack b12 b15 (1)
pick-up b18 (1)
stack b18 b12 (1)
unstack b17 b8 (1)
put-down b17 (1)
unstack b8 b11 (1)
put-down b8 (1)
pick-up b11 (1)
stack b11 b18 (1)
pick-up b8 (1)
stack b8 b11 (1)
pick-up b17 (1)
stack b17 b8 (1)
[t=0.0340771s, 26528 KB] Plan length: 162 step(s).
[t=0.0340771s, 26528 KB] Plan cost: 162
[t=0.0340771s, 26528 KB] Expanded 643 state(s).
[t=0.0340771s, 26528 KB] Reopened 0 state(s).
[t=0.0340771s, 26528 KB] Evaluated 644 state(s).
[t=0.0340771s, 26528 KB] Evaluations: 1288
[t=0.0340771s, 26528 KB] Generated 5655 state(s).
[t=0.0340771s, 26528 KB] Dead ends: 0 state(s).
[t=0.0340771s, 26528 KB] Number of registered states: 644
[t=0.0340771s, 26528 KB] Int hash set load factor: 644/1024 = 0.628906
[t=0.0340771s, 26528 KB] Int hash set resizes: 10
[t=0.0340771s, 26528 KB] Search time: 0.0164187s
[t=0.0340771s, 26528 KB] Total time: 0.0340771s
Solution found.
Peak memory: 26528 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.17s
