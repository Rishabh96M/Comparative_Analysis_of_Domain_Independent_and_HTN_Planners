INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_23/bws_problem_23_49.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.011s wall-clock]
1750 relevant atoms
1173 auxiliary atoms
2923 final queue length
5091 total queue pushes
Completing instantiation... [0.020s CPU, 0.018s wall-clock]
Instantiating: [0.030s CPU, 0.030s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
24 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.020s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.027s wall-clock]
1564 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
46 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.012s wall-clock]
Reordering and filtering variables...
47 of 47 variables necessary.
24 of 47 mutex groups necessary.
1058 of 1058 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.007s wall-clock]
Translator variables: 47
Translator derived variables: 0
Translator facts: 600
Translator goal facts: 18
Translator mutex groups: 24
Translator total mutex groups size: 576
Translator operators: 1058
Translator axioms: 0
Translator task size: 9107
Translator peak memory: 37488 KB
Writing output... [0.010s CPU, 0.006s wall-clock]
Done! [0.100s CPU, 0.093s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.0306e-05s, 24488 KB] reading input...
[t=0.00292473s, 25428 KB] done reading input!
[t=0.0037346s, 25824 KB] Initializing landmark count heuristic...
[t=0.00376195s, 25824 KB] Generating landmark graph...
[t=0.00382823s, 25824 KB] Building a landmark graph with reasonable orders.
[t=0.00389266s, 25956 KB] Initializing Exploration...
[t=0.00419889s, 26256 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0160135s, 26652 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0160997s, 26652 KB] Landmarks generation time: 0.0122728s
[t=0.0161144s, 26652 KB] Discovered 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0161315s, 26652 KB] 413 edges
[t=0.0161417s, 26652 KB] approx. reasonable orders
[t=0.0167068s, 26652 KB] approx. obedient reasonable orders
[t=0.0167345s, 26652 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0167436s, 26652 KB] Landmarks generation time: 0.0129789s
[t=0.0167531s, 26652 KB] Discovered 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0167613s, 26652 KB] 421 edges
[t=0.0167703s, 26652 KB] Landmark graph generation time: 0.0130154s
[t=0.0167791s, 26652 KB] Landmark graph contains 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0167874s, 26652 KB] Landmark graph contains 421 orderings.
[t=0.0171487s, 26652 KB] Simplifying 4186 unary operators... done! [3174 unary operators]
[t=0.018159s, 26652 KB] time to simplify: 0.0010777s
[t=0.0182943s, 26652 KB] Initializing additive heuristic...
[t=0.0183092s, 26652 KB] Initializing FF heuristic...
[t=0.0183595s, 26652 KB] Building successor generator...done!
[t=0.0185845s, 26792 KB] peak memory difference for successor generator creation: 140 KB
[t=0.0185929s, 26792 KB] time for successor generation creation: 0.000192404s
[t=0.0186054s, 26792 KB] Variables: 47
[t=0.0186137s, 26792 KB] FactPairs: 600
[t=0.0186218s, 26792 KB] Bytes per state: 20
[t=0.0187035s, 26792 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0187356s, 26792 KB] 46 initial landmarks, 18 goal landmarks
[t=0.0187902s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0187999s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0188082s, 26792 KB] g=0, 1 evaluated, 0 expanded
[t=0.0188224s, 26792 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0188307s, 26792 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0190339s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0190436s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0190523s, 26792 KB] g=2, 8 evaluated, 7 expanded
[t=0.0192387s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0192482s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0192577s, 26792 KB] g=4, 15 evaluated, 14 expanded
[t=0.0194015s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0194105s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0194198s, 26792 KB] g=6, 20 evaluated, 19 expanded
[t=0.0195577s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0195667s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0195744s, 26792 KB] g=8, 25 evaluated, 24 expanded
[t=0.0197366s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.019745s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0197527s, 26792 KB] g=10, 31 evaluated, 30 expanded
[t=0.0198882s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0198969s, 26792 KB] g=12, 36 evaluated, 35 expanded
[t=0.019931s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0199397s, 26792 KB] g=12, 37 evaluated, 36 expanded
[t=0.0201777s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0201872s, 26792 KB] g=14, 46 evaluated, 45 expanded
[t=0.0202742s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0202883s, 26792 KB] g=14, 49 evaluated, 48 expanded
[t=0.0206176s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0206279s, 26792 KB] g=16, 61 evaluated, 60 expanded
[t=0.020668s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0206773s, 26792 KB] g=18, 62 evaluated, 61 expanded
[t=0.0209352s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.020945s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0209533s, 26792 KB] g=20, 71 evaluated, 70 expanded
[t=0.0210972s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0211065s, 26792 KB] g=22, 76 evaluated, 75 expanded
[t=0.0211724s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0211815s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0211897s, 26792 KB] g=22, 78 evaluated, 77 expanded
[t=0.0213061s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0213151s, 26792 KB] g=24, 82 evaluated, 81 expanded
[t=0.0214381s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0214492s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0214574s, 26792 KB] g=26, 86 evaluated, 85 expanded
[t=0.0215495s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0215585s, 26792 KB] g=27, 89 evaluated, 88 expanded
[t=0.0215955s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0216042s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0216121s, 26792 KB] g=28, 90 evaluated, 89 expanded
[t=0.021731s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0217399s, 26792 KB] g=29, 94 evaluated, 93 expanded
[t=0.0217759s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0217846s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0217925s, 26792 KB] g=30, 95 evaluated, 94 expanded
[t=0.0219048s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0219136s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0219214s, 26792 KB] g=32, 99 evaluated, 98 expanded
[t=0.0220565s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0220659s, 26792 KB] g=34, 104 evaluated, 103 expanded
[t=0.0222515s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0222602s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0222681s, 26792 KB] g=36, 111 evaluated, 110 expanded
[t=0.0224228s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0224333s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0224419s, 26792 KB] g=38, 116 evaluated, 115 expanded
[t=0.0226345s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0226475s, 26792 KB] g=41, 123 evaluated, 122 expanded
[t=0.0226837s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0226927s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0227001s, 26792 KB] g=42, 124 evaluated, 123 expanded
[t=0.0228431s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0228516s, 26792 KB] g=44, 129 evaluated, 128 expanded
[t=0.0229048s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0229135s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0229214s, 26792 KB] g=44, 130 evaluated, 129 expanded
[t=0.0230639s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0230743s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0230832s, 26792 KB] g=46, 135 evaluated, 134 expanded
[t=0.0232114s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0232202s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0232299s, 26792 KB] g=48, 139 evaluated, 138 expanded
[t=0.0233179s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0233265s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0233349s, 26792 KB] g=50, 142 evaluated, 141 expanded
[t=0.02447s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0244935s, 26792 KB] g=70, 192 evaluated, 191 expanded
[t=0.024571s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0245808s, 26792 KB] g=72, 195 evaluated, 194 expanded
[t=0.0247805s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0247953s, 26792 KB] g=72, 204 evaluated, 203 expanded
[t=0.0248725s, 26792 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0248842s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0248927s, 26792 KB] g=74, 207 evaluated, 206 expanded
[t=0.0250904s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0251019s, 26792 KB] g=82, 219 evaluated, 218 expanded
[t=0.0251202s, 26792 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0251288s, 26792 KB] g=83, 220 evaluated, 219 expanded
[t=0.0251443s, 26792 KB] Solution found!
[t=0.0251556s, 26792 KB] Actual search time: 0.00641797s
unstack b6 b22 (1)
put-down b6 (1)
unstack b10 b2 (1)
stack b10 b12 (1)
unstack b21 b20 (1)
stack b21 b10 (1)
unstack b20 b3 (1)
put-down b20 (1)
unstack b22 b5 (1)
stack b22 b21 (1)
pick-up b11 (1)
stack b11 b8 (1)
pick-up b5 (1)
stack b5 b2 (1)
unstack b3 b17 (1)
put-down b3 (1)
unstack b17 b18 (1)
stack b17 b22 (1)
unstack b18 b1 (1)
put-down b18 (1)
pick-up b3 (1)
stack b3 b18 (1)
unstack b1 b13 (1)
put-down b1 (1)
unstack b13 b14 (1)
put-down b13 (1)
unstack b14 b4 (1)
stack b14 b5 (1)
unstack b4 b7 (1)
stack b4 b17 (1)
unstack b7 b9 (1)
stack b7 b20 (1)
unstack b11 b8 (1)
put-down b11 (1)
pick-up b8 (1)
stack b8 b3 (1)
pick-up b11 (1)
stack b11 b8 (1)
unstack b9 b15 (1)
put-down b9 (1)
unstack b15 b23 (1)
stack b15 b11 (1)
unstack b23 b19 (1)
stack b23 b13 (1)
pick-up b1 (1)
stack b1 b23 (1)
pick-up b19 (1)
stack b19 b7 (1)
pick-up b9 (1)
stack b9 b15 (1)
unstack b4 b17 (1)
put-down b4 (1)
unstack b17 b22 (1)
put-down b17 (1)
unstack b22 b21 (1)
put-down b22 (1)
pick-up b17 (1)
stack b17 b22 (1)
pick-up b4 (1)
stack b4 b17 (1)
unstack b21 b10 (1)
put-down b21 (1)
unstack b10 b12 (1)
put-down b10 (1)
unstack b12 b16 (1)
put-down b12 (1)
pick-up b16 (1)
stack b16 b1 (1)
pick-up b12 (1)
stack b12 b16 (1)
pick-up b10 (1)
stack b10 b12 (1)
pick-up b21 (1)
stack b21 b10 (1)
unstack b4 b17 (1)
put-down b4 (1)
unstack b17 b22 (1)
put-down b17 (1)
pick-up b22 (1)
stack b22 b21 (1)
pick-up b17 (1)
stack b17 b22 (1)
pick-up b4 (1)
stack b4 b17 (1)
[t=0.0251656s, 26792 KB] Plan length: 84 step(s).
[t=0.0251656s, 26792 KB] Plan cost: 84
[t=0.0251656s, 26792 KB] Expanded 220 state(s).
[t=0.0251656s, 26792 KB] Reopened 0 state(s).
[t=0.0251656s, 26792 KB] Evaluated 221 state(s).
[t=0.0251656s, 26792 KB] Evaluations: 442
[t=0.0251656s, 26792 KB] Generated 1861 state(s).
[t=0.0251656s, 26792 KB] Dead ends: 0 state(s).
[t=0.0251656s, 26792 KB] Number of registered states: 221
[t=0.0251656s, 26792 KB] Int hash set load factor: 221/256 = 0.863281
[t=0.0251656s, 26792 KB] Int hash set resizes: 8
[t=0.0251656s, 26792 KB] Search time: 0.00646254s
[t=0.0251656s, 26792 KB] Total time: 0.0251656s
Solution found.
Peak memory: 26792 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.17s
