INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_8.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4271 total queue pushes
Completing instantiation... [0.010s CPU, 0.016s wall-clock]
Instantiating: [0.020s CPU, 0.026s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.023s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.011s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 17
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7602
Translator peak memory: 36456 KB
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.081s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=3.2212e-05s, 24488 KB] reading input...
[t=0.00310752s, 25268 KB] done reading input!
[t=0.00456654s, 25664 KB] Initializing landmark count heuristic...
[t=0.00464327s, 25664 KB] Generating landmark graph...
[t=0.00471911s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.0047796s, 25664 KB] Initializing Exploration...
[t=0.0050617s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0135279s, 26248 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0136145s, 26248 KB] Landmarks generation time: 0.00889475s
[t=0.0136291s, 26248 KB] Discovered 91 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0136607s, 26248 KB] 299 edges
[t=0.0136715s, 26248 KB] approx. reasonable orders
[t=0.0164433s, 26248 KB] approx. obedient reasonable orders
[t=0.0167319s, 26248 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0167485s, 26248 KB] Landmarks generation time: 0.0121039s
[t=0.0167605s, 26248 KB] Discovered 91 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0167706s, 26248 KB] 379 edges
[t=0.0167968s, 26248 KB] Landmark graph generation time: 0.0121638s
[t=0.0168096s, 26248 KB] Landmark graph contains 91 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0168204s, 26248 KB] Landmark graph contains 379 orderings.
[t=0.0171789s, 26248 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.018058s, 26380 KB] time to simplify: 0.000945494s
[t=0.0181838s, 26380 KB] Initializing additive heuristic...
[t=0.0181997s, 26380 KB] Initializing FF heuristic...
[t=0.0182548s, 26380 KB] Building successor generator...done!
[t=0.0184374s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.018447s, 26380 KB] time for successor generation creation: 0.000150747s
[t=0.0184593s, 26380 KB] Variables: 43
[t=0.0184673s, 26380 KB] FactPairs: 506
[t=0.0184756s, 26380 KB] Bytes per state: 16
[t=0.0185703s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0186068s, 26380 KB] 42 initial landmarks, 17 goal landmarks
[t=0.0186576s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0186675s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0186763s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.0186906s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0186996s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0187622s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0187717s, 26380 KB] g=1, 3 evaluated, 2 expanded
[t=0.0189927s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0190031s, 26380 KB] g=2, 12 evaluated, 11 expanded
[t=0.0190581s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0190671s, 26380 KB] g=3, 14 evaluated, 13 expanded
[t=0.0193684s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0193794s, 26380 KB] g=6, 27 evaluated, 26 expanded
[t=0.0195525s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.019564s, 26380 KB] g=6, 34 evaluated, 33 expanded
[t=0.019686s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.019696s, 26380 KB] g=8, 39 evaluated, 38 expanded
[t=0.0200015s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0200124s, 26380 KB] g=8, 52 evaluated, 51 expanded
[t=0.0201573s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0201666s, 26380 KB] g=10, 58 evaluated, 57 expanded
[t=0.0205614s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0205764s, 26380 KB] g=12, 74 evaluated, 73 expanded
[t=0.0209975s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0210099s, 26380 KB] g=14, 92 evaluated, 91 expanded
[t=0.0214877s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0215081s, 26380 KB] g=16, 113 evaluated, 112 expanded
[t=0.0218114s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0218226s, 26380 KB] g=18, 126 evaluated, 125 expanded
[t=0.0218808s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0218898s, 26380 KB] g=16, 128 evaluated, 127 expanded
[t=0.0223239s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0223352s, 26380 KB] g=18, 147 evaluated, 146 expanded
[t=0.0224155s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0224245s, 26380 KB] g=20, 150 evaluated, 149 expanded
[t=0.0228533s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0228627s, 26380 KB] g=20, 169 evaluated, 168 expanded
[t=0.0230946s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0231034s, 26380 KB] g=22, 179 evaluated, 178 expanded
[t=0.0236847s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0236943s, 26380 KB] g=24, 205 evaluated, 204 expanded
[t=0.0239417s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0239506s, 26380 KB] g=25, 216 evaluated, 215 expanded
[t=0.0241233s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0241327s, 26380 KB] g=26, 223 evaluated, 222 expanded
[t=0.025846s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0258591s, 26380 KB] g=28, 299 evaluated, 298 expanded
[t=0.0263085s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0263191s, 26380 KB] g=30, 319 evaluated, 318 expanded
[t=0.0266947s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0267062s, 26380 KB] g=32, 335 evaluated, 334 expanded
[t=0.0268503s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0268596s, 26380 KB] g=30, 341 evaluated, 340 expanded
[t=0.0276308s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0276419s, 26380 KB] g=32, 375 evaluated, 374 expanded
[t=0.0284309s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0284411s, 26380 KB] g=34, 410 evaluated, 409 expanded
[t=0.0285632s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0285722s, 26380 KB] g=38, 415 evaluated, 414 expanded
[t=0.0291346s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0291462s, 26380 KB] g=36, 440 evaluated, 439 expanded
[t=0.0295822s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0296059s, 26380 KB] g=38, 460 evaluated, 459 expanded
[t=0.0299931s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.030007s, 26380 KB] g=44, 477 evaluated, 476 expanded
[t=0.0302399s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0302525s, 26380 KB] g=46, 487 evaluated, 486 expanded
[t=0.0303634s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.030383s, 26380 KB] g=40, 490 evaluated, 489 expanded
[t=0.030978s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0310113s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.031021s, 26380 KB] g=42, 513 evaluated, 512 expanded
[t=0.0312363s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0312467s, 26380 KB] g=44, 523 evaluated, 522 expanded
[t=0.0314852s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0314964s, 26380 KB] g=44, 534 evaluated, 533 expanded
[t=0.0318095s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0318252s, 26380 KB] g=46, 549 evaluated, 548 expanded
[t=0.0319001s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0319106s, 26380 KB] g=46, 552 evaluated, 551 expanded
[t=0.0321856s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.032203s, 26380 KB] g=48, 565 evaluated, 564 expanded
[t=0.0324401s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0324582s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0324677s, 26380 KB] g=48, 575 evaluated, 574 expanded
[t=0.032626s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0326386s, 26380 KB] g=50, 582 evaluated, 581 expanded
[t=0.032751s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0327639s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0327722s, 26380 KB] g=50, 587 evaluated, 586 expanded
[t=0.0329017s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0329114s, 26380 KB] g=52, 593 evaluated, 592 expanded
[t=0.0330204s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0330303s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0330383s, 26380 KB] g=52, 598 evaluated, 597 expanded
[t=0.0331454s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0331548s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0331623s, 26380 KB] g=54, 603 evaluated, 602 expanded
[t=0.0332471s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0332559s, 26380 KB] g=56, 607 evaluated, 606 expanded
[t=0.0363299s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0363523s, 26380 KB] g=81, 783 evaluated, 782 expanded
[t=0.0364408s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0364507s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.036459s, 26380 KB] g=82, 787 evaluated, 786 expanded
[t=0.0365161s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0365252s, 26380 KB] g=83, 790 evaluated, 789 expanded
[t=0.0365506s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0365598s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0365678s, 26380 KB] g=84, 791 evaluated, 790 expanded
[t=0.0367191s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0367298s, 26380 KB] g=88, 800 evaluated, 799 expanded
[t=0.0367846s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0367976s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0368063s, 26380 KB] g=90, 803 evaluated, 802 expanded
[t=0.0369602s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0369692s, 26380 KB] g=98, 814 evaluated, 813 expanded
[t=0.036991s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0370004s, 26380 KB] g=98, 815 evaluated, 814 expanded
[t=0.0370169s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0370257s, 26380 KB] g=99, 816 evaluated, 815 expanded
[t=0.03704s, 26380 KB] Solution found!
[t=0.037052s, 26380 KB] Actual search time: 0.0184417s
unstack b4 b19 (1)
put-down b4 (1)
unstack b12 b10 (1)
put-down b12 (1)
unstack b17 b6 (1)
put-down b17 (1)
unstack b19 b18 (1)
put-down b19 (1)
unstack b18 b11 (1)
stack b18 b6 (1)
unstack b11 b7 (1)
put-down b11 (1)
unstack b7 b5 (1)
put-down b7 (1)
unstack b20 b2 (1)
put-down b20 (1)
unstack b2 b14 (1)
put-down b2 (1)
unstack b5 b21 (1)
put-down b5 (1)
unstack b21 b15 (1)
put-down b21 (1)
unstack b8 b16 (1)
put-down b8 (1)
unstack b16 b1 (1)
put-down b16 (1)
pick-up b14 (1)
stack b14 b4 (1)
pick-up b15 (1)
stack b15 b18 (1)
pick-up b17 (1)
stack b17 b14 (1)
pick-up b10 (1)
stack b10 b17 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b1 b13 (1)
stack b1 b2 (1)
pick-up b13 (1)
stack b13 b10 (1)
pick-up b11 (1)
stack b11 b13 (1)
pick-up b20 (1)
stack b20 b1 (1)
pick-up b16 (1)
stack b16 b20 (1)
pick-up b5 (1)
stack b5 b11 (1)
pick-up b19 (1)
stack b19 b5 (1)
pick-up b21 (1)
stack b21 b19 (1)
pick-up b12 (1)
stack b12 b21 (1)
pick-up b9 (1)
stack b9 b8 (1)
unstack b16 b20 (1)
put-down b16 (1)
unstack b20 b1 (1)
put-down b20 (1)
unstack b1 b2 (1)
put-down b1 (1)
pick-up b20 (1)
stack b20 b1 (1)
pick-up b16 (1)
stack b16 b20 (1)
unstack b2 b15 (1)
put-down b2 (1)
unstack b15 b18 (1)
put-down b15 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b9 b8 (1)
put-down b9 (1)
unstack b18 b6 (1)
put-down b18 (1)
unstack b6 b3 (1)
put-down b6 (1)
pick-up b18 (1)
stack b18 b6 (1)
pick-up b8 (1)
stack b8 b3 (1)
pick-up b9 (1)
stack b9 b8 (1)
unstack b2 b15 (1)
put-down b2 (1)
pick-up b15 (1)
stack b15 b18 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b16 b20 (1)
put-down b16 (1)
unstack b20 b1 (1)
put-down b20 (1)
pick-up b1 (1)
stack b1 b2 (1)
pick-up b20 (1)
stack b20 b1 (1)
pick-up b16 (1)
stack b16 b20 (1)
[t=0.0370614s, 26380 KB] Plan length: 100 step(s).
[t=0.0370614s, 26380 KB] Plan cost: 100
[t=0.0370614s, 26380 KB] Expanded 816 state(s).
[t=0.0370614s, 26380 KB] Reopened 0 state(s).
[t=0.0370614s, 26380 KB] Evaluated 817 state(s).
[t=0.0370614s, 26380 KB] Evaluations: 1634
[t=0.0370614s, 26380 KB] Generated 8611 state(s).
[t=0.0370614s, 26380 KB] Dead ends: 0 state(s).
[t=0.0370614s, 26380 KB] Number of registered states: 817
[t=0.0370614s, 26380 KB] Int hash set load factor: 817/1024 = 0.797852
[t=0.0370614s, 26380 KB] Int hash set resizes: 10
[t=0.0370614s, 26380 KB] Search time: 0.0184916s
[t=0.0370614s, 26380 KB] Total time: 0.0370614s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.16s
