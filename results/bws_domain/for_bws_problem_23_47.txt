INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_23/bws_problem_23_47.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.012s wall-clock]
1750 relevant atoms
1173 auxiliary atoms
2923 final queue length
5089 total queue pushes
Completing instantiation... [0.020s CPU, 0.019s wall-clock]
Instantiating: [0.030s CPU, 0.032s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
24 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.030s CPU, 0.027s wall-clock]
1564 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
46 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.012s wall-clock]
Reordering and filtering variables...
47 of 47 variables necessary.
24 of 47 mutex groups necessary.
1058 of 1058 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.007s wall-clock]
Translator variables: 47
Translator derived variables: 0
Translator facts: 600
Translator goal facts: 20
Translator mutex groups: 24
Translator total mutex groups size: 576
Translator operators: 1058
Translator axioms: 0
Translator task size: 9109
Translator peak memory: 37232 KB
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.090s CPU, 0.097s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.6101e-05s, 24488 KB] reading input...
[t=0.00415257s, 25428 KB] done reading input!
[t=0.00495176s, 25824 KB] Initializing landmark count heuristic...
[t=0.004979s, 25824 KB] Generating landmark graph...
[t=0.00504391s, 25824 KB] Building a landmark graph with reasonable orders.
[t=0.00510805s, 25956 KB] Initializing Exploration...
[t=0.00542499s, 26256 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.017319s, 26784 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0174184s, 26784 KB] Landmarks generation time: 0.0123807s
[t=0.0174382s, 26784 KB] Discovered 99 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0174621s, 26784 KB] 643 edges
[t=0.0174756s, 26784 KB] approx. reasonable orders
[t=0.0190222s, 26784 KB] approx. obedient reasonable orders
[t=0.0191411s, 26784 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0191542s, 26784 KB] Landmarks generation time: 0.0141742s
[t=0.019165s, 26784 KB] Discovered 99 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0191735s, 26784 KB] 657 edges
[t=0.0191825s, 26784 KB] Landmark graph generation time: 0.0142107s
[t=0.0191912s, 26784 KB] Landmark graph contains 99 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0192004s, 26784 KB] Landmark graph contains 657 orderings.
[t=0.0197809s, 26784 KB] Simplifying 4186 unary operators... done! [3174 unary operators]
[t=0.0208095s, 26784 KB] time to simplify: 0.00109927s
[t=0.0209492s, 26784 KB] Initializing additive heuristic...
[t=0.0209657s, 26784 KB] Initializing FF heuristic...
[t=0.0210616s, 26784 KB] Building successor generator...done!
[t=0.021312s, 26784 KB] peak memory difference for successor generator creation: 0 KB
[t=0.021322s, 26784 KB] time for successor generation creation: 0.000210623s
[t=0.0213392s, 26784 KB] Variables: 47
[t=0.0213484s, 26784 KB] FactPairs: 600
[t=0.021358s, 26784 KB] Bytes per state: 20
[t=0.0214954s, 26784 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0215317s, 26784 KB] 46 initial landmarks, 20 goal landmarks
[t=0.0215918s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0216018s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0216107s, 26784 KB] g=0, 1 evaluated, 0 expanded
[t=0.0216249s, 26784 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.021634s, 26784 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0217899s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0217998s, 26784 KB] g=2, 6 evaluated, 5 expanded
[t=0.0220685s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0220786s, 26784 KB] g=4, 16 evaluated, 15 expanded
[t=0.022219s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0222289s, 26784 KB] g=6, 21 evaluated, 20 expanded
[t=0.022497s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0225082s, 26784 KB] g=4, 31 evaluated, 30 expanded
[t=0.0226083s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0226187s, 26784 KB] g=8, 34 evaluated, 33 expanded
[t=0.0229744s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0229861s, 26784 KB] g=10, 48 evaluated, 47 expanded
[t=0.0231359s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0231454s, 26784 KB] g=10, 53 evaluated, 52 expanded
[t=0.0232559s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.023265s, 26784 KB] g=11, 57 evaluated, 56 expanded
[t=0.0235832s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0235971s, 26784 KB] g=12, 66 evaluated, 65 expanded
[t=0.0244568s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0244711s, 26784 KB] g=15, 99 evaluated, 98 expanded
[t=0.0249479s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0249675s, 26784 KB] g=18, 117 evaluated, 116 expanded
[t=0.0256523s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0256666s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0256753s, 26784 KB] g=20, 142 evaluated, 141 expanded
[t=0.0259496s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0259598s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.025968s, 26784 KB] g=22, 152 evaluated, 151 expanded
[t=0.0262144s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0262239s, 26784 KB] g=24, 161 evaluated, 160 expanded
[t=0.0264407s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0264506s, 26784 KB] g=26, 169 evaluated, 168 expanded
[t=0.0266219s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.026632s, 26784 KB] g=28, 175 evaluated, 174 expanded
[t=0.0271817s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0271911s, 26784 KB] g=32, 196 evaluated, 195 expanded
[t=0.0273581s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0273675s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0273755s, 26784 KB] g=34, 202 evaluated, 201 expanded
[t=0.0275133s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.027522s, 26784 KB] g=36, 207 evaluated, 206 expanded
[t=0.0275593s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0275679s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0275761s, 26784 KB] g=36, 208 evaluated, 207 expanded
[t=0.0276397s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0276482s, 26784 KB] g=37, 210 evaluated, 209 expanded
[t=0.027895s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0279152s, 26784 KB] g=40, 219 evaluated, 218 expanded
[t=0.0288419s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.028852s, 26784 KB] g=44, 254 evaluated, 253 expanded
[t=0.0292026s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0292125s, 26784 KB] g=46, 267 evaluated, 266 expanded
[t=0.0298368s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0298482s, 26784 KB] g=50, 291 evaluated, 290 expanded
[t=0.0300067s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0300165s, 26784 KB] g=52, 297 evaluated, 296 expanded
[t=0.0304687s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0304823s, 26784 KB] g=56, 314 evaluated, 313 expanded
[t=0.0308381s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0308482s, 26784 KB] g=57, 327 evaluated, 326 expanded
[t=0.0309315s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0309438s, 26784 KB] g=58, 329 evaluated, 328 expanded
[t=0.0311703s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0311831s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0311916s, 26784 KB] g=60, 337 evaluated, 336 expanded
[t=0.0314372s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0314468s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0314555s, 26784 KB] g=62, 346 evaluated, 345 expanded
[t=0.0317048s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0317138s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0317216s, 26784 KB] g=64, 355 evaluated, 354 expanded
[t=0.031904s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0319126s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0319206s, 26784 KB] g=66, 362 evaluated, 361 expanded
[t=0.0321s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0321091s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0321172s, 26784 KB] g=68, 369 evaluated, 368 expanded
[t=0.0322942s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0323031s, 26784 KB] g=71, 376 evaluated, 375 expanded
[t=0.0323632s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.032372s, 26784 KB] g=72, 378 evaluated, 377 expanded
[t=0.0325055s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0325139s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0325218s, 26784 KB] g=74, 383 evaluated, 382 expanded
[t=0.0327081s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0327225s, 26784 KB] g=78, 390 evaluated, 389 expanded
[t=0.032877s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0329144s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0329256s, 26784 KB] g=80, 394 evaluated, 393 expanded
[t=0.0330759s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0330874s, 26784 KB] g=83, 398 evaluated, 397 expanded
[t=0.033394s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.033404s, 26784 KB] g=86, 409 evaluated, 408 expanded
[t=0.0334654s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0334752s, 26784 KB] g=87, 411 evaluated, 410 expanded
[t=0.0335119s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0335208s, 26784 KB] g=88, 412 evaluated, 411 expanded
[t=0.0336078s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0336172s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0336265s, 26784 KB] g=90, 415 evaluated, 414 expanded
[t=0.0338961s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0339064s, 26784 KB] g=86, 425 evaluated, 424 expanded
[t=0.0349834s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0350013s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0350111s, 26784 KB] g=94, 464 evaluated, 463 expanded
[t=0.035095s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0351049s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0351131s, 26784 KB] g=96, 467 evaluated, 466 expanded
[t=0.0391811s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0392107s, 26784 KB] g=130, 644 evaluated, 643 expanded
[t=0.0394005s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0394112s, 26784 KB] g=134, 653 evaluated, 652 expanded
[t=0.0394755s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0394843s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.039492s, 26784 KB] g=136, 656 evaluated, 655 expanded
[t=0.0397775s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0397866s, 26784 KB] g=148, 674 evaluated, 673 expanded
[t=0.0398458s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0398548s, 26784 KB] g=152, 678 evaluated, 677 expanded
[t=0.0398727s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0398811s, 26784 KB] g=153, 679 evaluated, 678 expanded
[t=0.0398968s, 26784 KB] Solution found!
[t=0.0399083s, 26784 KB] Actual search time: 0.0183734s
unstack b1 b6 (1)
put-down b1 (1)
unstack b18 b16 (1)
put-down b18 (1)
unstack b21 b11 (1)
put-down b21 (1)
unstack b11 b7 (1)
put-down b11 (1)
unstack b7 b20 (1)
stack b7 b21 (1)
unstack b20 b22 (1)
put-down b20 (1)
unstack b22 b14 (1)
put-down b22 (1)
unstack b14 b10 (1)
put-down b14 (1)
unstack b10 b15 (1)
stack b10 b6 (1)
pick-up b16 (1)
stack b16 b10 (1)
pick-up b1 (1)
stack b1 b16 (1)
pick-up b14 (1)
stack b14 b18 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b22 (1)
stack b22 b14 (1)
unstack b15 b5 (1)
put-down b15 (1)
unstack b5 b3 (1)
stack b5 b7 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b3 b2 (1)
stack b3 b15 (1)
unstack b2 b9 (1)
put-down b2 (1)
unstack b9 b23 (1)
put-down b9 (1)
unstack b23 b8 (1)
put-down b23 (1)
unstack b11 b17 (1)
put-down b11 (1)
pick-up b2 (1)
stack b2 b8 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b9 (1)
stack b9 b23 (1)
unstack b11 b17 (1)
put-down b11 (1)
unstack b2 b8 (1)
put-down b2 (1)
unstack b8 b4 (1)
put-down b8 (1)
unstack b4 b13 (1)
stack b4 b11 (1)
unstack b13 b12 (1)
put-down b13 (1)
unstack b12 b19 (1)
stack b12 b1 (1)
pick-up b17 (1)
stack b17 b19 (1)
pick-up b20 (1)
stack b20 b12 (1)
pick-up b2 (1)
stack b2 b8 (1)
unstack b17 b19 (1)
put-down b17 (1)
pick-up b19 (1)
stack b19 b3 (1)
pick-up b17 (1)
stack b17 b19 (1)
unstack b4 b11 (1)
put-down b4 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b4 (1)
stack b4 b11 (1)
unstack b9 b23 (1)
put-down b9 (1)
pick-up b23 (1)
stack b23 b13 (1)
pick-up b9 (1)
stack b9 b23 (1)
unstack b22 b14 (1)
put-down b22 (1)
unstack b14 b18 (1)
put-down b14 (1)
pick-up b18 (1)
stack b18 b9 (1)
pick-up b14 (1)
stack b14 b18 (1)
pick-up b22 (1)
stack b22 b14 (1)
unstack b4 b11 (1)
put-down b4 (1)
unstack b11 b17 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b11 (1)
unstack b17 b19 (1)
put-down b17 (1)
unstack b19 b3 (1)
put-down b19 (1)
pick-up b17 (1)
stack b17 b19 (1)
unstack b4 b11 (1)
put-down b4 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b4 (1)
stack b4 b11 (1)
unstack b3 b15 (1)
put-down b3 (1)
unstack b15 b5 (1)
put-down b15 (1)
pick-up b3 (1)
stack b3 b15 (1)
unstack b5 b7 (1)
put-down b5 (1)
unstack b7 b21 (1)
put-down b7 (1)
pick-up b21 (1)
stack b21 b22 (1)
pick-up b7 (1)
stack b7 b21 (1)
pick-up b5 (1)
stack b5 b7 (1)
unstack b3 b15 (1)
put-down b3 (1)
pick-up b15 (1)
stack b15 b5 (1)
pick-up b3 (1)
stack b3 b15 (1)
unstack b4 b11 (1)
put-down b4 (1)
unstack b11 b17 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b11 (1)
unstack b17 b19 (1)
put-down b17 (1)
pick-up b19 (1)
stack b19 b3 (1)
pick-up b17 (1)
stack b17 b19 (1)
unstack b4 b11 (1)
put-down b4 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b4 (1)
stack b4 b11 (1)
[t=0.039918s, 26784 KB] Plan length: 154 step(s).
[t=0.039918s, 26784 KB] Plan cost: 154
[t=0.039918s, 26784 KB] Expanded 679 state(s).
[t=0.039918s, 26784 KB] Reopened 0 state(s).
[t=0.039918s, 26784 KB] Evaluated 680 state(s).
[t=0.039918s, 26784 KB] Evaluations: 1360
[t=0.039918s, 26784 KB] Generated 5395 state(s).
[t=0.039918s, 26784 KB] Dead ends: 0 state(s).
[t=0.039918s, 26784 KB] Number of registered states: 680
[t=0.039918s, 26784 KB] Int hash set load factor: 680/1024 = 0.664062
[t=0.039918s, 26784 KB] Int hash set resizes: 10
[t=0.039918s, 26784 KB] Search time: 0.0184234s
[t=0.039918s, 26784 KB] Total time: 0.039918s
Solution found.
Peak memory: 26784 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.18s
