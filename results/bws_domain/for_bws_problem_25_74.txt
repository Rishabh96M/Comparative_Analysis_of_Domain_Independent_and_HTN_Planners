INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_25/bws_problem_25_74.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.012s wall-clock]
2052 relevant atoms
1375 auxiliary atoms
3427 final queue length
5982 total queue pushes
Completing instantiation... [0.030s CPU, 0.020s wall-clock]
Instantiating: [0.040s CPU, 0.034s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
26 uncovered facts
Choosing groups: [0.010s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.031s wall-clock]
1850 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
50 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.020s wall-clock]
Reordering and filtering variables...
51 of 51 variables necessary.
26 of 51 mutex groups necessary.
1250 of 1250 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.008s wall-clock]
Translator variables: 51
Translator derived variables: 0
Translator facts: 702
Translator goal facts: 21
Translator mutex groups: 26
Translator total mutex groups size: 676
Translator operators: 1250
Translator axioms: 0
Translator task size: 10750
Translator peak memory: 38388 KB
Writing output... [0.000s CPU, 0.006s wall-clock]
Done! [0.110s CPU, 0.112s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.3405e-05s, 24488 KB] reading input...
[t=0.00347212s, 25632 KB] done reading input!
[t=0.00430092s, 26028 KB] Initializing landmark count heuristic...
[t=0.00433731s, 26028 KB] Generating landmark graph...
[t=0.00441202s, 26160 KB] Building a landmark graph with reasonable orders.
[t=0.00448179s, 26160 KB] Initializing Exploration...
[t=0.00486473s, 26532 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0193498s, 27060 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0194267s, 27060 KB] Landmarks generation time: 0.0150146s
[t=0.0194406s, 27060 KB] Discovered 109 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0194598s, 27060 KB] 426 edges
[t=0.0194695s, 27060 KB] approx. reasonable orders
[t=0.0199712s, 27060 KB] approx. obedient reasonable orders
[t=0.0200067s, 27060 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0200161s, 27060 KB] Landmarks generation time: 0.0156745s
[t=0.0200256s, 27060 KB] Discovered 109 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0200333s, 27060 KB] 431 edges
[t=0.0200414s, 27060 KB] Landmark graph generation time: 0.0157114s
[t=0.0200501s, 27060 KB] Landmark graph contains 109 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0200581s, 27060 KB] Landmark graph contains 431 orderings.
[t=0.0204757s, 27060 KB] Simplifying 4950 unary operators... done! [3750 unary operators]
[t=0.0216448s, 27060 KB] time to simplify: 0.00125511s
[t=0.0218083s, 27060 KB] Initializing additive heuristic...
[t=0.0218259s, 27060 KB] Initializing FF heuristic...
[t=0.0219253s, 27060 KB] Building successor generator...done!
[t=0.0222169s, 27060 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0222267s, 27060 KB] time for successor generation creation: 0.000249332s
[t=0.0222429s, 27060 KB] Variables: 51
[t=0.0222514s, 27060 KB] FactPairs: 702
[t=0.0222592s, 27060 KB] Bytes per state: 20
[t=0.0223837s, 27060 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.022432s, 27060 KB] 49 initial landmarks, 21 goal landmarks
[t=0.0224929s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.022502s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.022511s, 27060 KB] g=0, 1 evaluated, 0 expanded
[t=0.0225307s, 27060 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0225391s, 27060 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0227404s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0227498s, 27060 KB] g=2, 7 evaluated, 6 expanded
[t=0.022821s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0228301s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.022838s, 27060 KB] g=2, 9 evaluated, 8 expanded
[t=0.0229972s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0230059s, 27060 KB] g=4, 14 evaluated, 13 expanded
[t=0.0231083s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0231181s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0231258s, 27060 KB] g=4, 17 evaluated, 16 expanded
[t=0.0232859s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0233055s, 27060 KB] g=6, 22 evaluated, 21 expanded
[t=0.0236196s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0236311s, 27060 KB] g=7, 32 evaluated, 31 expanded
[t=0.0236736s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0236832s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.023691s, 27060 KB] g=8, 33 evaluated, 32 expanded
[t=0.0238457s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.023856s, 27060 KB] g=9, 38 evaluated, 37 expanded
[t=0.0238956s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0239161s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0239277s, 27060 KB] g=10, 39 evaluated, 38 expanded
[t=0.024129s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0241406s, 27060 KB] g=12, 45 evaluated, 44 expanded
[t=0.0243858s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0243952s, 27060 KB] g=13, 53 evaluated, 52 expanded
[t=0.024828s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.024841s, 27060 KB] g=16, 67 evaluated, 66 expanded
[t=0.0250895s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0250999s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0251101s, 27060 KB] g=18, 75 evaluated, 74 expanded
[t=0.0265336s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0265505s, 27060 KB] g=23, 122 evaluated, 121 expanded
[t=0.0268918s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0269037s, 27060 KB] g=26, 133 evaluated, 132 expanded
[t=0.027433s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0274445s, 27060 KB] g=28, 150 evaluated, 149 expanded
[t=0.0277145s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0277246s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0277326s, 27060 KB] g=30, 159 evaluated, 158 expanded
[t=0.0279897s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0279993s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0280074s, 27060 KB] g=32, 167 evaluated, 166 expanded
[t=0.0282377s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0282471s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0282556s, 27060 KB] g=34, 174 evaluated, 173 expanded
[t=0.0287501s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0287608s, 27060 KB] g=38, 190 evaluated, 189 expanded
[t=0.0290353s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0290472s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0290557s, 27060 KB] g=40, 198 evaluated, 197 expanded
[t=0.0292778s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0292871s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0293025s, 27060 KB] g=42, 205 evaluated, 204 expanded
[t=0.0315929s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0316056s, 27060 KB] g=48, 283 evaluated, 282 expanded
[t=0.0318245s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0318334s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0318416s, 27060 KB] g=50, 290 evaluated, 289 expanded
[t=0.0320862s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0321016s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0321103s, 27060 KB] g=52, 298 evaluated, 297 expanded
[t=0.0323516s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0323608s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0323686s, 27060 KB] g=54, 306 evaluated, 305 expanded
[t=0.032553s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0325617s, 27060 KB] g=56, 312 evaluated, 311 expanded
[t=0.0326004s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.032609s, 27060 KB] g=56, 313 evaluated, 312 expanded
[t=0.0329395s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0329488s, 27060 KB] g=58, 324 evaluated, 323 expanded
[t=0.0331105s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0331196s, 27060 KB] g=60, 329 evaluated, 328 expanded
[t=0.0333471s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0333575s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0333658s, 27060 KB] g=62, 336 evaluated, 335 expanded
[t=0.0335868s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0335965s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0336048s, 27060 KB] g=64, 343 evaluated, 342 expanded
[t=0.0338278s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0338383s, 27060 KB] g=66, 350 evaluated, 349 expanded
[t=0.0339074s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0339162s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.033924s, 27060 KB] g=66, 352 evaluated, 351 expanded
[t=0.0341322s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0341413s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0341489s, 27060 KB] g=68, 359 evaluated, 358 expanded
[t=0.0343326s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0343412s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0343491s, 27060 KB] g=70, 365 evaluated, 364 expanded
[t=0.0345006s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0345093s, 27060 KB] g=73, 370 evaluated, 369 expanded
[t=0.0345765s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0345848s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0345928s, 27060 KB] g=74, 372 evaluated, 371 expanded
[t=0.0347449s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0347537s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0347617s, 27060 KB] g=76, 377 evaluated, 376 expanded
[t=0.0357538s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0357705s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0357818s, 27060 KB] g=84, 410 evaluated, 409 expanded
[t=0.0359055s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0359164s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0359252s, 27060 KB] g=86, 414 evaluated, 413 expanded
[t=0.0364086s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0364212s, 27060 KB] g=94, 431 evaluated, 430 expanded
[t=0.0364847s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0364937s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0365017s, 27060 KB] g=96, 433 evaluated, 432 expanded
[t=0.0479938s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0480217s, 27060 KB] g=130, 864 evaluated, 863 expanded
[t=0.0487278s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0487396s, 27060 KB] g=138, 893 evaluated, 892 expanded
[t=0.0488359s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0488463s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0488545s, 27060 KB] g=140, 896 evaluated, 895 expanded
[t=0.0496085s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0496213s, 27060 KB] g=156, 934 evaluated, 933 expanded
[t=0.0497946s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0498045s, 27060 KB] g=164, 945 evaluated, 944 expanded
[t=0.0498223s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0498308s, 27060 KB] g=165, 946 evaluated, 945 expanded
[t=0.0498457s, 27060 KB] Solution found!
[t=0.0498608s, 27060 KB] Actual search time: 0.0274256s
unstack b2 b5 (1)
stack b2 b23 (1)
unstack b5 b21 (1)
stack b5 b2 (1)
unstack b4 b8 (1)
put-down b4 (1)
unstack b8 b6 (1)
stack b8 b11 (1)
unstack b6 b20 (1)
stack b6 b21 (1)
unstack b20 b3 (1)
put-down b20 (1)
unstack b3 b13 (1)
put-down b3 (1)
unstack b13 b7 (1)
put-down b13 (1)
unstack b16 b14 (1)
stack b16 b13 (1)
unstack b8 b11 (1)
put-down b8 (1)
unstack b11 b12 (1)
put-down b11 (1)
unstack b12 b15 (1)
put-down b12 (1)
unstack b15 b18 (1)
stack b15 b20 (1)
pick-up b3 (1)
stack b3 b18 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b4 (1)
stack b4 b15 (1)
pick-up b8 (1)
stack b8 b11 (1)
unstack b3 b18 (1)
put-down b3 (1)
unstack b18 b24 (1)
put-down b18 (1)
pick-up b24 (1)
stack b24 b7 (1)
pick-up b3 (1)
stack b3 b18 (1)
unstack b5 b2 (1)
put-down b5 (1)
unstack b2 b23 (1)
put-down b2 (1)
unstack b23 b1 (1)
stack b23 b4 (1)
unstack b1 b19 (1)
stack b1 b14 (1)
unstack b19 b9 (1)
put-down b19 (1)
pick-up b2 (1)
stack b2 b23 (1)
pick-up b5 (1)
stack b5 b2 (1)
unstack b9 b10 (1)
put-down b9 (1)
unstack b10 b17 (1)
put-down b10 (1)
unstack b17 b22 (1)
stack b17 b5 (1)
unstack b22 b25 (1)
stack b22 b16 (1)
pick-up b25 (1)
stack b25 b1 (1)
pick-up b10 (1)
stack b10 b25 (1)
pick-up b9 (1)
stack b9 b17 (1)
unstack b6 b21 (1)
put-down b6 (1)
pick-up b21 (1)
stack b21 b10 (1)
pick-up b6 (1)
stack b6 b21 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b13 (1)
put-down b16 (1)
pick-up b13 (1)
stack b13 b19 (1)
pick-up b16 (1)
stack b16 b13 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b8 b11 (1)
put-down b8 (1)
unstack b11 b12 (1)
put-down b11 (1)
pick-up b12 (1)
stack b12 b9 (1)
pick-up b8 (1)
stack b8 b11 (1)
unstack b12 b9 (1)
put-down b12 (1)
unstack b9 b17 (1)
put-down b9 (1)
unstack b17 b5 (1)
put-down b17 (1)
pick-up b9 (1)
stack b9 b17 (1)
pick-up b12 (1)
stack b12 b9 (1)
unstack b8 b11 (1)
put-down b8 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b8 (1)
stack b8 b11 (1)
unstack b5 b2 (1)
put-down b5 (1)
unstack b2 b23 (1)
put-down b2 (1)
unstack b23 b4 (1)
put-down b23 (1)
pick-up b2 (1)
stack b2 b23 (1)
pick-up b5 (1)
stack b5 b2 (1)
unstack b4 b15 (1)
put-down b4 (1)
unstack b15 b20 (1)
put-down b15 (1)
pick-up b20 (1)
stack b20 b22 (1)
pick-up b15 (1)
stack b15 b20 (1)
pick-up b4 (1)
stack b4 b15 (1)
unstack b5 b2 (1)
put-down b5 (1)
unstack b2 b23 (1)
put-down b2 (1)
pick-up b23 (1)
stack b23 b4 (1)
pick-up b2 (1)
stack b2 b23 (1)
pick-up b5 (1)
stack b5 b2 (1)
unstack b8 b11 (1)
put-down b8 (1)
unstack b11 b12 (1)
put-down b11 (1)
unstack b12 b9 (1)
put-down b12 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b8 (1)
stack b8 b11 (1)
unstack b9 b17 (1)
put-down b9 (1)
pick-up b17 (1)
stack b17 b5 (1)
pick-up b9 (1)
stack b9 b17 (1)
unstack b8 b11 (1)
put-down b8 (1)
unstack b11 b12 (1)
put-down b11 (1)
pick-up b12 (1)
stack b12 b9 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b8 (1)
stack b8 b11 (1)
[t=0.0498703s, 27060 KB] Plan length: 166 step(s).
[t=0.0498703s, 27060 KB] Plan cost: 166
[t=0.0498703s, 27060 KB] Expanded 946 state(s).
[t=0.0498703s, 27060 KB] Reopened 0 state(s).
[t=0.0498703s, 27060 KB] Evaluated 947 state(s).
[t=0.0498703s, 27060 KB] Evaluations: 1894
[t=0.0498703s, 27060 KB] Generated 8539 state(s).
[t=0.0498703s, 27060 KB] Dead ends: 0 state(s).
[t=0.0498703s, 27060 KB] Number of registered states: 947
[t=0.0498703s, 27060 KB] Int hash set load factor: 947/1024 = 0.924805
[t=0.0498703s, 27060 KB] Int hash set resizes: 10
[t=0.0498703s, 27060 KB] Search time: 0.0274872s
[t=0.0498703s, 27060 KB] Total time: 0.0498703s
Solution found.
Peak memory: 27060 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.21s
