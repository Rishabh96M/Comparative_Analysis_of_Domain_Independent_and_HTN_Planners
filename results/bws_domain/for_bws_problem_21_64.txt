INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_64.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4267 total queue pushes
Completing instantiation... [0.010s CPU, 0.015s wall-clock]
Instantiating: [0.020s CPU, 0.025s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.030s CPU, 0.024s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.011s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 18
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7603
Translator peak memory: 36452 KB
Writing output... [0.000s CPU, 0.007s wall-clock]
Done! [0.080s CPU, 0.084s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.8265e-05s, 24488 KB] reading input...
[t=0.00240154s, 25268 KB] done reading input!
[t=0.00328835s, 25664 KB] Initializing landmark count heuristic...
[t=0.00332256s, 25664 KB] Generating landmark graph...
[t=0.00337664s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00342899s, 25664 KB] Initializing Exploration...
[t=0.00369398s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0120361s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0121402s, 26380 KB] Landmarks generation time: 0.00876458s
[t=0.0121544s, 26380 KB] Discovered 87 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0121791s, 26380 KB] 506 edges
[t=0.0121898s, 26380 KB] approx. reasonable orders
[t=0.0124428s, 26380 KB] approx. obedient reasonable orders
[t=0.0124734s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0124823s, 26380 KB] Landmarks generation time: 0.00915705s
[t=0.0124916s, 26380 KB] Discovered 87 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0124996s, 26380 KB] 510 edges
[t=0.0125076s, 26380 KB] Landmark graph generation time: 0.00919176s
[t=0.0125159s, 26380 KB] Landmark graph contains 87 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0125237s, 26380 KB] Landmark graph contains 510 orderings.
[t=0.0128576s, 26380 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0136625s, 26380 KB] time to simplify: 0.00086143s
[t=0.013778s, 26380 KB] Initializing additive heuristic...
[t=0.013792s, 26380 KB] Initializing FF heuristic...
[t=0.0138424s, 26380 KB] Building successor generator...done!
[t=0.0140153s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0140238s, 26380 KB] time for successor generation creation: 0.000141438s
[t=0.0140354s, 26380 KB] Variables: 43
[t=0.0140438s, 26380 KB] FactPairs: 506
[t=0.014052s, 26380 KB] Bytes per state: 16
[t=0.0141468s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0141793s, 26380 KB] 41 initial landmarks, 18 goal landmarks
[t=0.0142289s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0142381s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0142464s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.0142581s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0142663s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0143488s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0143596s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0143686s, 26380 KB] g=2, 4 evaluated, 3 expanded
[t=0.0144424s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.014452s, 26380 KB] g=4, 7 evaluated, 6 expanded
[t=0.0145877s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0145976s, 26380 KB] g=6, 13 evaluated, 12 expanded
[t=0.0146492s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0146592s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0146676s, 26380 KB] g=6, 15 evaluated, 14 expanded
[t=0.0147407s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0147562s, 26380 KB] g=8, 18 evaluated, 17 expanded
[t=0.0149475s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0149581s, 26380 KB] g=11, 26 evaluated, 25 expanded
[t=0.0151882s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0151984s, 26380 KB] g=14, 36 evaluated, 35 expanded
[t=0.01543s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0154425s, 26380 KB] g=16, 46 evaluated, 45 expanded
[t=0.0156179s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0156313s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0156837s, 26380 KB] g=18, 53 evaluated, 52 expanded
[t=0.0158822s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0158964s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0159058s, 26380 KB] g=20, 61 evaluated, 60 expanded
[t=0.0160538s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0160675s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0160776s, 26380 KB] g=22, 67 evaluated, 66 expanded
[t=0.0170527s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0170761s, 26380 KB] g=27, 107 evaluated, 106 expanded
[t=0.0171324s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0171414s, 26380 KB] g=28, 109 evaluated, 108 expanded
[t=0.0173304s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0173401s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0173486s, 26380 KB] g=30, 117 evaluated, 116 expanded
[t=0.0174889s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0174976s, 26380 KB] g=32, 123 evaluated, 122 expanded
[t=0.0176966s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0177054s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0177137s, 26380 KB] g=34, 131 evaluated, 130 expanded
[t=0.0178888s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0178987s, 26380 KB] g=36, 138 evaluated, 137 expanded
[t=0.0179541s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.017963s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0179712s, 26380 KB] g=36, 140 evaluated, 139 expanded
[t=0.0181131s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0181226s, 26380 KB] g=38, 146 evaluated, 145 expanded
[t=0.0182851s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0182955s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.01832s, 26380 KB] g=40, 153 evaluated, 152 expanded
[t=0.0184998s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0185098s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0185182s, 26380 KB] g=42, 160 evaluated, 159 expanded
[t=0.0191806s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0191925s, 26380 KB] g=47, 188 evaluated, 187 expanded
[t=0.0192493s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0192584s, 26380 KB] g=48, 190 evaluated, 189 expanded
[t=0.0196217s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0196314s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0196413s, 26380 KB] g=50, 206 evaluated, 205 expanded
[t=0.0198308s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0198516s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0198613s, 26380 KB] g=52, 214 evaluated, 213 expanded
[t=0.0200078s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0200184s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.020029s, 26380 KB] g=54, 220 evaluated, 219 expanded
[t=0.0205356s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.020546s, 26380 KB] g=58, 242 evaluated, 241 expanded
[t=0.0206684s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0206775s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0206861s, 26380 KB] g=60, 247 evaluated, 246 expanded
[t=0.0211494s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0211622s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0211704s, 26380 KB] g=64, 266 evaluated, 265 expanded
[t=0.0212923s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0213019s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0213123s, 26380 KB] g=66, 271 evaluated, 270 expanded
[t=0.021726s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0217389s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0217473s, 26380 KB] g=72, 290 evaluated, 289 expanded
[t=0.0232503s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0232901s, 26380 KB] g=74, 353 evaluated, 352 expanded
[t=0.0233888s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0233994s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.023412s, 26380 KB] g=76, 357 evaluated, 356 expanded
[t=0.0236106s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0236215s, 26380 KB] g=80, 366 evaluated, 365 expanded
[t=0.023691s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0237002s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0237088s, 26380 KB] g=82, 369 evaluated, 368 expanded
[t=0.0261071s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0261413s, 26380 KB] g=112, 482 evaluated, 481 expanded
[t=0.0263078s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0263175s, 26380 KB] g=116, 491 evaluated, 490 expanded
[t=0.0263758s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0263854s, 26380 KB] g=118, 494 evaluated, 493 expanded
[t=0.0266479s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0266575s, 26380 KB] g=130, 512 evaluated, 511 expanded
[t=0.0267422s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.026761s, 26380 KB] g=134, 516 evaluated, 515 expanded
[t=0.026781s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0267906s, 26380 KB] g=135, 517 evaluated, 516 expanded
[t=0.0268059s, 26380 KB] Solution found!
[t=0.0268175s, 26380 KB] Actual search time: 0.0126433s
unstack b21 b16 (1)
put-down b21 (1)
unstack b16 b13 (1)
put-down b16 (1)
unstack b13 b5 (1)
stack b13 b16 (1)
unstack b11 b2 (1)
put-down b11 (1)
unstack b2 b1 (1)
put-down b2 (1)
unstack b1 b6 (1)
put-down b1 (1)
unstack b6 b7 (1)
put-down b6 (1)
unstack b7 b18 (1)
stack b7 b6 (1)
unstack b18 b4 (1)
put-down b18 (1)
pick-up b11 (1)
stack b11 b4 (1)
pick-up b2 (1)
stack b2 b1 (1)
unstack b11 b4 (1)
put-down b11 (1)
unstack b4 b9 (1)
put-down b4 (1)
unstack b9 b12 (1)
stack b9 b18 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b12 b19 (1)
put-down b12 (1)
unstack b19 b17 (1)
stack b19 b11 (1)
unstack b5 b8 (1)
stack b5 b19 (1)
unstack b17 b14 (1)
put-down b17 (1)
unstack b14 b10 (1)
stack b14 b5 (1)
pick-up b12 (1)
stack b12 b14 (1)
unstack b10 b20 (1)
put-down b10 (1)
unstack b20 b3 (1)
put-down b20 (1)
unstack b3 b15 (1)
stack b3 b13 (1)
pick-up b15 (1)
stack b15 b21 (1)
pick-up b10 (1)
stack b10 b20 (1)
pick-up b17 (1)
stack b17 b15 (1)
unstack b2 b1 (1)
put-down b2 (1)
pick-up b1 (1)
stack b1 b12 (1)
pick-up b2 (1)
stack b2 b1 (1)
unstack b7 b6 (1)
put-down b7 (1)
pick-up b6 (1)
stack b6 b17 (1)
pick-up b7 (1)
stack b7 b6 (1)
unstack b3 b13 (1)
put-down b3 (1)
unstack b13 b16 (1)
put-down b13 (1)
pick-up b16 (1)
stack b16 b7 (1)
pick-up b13 (1)
stack b13 b16 (1)
pick-up b3 (1)
stack b3 b13 (1)
unstack b10 b20 (1)
put-down b10 (1)
pick-up b20 (1)
stack b20 b3 (1)
pick-up b10 (1)
stack b10 b20 (1)
unstack b2 b1 (1)
put-down b2 (1)
unstack b1 b12 (1)
put-down b1 (1)
pick-up b2 (1)
stack b2 b1 (1)
unstack b12 b14 (1)
put-down b12 (1)
unstack b14 b5 (1)
put-down b14 (1)
pick-up b12 (1)
stack b12 b14 (1)
unstack b2 b1 (1)
put-down b2 (1)
pick-up b1 (1)
stack b1 b12 (1)
pick-up b2 (1)
stack b2 b1 (1)
unstack b5 b19 (1)
put-down b5 (1)
unstack b19 b11 (1)
put-down b19 (1)
pick-up b5 (1)
stack b5 b19 (1)
unstack b11 b4 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b9 (1)
pick-up b11 (1)
stack b11 b4 (1)
unstack b5 b19 (1)
put-down b5 (1)
pick-up b19 (1)
stack b19 b11 (1)
pick-up b5 (1)
stack b5 b19 (1)
unstack b2 b1 (1)
put-down b2 (1)
unstack b1 b12 (1)
put-down b1 (1)
pick-up b2 (1)
stack b2 b1 (1)
unstack b12 b14 (1)
put-down b12 (1)
pick-up b14 (1)
stack b14 b5 (1)
pick-up b12 (1)
stack b12 b14 (1)
unstack b2 b1 (1)
put-down b2 (1)
pick-up b1 (1)
stack b1 b12 (1)
pick-up b2 (1)
stack b2 b1 (1)
[t=0.0268346s, 26380 KB] Plan length: 136 step(s).
[t=0.0268346s, 26380 KB] Plan cost: 136
[t=0.0268346s, 26380 KB] Expanded 517 state(s).
[t=0.0268346s, 26380 KB] Reopened 0 state(s).
[t=0.0268346s, 26380 KB] Evaluated 518 state(s).
[t=0.0268346s, 26380 KB] Evaluations: 1036
[t=0.0268346s, 26380 KB] Generated 4149 state(s).
[t=0.0268346s, 26380 KB] Dead ends: 0 state(s).
[t=0.0268346s, 26380 KB] Number of registered states: 518
[t=0.0268346s, 26380 KB] Int hash set load factor: 518/1024 = 0.505859
[t=0.0268346s, 26380 KB] Int hash set resizes: 10
[t=0.0268346s, 26380 KB] Search time: 0.0126887s
[t=0.0268346s, 26380 KB] Total time: 0.0268346s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.16s
