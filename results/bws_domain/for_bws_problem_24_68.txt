INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_24/bws_problem_24_68.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.011s wall-clock]
1898 relevant atoms
1272 auxiliary atoms
3170 final queue length
5526 total queue pushes
Completing instantiation... [0.020s CPU, 0.020s wall-clock]
Instantiating: [0.030s CPU, 0.032s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
25 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.010s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.029s wall-clock]
1704 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
48 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.020s wall-clock]
Reordering and filtering variables...
49 of 49 variables necessary.
25 of 49 mutex groups necessary.
1152 of 1152 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.007s wall-clock]
Translator variables: 49
Translator derived variables: 0
Translator facts: 650
Translator goal facts: 19
Translator mutex groups: 25
Translator total mutex groups size: 625
Translator operators: 1152
Translator axioms: 0
Translator task size: 9911
Translator peak memory: 37880 KB
Writing output... [0.010s CPU, 0.006s wall-clock]
Done! [0.100s CPU, 0.105s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.1821e-05s, 24488 KB] reading input...
[t=0.00326951s, 25532 KB] done reading input!
[t=0.00411715s, 25928 KB] Initializing landmark count heuristic...
[t=0.00414515s, 25928 KB] Generating landmark graph...
[t=0.00422111s, 25928 KB] Building a landmark graph with reasonable orders.
[t=0.00429961s, 26060 KB] Initializing Exploration...
[t=0.00462314s, 26388 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.019023s, 27048 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0191024s, 27048 KB] Landmarks generation time: 0.0148804s
[t=0.0191161s, 27048 KB] Discovered 100 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0191325s, 27048 KB] 732 edges
[t=0.0191428s, 27048 KB] approx. reasonable orders
[t=0.0210596s, 27048 KB] approx. obedient reasonable orders
[t=0.0210934s, 27048 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0211024s, 27048 KB] Landmarks generation time: 0.0169548s
[t=0.0211119s, 27048 KB] Discovered 100 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.02112s, 27048 KB] 763 edges
[t=0.0211284s, 27048 KB] Landmark graph generation time: 0.01699s
[t=0.0211368s, 27048 KB] Landmark graph contains 100 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0211447s, 27048 KB] Landmark graph contains 763 orderings.
[t=0.0215029s, 27048 KB] Simplifying 4560 unary operators... done! [3456 unary operators]
[t=0.0225693s, 27048 KB] time to simplify: 0.00113749s
[t=0.0227173s, 27048 KB] Initializing additive heuristic...
[t=0.0227513s, 27048 KB] Initializing FF heuristic...
[t=0.022824s, 27048 KB] Building successor generator...done!
[t=0.0231202s, 27048 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0231433s, 27048 KB] time for successor generation creation: 0.000236372s
[t=0.0231723s, 27048 KB] Variables: 49
[t=0.0232205s, 27048 KB] FactPairs: 650
[t=0.0232296s, 27048 KB] Bytes per state: 20
[t=0.0234933s, 27048 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.023539s, 27048 KB] 46 initial landmarks, 19 goal landmarks
[t=0.0236167s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0236268s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0236359s, 27048 KB] g=0, 1 evaluated, 0 expanded
[t=0.0236572s, 27048 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0236658s, 27048 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0238294s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0238639s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0238732s, 27048 KB] g=2, 6 evaluated, 5 expanded
[t=0.0240056s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0240167s, 27048 KB] g=4, 10 evaluated, 9 expanded
[t=0.0241901s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0242106s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0242194s, 27048 KB] g=6, 15 evaluated, 14 expanded
[t=0.0243708s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0243807s, 27048 KB] g=8, 20 evaluated, 19 expanded
[t=0.0244618s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0244711s, 27048 KB] g=8, 22 evaluated, 21 expanded
[t=0.0246249s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0246339s, 27048 KB] g=10, 27 evaluated, 26 expanded
[t=0.0247793s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0247886s, 27048 KB] g=10, 32 evaluated, 31 expanded
[t=0.0251053s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0251177s, 27048 KB] g=13, 43 evaluated, 42 expanded
[t=0.02543s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0254396s, 27048 KB] g=16, 54 evaluated, 53 expanded
[t=0.0256713s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.025695s, 27048 KB] g=18, 62 evaluated, 61 expanded
[t=0.0260113s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.026023s, 27048 KB] g=20, 73 evaluated, 72 expanded
[t=0.026444s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0264618s, 27048 KB] g=22, 88 evaluated, 87 expanded
[t=0.0267796s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0267923s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0268011s, 27048 KB] g=24, 99 evaluated, 98 expanded
[t=0.0270423s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0270566s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0270649s, 27048 KB] g=26, 107 evaluated, 106 expanded
[t=0.027329s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0273477s, 27048 KB] g=28, 115 evaluated, 114 expanded
[t=0.0274619s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0274747s, 27048 KB] g=28, 118 evaluated, 117 expanded
[t=0.0282333s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0282558s, 27048 KB] g=30, 137 evaluated, 136 expanded
[t=0.028305s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0283145s, 27048 KB] g=31, 138 evaluated, 137 expanded
[t=0.0283909s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0284001s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0284084s, 27048 KB] g=32, 140 evaluated, 139 expanded
[t=0.0287208s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0287319s, 27048 KB] g=34, 150 evaluated, 149 expanded
[t=0.028838s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0288468s, 27048 KB] g=34, 153 evaluated, 152 expanded
[t=0.0294025s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0294141s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0294229s, 27048 KB] g=36, 172 evaluated, 171 expanded
[t=0.0296716s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0296809s, 27048 KB] g=38, 180 evaluated, 179 expanded
[t=0.0297489s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0297577s, 27048 KB] g=38, 182 evaluated, 181 expanded
[t=0.0301053s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.030115s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0301232s, 27048 KB] g=40, 194 evaluated, 193 expanded
[t=0.0303038s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0303131s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.030321s, 27048 KB] g=42, 200 evaluated, 199 expanded
[t=0.0308063s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0308158s, 27048 KB] g=45, 217 evaluated, 216 expanded
[t=0.0308612s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0308701s, 27048 KB] g=46, 218 evaluated, 217 expanded
[t=0.0310516s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0310603s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0310684s, 27048 KB] g=48, 224 evaluated, 223 expanded
[t=0.0312761s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0312849s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0312928s, 27048 KB] g=50, 231 evaluated, 230 expanded
[t=0.0316659s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0316751s, 27048 KB] g=53, 244 evaluated, 243 expanded
[t=0.0317435s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0317529s, 27048 KB] g=54, 246 evaluated, 245 expanded
[t=0.0319011s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0319099s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0319179s, 27048 KB] g=56, 251 evaluated, 250 expanded
[t=0.0324252s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0324359s, 27048 KB] g=60, 268 evaluated, 267 expanded
[t=0.0325763s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0325857s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0326044s, 27048 KB] g=62, 272 evaluated, 271 expanded
[t=0.0334034s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0334158s, 27048 KB] g=70, 299 evaluated, 298 expanded
[t=0.0335891s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0335979s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.033606s, 27048 KB] g=72, 305 evaluated, 304 expanded
[t=0.0342752s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0342847s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0342935s, 27048 KB] g=80, 329 evaluated, 328 expanded
[t=0.0343584s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0343674s, 27048 KB] g=80, 331 evaluated, 330 expanded
[t=0.0344585s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0344675s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0344758s, 27048 KB] g=82, 334 evaluated, 333 expanded
[t=0.073751s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0738378s, 27048 KB] g=146, 1753 evaluated, 1752 expanded
[t=0.073953s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0739632s, 27048 KB] g=148, 1757 evaluated, 1756 expanded
[t=0.0752872s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0753053s, 27048 KB] g=160, 1811 evaluated, 1810 expanded
[t=0.075511s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0755204s, 27048 KB] g=164, 1820 evaluated, 1819 expanded
[t=0.0755927s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.075616s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0756392s, 27048 KB] g=166, 1823 evaluated, 1822 expanded
[t=0.0767649s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0767786s, 27048 KB] g=184, 1880 evaluated, 1879 expanded
[t=0.0768398s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0768493s, 27048 KB] g=186, 1883 evaluated, 1882 expanded
[t=0.0770463s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0770555s, 27048 KB] g=194, 1895 evaluated, 1894 expanded
[t=0.0770797s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0770888s, 27048 KB] g=194, 1896 evaluated, 1895 expanded
[t=0.0771086s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0771317s, 27048 KB] g=195, 1897 evaluated, 1896 expanded
[t=0.0771469s, 27048 KB] Solution found!
[t=0.0771619s, 27048 KB] Actual search time: 0.0536252s
unstack b12 b15 (1)
put-down b12 (1)
unstack b15 b13 (1)
put-down b15 (1)
unstack b13 b14 (1)
put-down b13 (1)
unstack b14 b7 (1)
stack b14 b16 (1)
unstack b7 b23 (1)
put-down b7 (1)
unstack b17 b20 (1)
put-down b17 (1)
unstack b20 b24 (1)
put-down b20 (1)
unstack b14 b16 (1)
put-down b14 (1)
unstack b23 b11 (1)
put-down b23 (1)
unstack b11 b5 (1)
put-down b11 (1)
unstack b5 b6 (1)
stack b5 b23 (1)
unstack b6 b10 (1)
stack b6 b11 (1)
unstack b10 b21 (1)
stack b10 b5 (1)
unstack b21 b3 (1)
put-down b21 (1)
unstack b3 b1 (1)
stack b3 b15 (1)
unstack b1 b9 (1)
stack b1 b12 (1)
unstack b9 b8 (1)
stack b9 b17 (1)
pick-up b20 (1)
stack b20 b9 (1)
pick-up b16 (1)
stack b16 b3 (1)
pick-up b14 (1)
stack b14 b16 (1)
pick-up b21 (1)
stack b21 b14 (1)
unstack b8 b4 (1)
put-down b8 (1)
unstack b4 b19 (1)
stack b4 b21 (1)
unstack b19 b22 (1)
stack b19 b24 (1)
pick-up b8 (1)
stack b8 b4 (1)
unstack b22 b18 (1)
put-down b22 (1)
pick-up b18 (1)
stack b18 b8 (1)
pick-up b22 (1)
stack b22 b18 (1)
unstack b6 b11 (1)
put-down b6 (1)
pick-up b11 (1)
stack b11 b22 (1)
pick-up b6 (1)
stack b6 b11 (1)
unstack b20 b9 (1)
put-down b20 (1)
unstack b9 b17 (1)
put-down b9 (1)
pick-up b17 (1)
stack b17 b6 (1)
pick-up b9 (1)
stack b9 b17 (1)
pick-up b20 (1)
stack b20 b9 (1)
unstack b10 b5 (1)
put-down b10 (1)
unstack b5 b23 (1)
put-down b5 (1)
pick-up b23 (1)
stack b23 b19 (1)
pick-up b5 (1)
stack b5 b23 (1)
pick-up b10 (1)
stack b10 b5 (1)
unstack b20 b9 (1)
put-down b20 (1)
unstack b9 b17 (1)
put-down b9 (1)
unstack b17 b6 (1)
put-down b17 (1)
pick-up b9 (1)
stack b9 b17 (1)
pick-up b20 (1)
stack b20 b9 (1)
unstack b6 b11 (1)
put-down b6 (1)
unstack b11 b22 (1)
put-down b11 (1)
unstack b22 b18 (1)
put-down b22 (1)
pick-up b11 (1)
stack b11 b22 (1)
pick-up b6 (1)
stack b6 b11 (1)
unstack b20 b9 (1)
put-down b20 (1)
unstack b9 b17 (1)
put-down b9 (1)
pick-up b17 (1)
stack b17 b6 (1)
pick-up b9 (1)
stack b9 b17 (1)
pick-up b20 (1)
stack b20 b9 (1)
unstack b18 b8 (1)
put-down b18 (1)
unstack b8 b4 (1)
put-down b8 (1)
pick-up b18 (1)
stack b18 b8 (1)
unstack b4 b21 (1)
put-down b4 (1)
unstack b21 b14 (1)
put-down b21 (1)
pick-up b4 (1)
stack b4 b21 (1)
unstack b18 b8 (1)
put-down b18 (1)
pick-up b8 (1)
stack b8 b4 (1)
pick-up b18 (1)
stack b18 b8 (1)
unstack b14 b16 (1)
put-down b14 (1)
unstack b16 b3 (1)
put-down b16 (1)
pick-up b14 (1)
stack b14 b16 (1)
unstack b3 b15 (1)
put-down b3 (1)
pick-up b15 (1)
stack b15 b10 (1)
pick-up b3 (1)
stack b3 b15 (1)
unstack b14 b16 (1)
put-down b14 (1)
pick-up b16 (1)
stack b16 b3 (1)
pick-up b14 (1)
stack b14 b16 (1)
unstack b18 b8 (1)
put-down b18 (1)
unstack b8 b4 (1)
put-down b8 (1)
pick-up b18 (1)
stack b18 b8 (1)
unstack b4 b21 (1)
put-down b4 (1)
pick-up b21 (1)
stack b21 b14 (1)
pick-up b4 (1)
stack b4 b21 (1)
unstack b18 b8 (1)
put-down b18 (1)
pick-up b8 (1)
stack b8 b4 (1)
pick-up b18 (1)
stack b18 b8 (1)
unstack b20 b9 (1)
put-down b20 (1)
unstack b9 b17 (1)
put-down b9 (1)
unstack b17 b6 (1)
put-down b17 (1)
pick-up b9 (1)
stack b9 b17 (1)
pick-up b20 (1)
stack b20 b9 (1)
unstack b6 b11 (1)
put-down b6 (1)
unstack b11 b22 (1)
put-down b11 (1)
pick-up b22 (1)
stack b22 b18 (1)
pick-up b11 (1)
stack b11 b22 (1)
pick-up b6 (1)
stack b6 b11 (1)
unstack b20 b9 (1)
put-down b20 (1)
unstack b9 b17 (1)
put-down b9 (1)
pick-up b17 (1)
stack b17 b6 (1)
pick-up b9 (1)
stack b9 b17 (1)
pick-up b20 (1)
stack b20 b9 (1)
[t=0.0771785s, 27048 KB] Plan length: 196 step(s).
[t=0.0771785s, 27048 KB] Plan cost: 196
[t=0.0771785s, 27048 KB] Expanded 1897 state(s).
[t=0.0771785s, 27048 KB] Reopened 0 state(s).
[t=0.0771785s, 27048 KB] Evaluated 1898 state(s).
[t=0.0771785s, 27048 KB] Evaluations: 3796
[t=0.0771785s, 27048 KB] Generated 19247 state(s).
[t=0.0771785s, 27048 KB] Dead ends: 0 state(s).
[t=0.0771785s, 27048 KB] Number of registered states: 1898
[t=0.0771785s, 27048 KB] Int hash set load factor: 1898/2048 = 0.926758
[t=0.0771785s, 27048 KB] Int hash set resizes: 11
[t=0.0771785s, 27048 KB] Search time: 0.053686s
[t=0.0771785s, 27048 KB] Total time: 0.0771785s
Solution found.
Peak memory: 27048 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.24s
