INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_20/bws_problem_20_95.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.008s wall-clock]
1342 relevant atoms
900 auxiliary atoms
2242 final queue length
3887 total queue pushes
Completing instantiation... [0.010s CPU, 0.013s wall-clock]
Instantiating: [0.020s CPU, 0.023s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
21 uncovered facts
Choosing groups: [0.010s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.003s wall-clock]
Translating task: [0.020s CPU, 0.026s wall-clock]
1180 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
40 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.017s wall-clock]
Reordering and filtering variables...
41 of 41 variables necessary.
21 of 41 mutex groups necessary.
800 of 800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.007s wall-clock]
Translator variables: 41
Translator derived variables: 0
Translator facts: 462
Translator goal facts: 18
Translator mutex groups: 21
Translator total mutex groups size: 441
Translator operators: 800
Translator axioms: 0
Translator task size: 6902
Translator peak memory: 35944 KB
Writing output... [0.010s CPU, 0.006s wall-clock]
Done! [0.090s CPU, 0.091s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=3.3865e-05s, 24488 KB] reading input...
[t=0.00235882s, 25180 KB] done reading input!
[t=0.00322748s, 25444 KB] Initializing landmark count heuristic...
[t=0.00326691s, 25444 KB] Generating landmark graph...
[t=0.00334235s, 25576 KB] Building a landmark graph with reasonable orders.
[t=0.00340822s, 25576 KB] Initializing Exploration...
[t=0.00368247s, 25744 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0122516s, 26272 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0123308s, 26272 KB] Landmarks generation time: 0.00898799s
[t=0.012345s, 26272 KB] Discovered 92 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0123615s, 26272 KB] 485 edges
[t=0.0123716s, 26272 KB] approx. reasonable orders
[t=0.0151484s, 26272 KB] approx. obedient reasonable orders
[t=0.0155463s, 26272 KB] Removed 4 reasonable or obedient reasonable orders
[t=0.0155633s, 26272 KB] Landmarks generation time: 0.0122929s
[t=0.0155744s, 26272 KB] Discovered 92 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0155846s, 26272 KB] 568 edges
[t=0.0155933s, 26272 KB] Landmark graph generation time: 0.0123337s
[t=0.0156019s, 26272 KB] Landmark graph contains 92 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0156104s, 26272 KB] Landmark graph contains 568 orderings.
[t=0.015934s, 26272 KB] Simplifying 3160 unary operators... done! [2400 unary operators]
[t=0.0166734s, 26272 KB] time to simplify: 0.000795754s
[t=0.0167796s, 26272 KB] Initializing additive heuristic...
[t=0.0167943s, 26272 KB] Initializing FF heuristic...
[t=0.0168514s, 26272 KB] Building successor generator...done!
[t=0.0170152s, 26272 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0170235s, 26272 KB] time for successor generation creation: 0.000132864s
[t=0.0170348s, 26272 KB] Variables: 41
[t=0.0170429s, 26272 KB] FactPairs: 462
[t=0.0170508s, 26272 KB] Bytes per state: 16
[t=0.0171537s, 26272 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0171937s, 26272 KB] 41 initial landmarks, 18 goal landmarks
[t=0.0172427s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0172521s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0172606s, 26272 KB] g=0, 1 evaluated, 0 expanded
[t=0.0172751s, 26272 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0172839s, 26272 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0174696s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0174805s, 26272 KB] g=2, 9 evaluated, 8 expanded
[t=0.0179933s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0180064s, 26272 KB] g=4, 34 evaluated, 33 expanded
[t=0.0181379s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0181477s, 26272 KB] g=6, 40 evaluated, 39 expanded
[t=0.0181985s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0182078s, 26272 KB] g=6, 42 evaluated, 41 expanded
[t=0.018476s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0184906s, 26272 KB] g=8, 55 evaluated, 54 expanded
[t=0.0185709s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0185969s, 26272 KB] g=8, 58 evaluated, 57 expanded
[t=0.0190206s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0190415s, 26272 KB] g=10, 76 evaluated, 75 expanded
[t=0.0202656s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0203398s, 26272 KB] g=14, 125 evaluated, 124 expanded
[t=0.0208077s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0208221s, 26272 KB] g=16, 147 evaluated, 146 expanded
[t=0.0214748s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0214857s, 26272 KB] g=20, 179 evaluated, 178 expanded
[t=0.0230142s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0230371s, 26272 KB] g=26, 252 evaluated, 251 expanded
[t=0.0233582s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0233699s, 26272 KB] g=28, 266 evaluated, 265 expanded
[t=0.0249297s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0249513s, 26272 KB] g=34, 338 evaluated, 337 expanded
[t=0.0257392s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.02575s, 26272 KB] g=40, 375 evaluated, 374 expanded
[t=0.0262186s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0262495s, 26272 KB] g=44, 396 evaluated, 395 expanded
[t=0.0265233s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0265387s, 26272 KB] g=46, 408 evaluated, 407 expanded
[t=0.0268279s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0268371s, 26272 KB] g=48, 421 evaluated, 420 expanded
[t=0.0270957s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0271053s, 26272 KB] g=50, 433 evaluated, 432 expanded
[t=0.0273382s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0273472s, 26272 KB] g=16, 444 evaluated, 443 expanded
[t=0.0276699s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0276797s, 26272 KB] g=52, 459 evaluated, 458 expanded
[t=0.0279607s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0279697s, 26272 KB] g=54, 472 evaluated, 471 expanded
[t=0.0281227s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0281316s, 26272 KB] g=56, 479 evaluated, 478 expanded
[t=0.0330568s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0331655s, 26272 KB] g=70, 703 evaluated, 702 expanded
[t=0.0352198s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0352584s, 26272 KB] g=78, 800 evaluated, 799 expanded
[t=0.0354291s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.03544s, 26272 KB] g=78, 807 evaluated, 806 expanded
[t=0.035618s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0356335s, 26272 KB] g=80, 815 evaluated, 814 expanded
[t=0.0412228s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0413316s, 26272 KB] g=96, 1068 evaluated, 1067 expanded
[t=0.042523s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0425374s, 26272 KB] g=104, 1123 evaluated, 1122 expanded
[t=0.0426429s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0426521s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.04266s, 26272 KB] g=104, 1128 evaluated, 1127 expanded
[t=0.0426885s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0426971s, 26272 KB] g=105, 1129 evaluated, 1128 expanded
[t=0.0427635s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0427721s, 26272 KB] g=106, 1132 evaluated, 1131 expanded
[t=0.0428984s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0429153s, 26272 KB] g=108, 1138 evaluated, 1137 expanded
[t=0.0432614s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0432776s, 26272 KB] g=110, 1154 evaluated, 1153 expanded
[t=0.0434446s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0434544s, 26272 KB] g=112, 1162 evaluated, 1161 expanded
[t=0.0436947s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0437043s, 26272 KB] g=114, 1174 evaluated, 1173 expanded
[t=0.0439357s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0439543s, 26272 KB] g=116, 1186 evaluated, 1185 expanded
[t=0.0442403s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.04425s, 26272 KB] g=118, 1202 evaluated, 1201 expanded
[t=0.044543s, 26272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0445531s, 26272 KB] g=120, 1219 evaluated, 1218 expanded
[t=0.0506819s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0507036s, 26272 KB] g=140, 1585 evaluated, 1584 expanded
[t=0.0510195s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0510298s, 26272 KB] g=144, 1604 evaluated, 1603 expanded
[t=0.0511177s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0511265s, 26272 KB] g=146, 1609 evaluated, 1608 expanded
[t=0.0522202s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0522326s, 26272 KB] g=162, 1680 evaluated, 1679 expanded
[t=0.0524907s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0525008s, 26272 KB] g=170, 1697 evaluated, 1696 expanded
[t=0.0525683s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.052578s, 26272 KB] g=174, 1702 evaluated, 1701 expanded
[t=0.052605s, 26272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0526166s, 26272 KB] g=175, 1703 evaluated, 1702 expanded
[t=0.0526319s, 26272 KB] Solution found!
[t=0.0526491s, 26272 KB] Actual search time: 0.0354533s
unstack b16 b2 (1)
put-down b16 (1)
unstack b18 b9 (1)
put-down b18 (1)
unstack b2 b10 (1)
stack b2 b16 (1)
pick-up b14 (1)
stack b14 b9 (1)
unstack b10 b11 (1)
put-down b10 (1)
unstack b11 b1 (1)
put-down b11 (1)
unstack b1 b8 (1)
put-down b1 (1)
pick-up b3 (1)
stack b3 b8 (1)
unstack b20 b6 (1)
put-down b20 (1)
pick-up b6 (1)
stack b6 b11 (1)
unstack b14 b9 (1)
put-down b14 (1)
unstack b9 b17 (1)
stack b9 b20 (1)
pick-up b14 (1)
stack b14 b9 (1)
pick-up b17 (1)
stack b17 b1 (1)
unstack b2 b16 (1)
put-down b2 (1)
pick-up b16 (1)
stack b16 b6 (1)
pick-up b2 (1)
stack b2 b16 (1)
unstack b3 b8 (1)
put-down b3 (1)
unstack b8 b5 (1)
stack b8 b18 (1)
pick-up b3 (1)
stack b3 b8 (1)
unstack b5 b4 (1)
put-down b5 (1)
unstack b4 b15 (1)
stack b4 b14 (1)
unstack b15 b19 (1)
stack b15 b4 (1)
unstack b19 b7 (1)
stack b19 b2 (1)
unstack b7 b13 (1)
stack b7 b5 (1)
unstack b13 b12 (1)
put-down b13 (1)
pick-up b10 (1)
stack b10 b7 (1)
pick-up b12 (1)
stack b12 b15 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b7 b5 (1)
put-down b7 (1)
pick-up b10 (1)
stack b10 b7 (1)
pick-up b5 (1)
stack b5 b12 (1)
unstack b10 b7 (1)
put-down b10 (1)
pick-up b7 (1)
stack b7 b5 (1)
pick-up b10 (1)
stack b10 b7 (1)
unstack b3 b8 (1)
put-down b3 (1)
unstack b8 b18 (1)
put-down b8 (1)
pick-up b18 (1)
stack b18 b13 (1)
pick-up b8 (1)
stack b8 b18 (1)
pick-up b3 (1)
stack b3 b8 (1)
unstack b19 b2 (1)
put-down b19 (1)
unstack b2 b16 (1)
put-down b2 (1)
unstack b16 b6 (1)
put-down b16 (1)
pick-up b2 (1)
stack b2 b16 (1)
pick-up b19 (1)
stack b19 b2 (1)
unstack b6 b11 (1)
put-down b6 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b6 (1)
stack b6 b11 (1)
unstack b19 b2 (1)
put-down b19 (1)
unstack b2 b16 (1)
put-down b2 (1)
pick-up b16 (1)
stack b16 b6 (1)
pick-up b2 (1)
stack b2 b16 (1)
pick-up b19 (1)
stack b19 b2 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b7 b5 (1)
put-down b7 (1)
pick-up b10 (1)
stack b10 b7 (1)
unstack b5 b12 (1)
put-down b5 (1)
unstack b12 b15 (1)
put-down b12 (1)
unstack b15 b4 (1)
put-down b15 (1)
pick-up b12 (1)
stack b12 b15 (1)
pick-up b5 (1)
stack b5 b12 (1)
unstack b10 b7 (1)
put-down b10 (1)
pick-up b7 (1)
stack b7 b5 (1)
pick-up b10 (1)
stack b10 b7 (1)
unstack b4 b14 (1)
put-down b4 (1)
unstack b14 b9 (1)
put-down b14 (1)
pick-up b4 (1)
stack b4 b14 (1)
unstack b9 b20 (1)
put-down b9 (1)
pick-up b20 (1)
stack b20 b19 (1)
pick-up b9 (1)
stack b9 b20 (1)
unstack b4 b14 (1)
put-down b4 (1)
pick-up b14 (1)
stack b14 b9 (1)
pick-up b4 (1)
stack b4 b14 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b7 b5 (1)
put-down b7 (1)
unstack b5 b12 (1)
put-down b5 (1)
pick-up b7 (1)
stack b7 b5 (1)
pick-up b10 (1)
stack b10 b7 (1)
unstack b12 b15 (1)
put-down b12 (1)
pick-up b15 (1)
stack b15 b4 (1)
pick-up b12 (1)
stack b12 b15 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b7 b5 (1)
put-down b7 (1)
pick-up b10 (1)
stack b10 b7 (1)
pick-up b5 (1)
stack b5 b12 (1)
unstack b10 b7 (1)
put-down b10 (1)
pick-up b7 (1)
stack b7 b5 (1)
pick-up b10 (1)
stack b10 b7 (1)
[t=0.0526594s, 26272 KB] Plan length: 176 step(s).
[t=0.0526594s, 26272 KB] Plan cost: 176
[t=0.0526594s, 26272 KB] Expanded 1703 state(s).
[t=0.0526594s, 26272 KB] Reopened 0 state(s).
[t=0.0526594s, 26272 KB] Evaluated 1704 state(s).
[t=0.0526594s, 26272 KB] Evaluations: 3408
[t=0.0526594s, 26272 KB] Generated 15240 state(s).
[t=0.0526594s, 26272 KB] Dead ends: 0 state(s).
[t=0.0526594s, 26272 KB] Number of registered states: 1704
[t=0.0526594s, 26272 KB] Int hash set load factor: 1704/2048 = 0.832031
[t=0.0526594s, 26272 KB] Int hash set resizes: 11
[t=0.0526594s, 26272 KB] Search time: 0.0355064s
[t=0.0526594s, 26272 KB] Total time: 0.0526594s
Solution found.
Peak memory: 26272 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.19s
