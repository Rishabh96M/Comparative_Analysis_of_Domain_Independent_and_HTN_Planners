INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_17.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4271 total queue pushes
Completing instantiation... [0.010s CPU, 0.015s wall-clock]
Instantiating: [0.020s CPU, 0.025s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.022s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.011s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.005s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 19
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7604
Translator peak memory: 36456 KB
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.079s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.1183e-05s, 24488 KB] reading input...
[t=0.00291613s, 25268 KB] done reading input!
[t=0.0049451s, 25664 KB] Initializing landmark count heuristic...
[t=0.00507822s, 25664 KB] Generating landmark graph...
[t=0.00522353s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00534361s, 25664 KB] Initializing Exploration...
[t=0.00566187s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0149624s, 26248 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0150601s, 26248 KB] Landmarks generation time: 0.00982687s
[t=0.0150734s, 26248 KB] Discovered 96 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0151029s, 26248 KB] 326 edges
[t=0.0151214s, 26248 KB] approx. reasonable orders
[t=0.0182903s, 26248 KB] approx. obedient reasonable orders
[t=0.0187293s, 26248 KB] Removed 14 reasonable or obedient reasonable orders
[t=0.018748s, 26248 KB] Landmarks generation time: 0.013652s
[t=0.0187593s, 26248 KB] Discovered 96 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0187686s, 26248 KB] 426 edges
[t=0.0187773s, 26248 KB] Landmark graph generation time: 0.0137067s
[t=0.0187863s, 26248 KB] Landmark graph contains 96 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.018797s, 26248 KB] Landmark graph contains 426 orderings.
[t=0.0192307s, 26248 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0200985s, 26380 KB] time to simplify: 0.000925507s
[t=0.0202119s, 26380 KB] Initializing additive heuristic...
[t=0.0202261s, 26380 KB] Initializing FF heuristic...
[t=0.0202962s, 26380 KB] Building successor generator...done!
[t=0.020479s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0204886s, 26380 KB] time for successor generation creation: 0.000147881s
[t=0.0205013s, 26380 KB] Variables: 43
[t=0.0205117s, 26380 KB] FactPairs: 506
[t=0.0205278s, 26380 KB] Bytes per state: 16
[t=0.0207496s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0208198s, 26380 KB] 43 initial landmarks, 19 goal landmarks
[t=0.0208999s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0209122s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0209209s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.0209399s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0209488s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0211754s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0211863s, 26380 KB] g=2, 9 evaluated, 8 expanded
[t=0.0212196s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.021229s, 26380 KB] g=2, 10 evaluated, 9 expanded
[t=0.0215424s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0215526s, 26380 KB] g=4, 23 evaluated, 22 expanded
[t=0.0215846s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0215934s, 26380 KB] g=4, 24 evaluated, 23 expanded
[t=0.0218583s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.021869s, 26380 KB] g=6, 35 evaluated, 34 expanded
[t=0.0219691s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0219785s, 26380 KB] g=6, 39 evaluated, 38 expanded
[t=0.0224456s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0224581s, 26380 KB] g=8, 58 evaluated, 57 expanded
[t=0.0228971s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0229169s, 26380 KB] g=10, 77 evaluated, 76 expanded
[t=0.0229555s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0229643s, 26380 KB] g=10, 78 evaluated, 77 expanded
[t=0.0232653s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0232959s, 26380 KB] g=12, 91 evaluated, 90 expanded
[t=0.0234923s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0235044s, 26380 KB] g=12, 99 evaluated, 98 expanded
[t=0.0237102s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0237268s, 26380 KB] g=14, 106 evaluated, 105 expanded
[t=0.0240298s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.024039s, 26380 KB] g=14, 119 evaluated, 118 expanded
[t=0.0246758s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0247014s, 26380 KB] g=16, 143 evaluated, 142 expanded
[t=0.0257063s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0257584s, 26380 KB] g=18, 170 evaluated, 169 expanded
[t=0.0258155s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0258301s, 26380 KB] g=20, 171 evaluated, 170 expanded
[t=0.0268486s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0268823s, 26380 KB] g=20, 198 evaluated, 197 expanded
[t=0.0275496s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.027561s, 26380 KB] g=22, 225 evaluated, 224 expanded
[t=0.0275982s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0276079s, 26380 KB] g=24, 226 evaluated, 225 expanded
[t=0.0282316s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0282415s, 26380 KB] g=24, 252 evaluated, 251 expanded
[t=0.0283969s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0284093s, 26380 KB] g=25, 257 evaluated, 256 expanded
[t=0.02935s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0293642s, 26380 KB] g=28, 295 evaluated, 294 expanded
[t=0.0299843s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0299945s, 26380 KB] g=30, 321 evaluated, 320 expanded
[t=0.0303003s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0303097s, 26380 KB] g=32, 334 evaluated, 333 expanded
[t=0.030622s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0306313s, 26380 KB] g=34, 347 evaluated, 346 expanded
[t=0.0367742s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0368517s, 26380 KB] g=46, 586 evaluated, 585 expanded
[t=0.0371831s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0371944s, 26380 KB] g=48, 600 evaluated, 599 expanded
[t=0.0375558s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0375654s, 26380 KB] g=50, 615 evaluated, 614 expanded
[t=0.0379214s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0379353s, 26380 KB] g=50, 630 evaluated, 629 expanded
[t=0.0382714s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0382804s, 26380 KB] g=52, 644 evaluated, 643 expanded
[t=0.0401219s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0401348s, 26380 KB] g=58, 723 evaluated, 722 expanded
[t=0.0452538s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0452979s, 26380 KB] g=66, 890 evaluated, 889 expanded
[t=0.0463847s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0463959s, 26380 KB] g=70, 939 evaluated, 938 expanded
[t=0.0465845s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0465935s, 26380 KB] g=72, 947 evaluated, 946 expanded
[t=0.0516871s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0517239s, 26380 KB] g=84, 1173 evaluated, 1172 expanded
[t=0.0524956s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0525407s, 26380 KB] g=88, 1209 evaluated, 1208 expanded
[t=0.052781s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.052801s, 26380 KB] g=90, 1216 evaluated, 1215 expanded
[t=0.0601696s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0602399s, 26512 KB] g=110, 1560 evaluated, 1559 expanded
[t=0.060405s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0604162s, 26512 KB] g=112, 1568 evaluated, 1567 expanded
[t=0.0614142s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0614269s, 26512 KB] g=122, 1616 evaluated, 1615 expanded
[t=0.0661189s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.066135s, 26512 KB] g=136, 1866 evaluated, 1865 expanded
[t=0.0662739s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0662829s, 26512 KB] g=140, 1875 evaluated, 1874 expanded
[t=0.066333s, 26512 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0663436s, 26512 KB] g=142, 1878 evaluated, 1877 expanded
[t=0.0678783s, 26644 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0679079s, 26644 KB] g=158, 1960 evaluated, 1959 expanded
[t=0.0683571s, 26644 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0683694s, 26644 KB] g=166, 1983 evaluated, 1982 expanded
[t=0.06846s, 26644 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0684703s, 26644 KB] g=166, 1987 evaluated, 1986 expanded
[t=0.0685108s, 26644 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.06852s, 26644 KB] g=167, 1989 evaluated, 1988 expanded
[t=0.0685588s, 26644 KB] Solution found!
[t=0.0685735s, 26644 KB] Actual search time: 0.0477453s
unstack b11 b7 (1)
stack b11 b17 (1)
unstack b18 b20 (1)
stack b18 b11 (1)
pick-up b14 (1)
stack b14 b20 (1)
unstack b7 b9 (1)
put-down b7 (1)
unstack b9 b15 (1)
stack b9 b14 (1)
unstack b15 b19 (1)
put-down b15 (1)
unstack b16 b21 (1)
put-down b16 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b21 b5 (1)
put-down b21 (1)
unstack b5 b8 (1)
put-down b5 (1)
pick-up b2 (1)
stack b2 b8 (1)
pick-up b7 (1)
stack b7 b5 (1)
unstack b2 b8 (1)
put-down b2 (1)
unstack b8 b1 (1)
stack b8 b7 (1)
unstack b1 b6 (1)
stack b1 b9 (1)
pick-up b2 (1)
stack b2 b8 (1)
pick-up b21 (1)
stack b21 b1 (1)
unstack b18 b11 (1)
put-down b18 (1)
unstack b11 b17 (1)
put-down b11 (1)
pick-up b18 (1)
stack b18 b11 (1)
unstack b17 b3 (1)
put-down b17 (1)
unstack b3 b13 (1)
put-down b3 (1)
unstack b13 b10 (1)
stack b13 b21 (1)
unstack b10 b12 (1)
stack b10 b19 (1)
pick-up b6 (1)
stack b6 b3 (1)
pick-up b12 (1)
stack b12 b6 (1)
unstack b18 b11 (1)
put-down b18 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b18 (1)
stack b18 b11 (1)
unstack b10 b19 (1)
put-down b10 (1)
unstack b19 b16 (1)
put-down b19 (1)
pick-up b10 (1)
stack b10 b19 (1)
pick-up b16 (1)
stack b16 b12 (1)
unstack b10 b19 (1)
put-down b10 (1)
pick-up b19 (1)
stack b19 b16 (1)
pick-up b10 (1)
stack b10 b19 (1)
unstack b2 b8 (1)
put-down b2 (1)
unstack b8 b7 (1)
put-down b8 (1)
pick-up b2 (1)
stack b2 b8 (1)
unstack b7 b5 (1)
put-down b7 (1)
pick-up b5 (1)
stack b5 b10 (1)
pick-up b7 (1)
stack b7 b5 (1)
unstack b2 b8 (1)
put-down b2 (1)
pick-up b8 (1)
stack b8 b7 (1)
pick-up b2 (1)
stack b2 b8 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b1 (1)
put-down b21 (1)
unstack b1 b9 (1)
put-down b1 (1)
pick-up b21 (1)
stack b21 b1 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b9 b14 (1)
put-down b9 (1)
unstack b14 b20 (1)
put-down b14 (1)
unstack b20 b4 (1)
stack b20 b18 (1)
pick-up b14 (1)
stack b14 b20 (1)
pick-up b4 (1)
stack b4 b2 (1)
unstack b14 b20 (1)
put-down b14 (1)
pick-up b9 (1)
stack b9 b14 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b1 (1)
put-down b21 (1)
pick-up b1 (1)
stack b1 b9 (1)
pick-up b21 (1)
stack b21 b1 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b20 b18 (1)
put-down b20 (1)
unstack b18 b11 (1)
put-down b18 (1)
pick-up b20 (1)
stack b20 b18 (1)
unstack b11 b17 (1)
put-down b11 (1)
pick-up b17 (1)
stack b17 b4 (1)
pick-up b11 (1)
stack b11 b17 (1)
unstack b20 b18 (1)
put-down b20 (1)
pick-up b18 (1)
stack b18 b11 (1)
pick-up b20 (1)
stack b20 b18 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b1 (1)
put-down b21 (1)
unstack b1 b9 (1)
put-down b1 (1)
pick-up b21 (1)
stack b21 b1 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b9 b14 (1)
put-down b9 (1)
pick-up b14 (1)
stack b14 b20 (1)
pick-up b9 (1)
stack b9 b14 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b1 (1)
put-down b21 (1)
pick-up b1 (1)
stack b1 b9 (1)
pick-up b21 (1)
stack b21 b1 (1)
pick-up b13 (1)
stack b13 b21 (1)
[t=0.0685832s, 26644 KB] Plan length: 168 step(s).
[t=0.0685832s, 26644 KB] Plan cost: 168
[t=0.0685832s, 26644 KB] Expanded 1990 state(s).
[t=0.0685832s, 26644 KB] Reopened 0 state(s).
[t=0.0685832s, 26644 KB] Evaluated 1991 state(s).
[t=0.0685832s, 26644 KB] Evaluations: 3982
[t=0.0685832s, 26644 KB] Generated 25915 state(s).
[t=0.0685832s, 26644 KB] Dead ends: 0 state(s).
[t=0.0685832s, 26644 KB] Number of registered states: 1991
[t=0.0685832s, 26644 KB] Int hash set load factor: 1991/2048 = 0.972168
[t=0.0685832s, 26644 KB] Int hash set resizes: 11
[t=0.0685832s, 26644 KB] Search time: 0.0478348s
[t=0.0685832s, 26644 KB] Total time: 0.0685832s
Solution found.
Peak memory: 26644 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.19s
