INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_23/bws_problem_23_63.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.011s wall-clock]
1750 relevant atoms
1173 auxiliary atoms
2923 final queue length
5088 total queue pushes
Completing instantiation... [0.020s CPU, 0.019s wall-clock]
Instantiating: [0.030s CPU, 0.033s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
24 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.027s wall-clock]
1564 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
46 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.014s wall-clock]
Reordering and filtering variables...
47 of 47 variables necessary.
24 of 47 mutex groups necessary.
1058 of 1058 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.007s wall-clock]
Translator variables: 47
Translator derived variables: 0
Translator facts: 600
Translator goal facts: 18
Translator mutex groups: 24
Translator total mutex groups size: 576
Translator operators: 1058
Translator axioms: 0
Translator task size: 9107
Translator peak memory: 37232 KB
Writing output... [0.010s CPU, 0.006s wall-clock]
Done! [0.100s CPU, 0.100s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9495e-05s, 24488 KB] reading input...
[t=0.0029879s, 25428 KB] done reading input!
[t=0.00380085s, 25824 KB] Initializing landmark count heuristic...
[t=0.0038296s, 25824 KB] Generating landmark graph...
[t=0.00391103s, 25824 KB] Building a landmark graph with reasonable orders.
[t=0.0040057s, 25956 KB] Initializing Exploration...
[t=0.00438129s, 26256 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0174804s, 26652 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0175867s, 26652 KB] Landmarks generation time: 0.0136771s
[t=0.0176026s, 26652 KB] Discovered 101 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0176188s, 26652 KB] 454 edges
[t=0.0176284s, 26652 KB] approx. reasonable orders
[t=0.0207688s, 26652 KB] approx. obedient reasonable orders
[t=0.0208599s, 26652 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0208704s, 26652 KB] Landmarks generation time: 0.017038s
[t=0.0208801s, 26652 KB] Discovered 101 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0208884s, 26652 KB] 522 edges
[t=0.0208972s, 26652 KB] Landmark graph generation time: 0.0170749s
[t=0.020906s, 26652 KB] Landmark graph contains 101 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0209139s, 26652 KB] Landmark graph contains 522 orderings.
[t=0.0212574s, 26652 KB] Simplifying 4186 unary operators... done! [3174 unary operators]
[t=0.0223385s, 26652 KB] time to simplify: 0.00115189s
[t=0.0225119s, 26652 KB] Initializing additive heuristic...
[t=0.0225293s, 26652 KB] Initializing FF heuristic...
[t=0.0225821s, 26652 KB] Building successor generator...done!
[t=0.0227918s, 26652 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0228011s, 26652 KB] time for successor generation creation: 0.000176672s
[t=0.0228132s, 26652 KB] Variables: 47
[t=0.0228216s, 26652 KB] FactPairs: 600
[t=0.0228295s, 26652 KB] Bytes per state: 20
[t=0.0229212s, 26652 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0229548s, 26652 KB] 45 initial landmarks, 18 goal landmarks
[t=0.0230055s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0230151s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0230241s, 26652 KB] g=0, 1 evaluated, 0 expanded
[t=0.0230388s, 26652 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0230474s, 26652 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0232s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0232094s, 26652 KB] g=2, 6 evaluated, 5 expanded
[t=0.0235045s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0235135s, 26652 KB] g=4, 17 evaluated, 16 expanded
[t=0.0236266s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0236355s, 26652 KB] g=6, 21 evaluated, 20 expanded
[t=0.0239549s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0239641s, 26652 KB] g=8, 33 evaluated, 32 expanded
[t=0.0240262s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0240352s, 26652 KB] g=8, 35 evaluated, 34 expanded
[t=0.0242717s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0242806s, 26652 KB] g=10, 44 evaluated, 43 expanded
[t=0.0243152s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.024324s, 26652 KB] g=9, 45 evaluated, 44 expanded
[t=0.024638s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0246521s, 26652 KB] g=11, 56 evaluated, 55 expanded
[t=0.0246914s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0247024s, 26652 KB] g=12, 57 evaluated, 56 expanded
[t=0.025103s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0251242s, 26652 KB] g=14, 70 evaluated, 69 expanded
[t=0.0253569s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0253686s, 26652 KB] g=14, 78 evaluated, 77 expanded
[t=0.0254786s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.025489s, 26652 KB] g=16, 81 evaluated, 80 expanded
[t=0.0261423s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0261931s, 26652 KB] g=16, 100 evaluated, 99 expanded
[t=0.0273304s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0273802s, 26652 KB] g=18, 127 evaluated, 126 expanded
[t=0.0274846s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.027506s, 26652 KB] g=20, 128 evaluated, 127 expanded
[t=0.0290749s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0291418s, 26652 KB] g=20, 173 evaluated, 172 expanded
[t=0.0294617s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0294879s, 26652 KB] g=24, 181 evaluated, 180 expanded
[t=0.0299394s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0299502s, 26652 KB] g=26, 198 evaluated, 197 expanded
[t=0.0300257s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.030041s, 26652 KB] g=22, 200 evaluated, 199 expanded
[t=0.0303262s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0303367s, 26652 KB] g=28, 210 evaluated, 209 expanded
[t=0.0307296s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0307413s, 26652 KB] g=30, 224 evaluated, 223 expanded
[t=0.0309244s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0309349s, 26652 KB] g=24, 230 evaluated, 229 expanded
[t=0.0311371s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0311479s, 26652 KB] g=32, 237 evaluated, 236 expanded
[t=0.0315903s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0316037s, 26652 KB] g=34, 250 evaluated, 249 expanded
[t=0.0319328s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0319448s, 26652 KB] g=36, 261 evaluated, 260 expanded
[t=0.0320092s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0320192s, 26652 KB] g=26, 263 evaluated, 262 expanded
[t=0.0322182s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0322281s, 26652 KB] g=38, 270 evaluated, 269 expanded
[t=0.0325269s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0325382s, 26652 KB] g=40, 280 evaluated, 279 expanded
[t=0.0328693s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0328813s, 26652 KB] g=28, 292 evaluated, 291 expanded
[t=0.0331051s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0331163s, 26652 KB] g=44, 300 evaluated, 299 expanded
[t=0.0335148s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0335262s, 26652 KB] g=29, 314 evaluated, 313 expanded
[t=0.0338547s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0338651s, 26652 KB] g=31, 326 evaluated, 325 expanded
[t=0.034464s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0344779s, 26652 KB] g=48, 348 evaluated, 347 expanded
[t=0.034781s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0347924s, 26652 KB] g=50, 359 evaluated, 358 expanded
[t=0.0350013s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0350279s, 26652 KB] g=52, 366 evaluated, 365 expanded
[t=0.0360007s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0360166s, 26652 KB] g=52, 403 evaluated, 402 expanded
[t=0.0360598s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0360696s, 26652 KB] g=34, 404 evaluated, 403 expanded
[t=0.0364055s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0364185s, 26652 KB] g=54, 411 evaluated, 410 expanded
[t=0.0369022s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0369119s, 26652 KB] g=36, 430 evaluated, 429 expanded
[t=0.0377228s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0377339s, 26652 KB] g=38, 462 evaluated, 461 expanded
[t=0.0379428s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0379526s, 26652 KB] g=39, 470 evaluated, 469 expanded
[t=0.0381372s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0381471s, 26652 KB] g=62, 477 evaluated, 476 expanded
[t=0.0382772s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0382871s, 26652 KB] g=62, 482 evaluated, 481 expanded
[t=0.0384537s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0384651s, 26652 KB] g=64, 488 evaluated, 487 expanded
[t=0.038885s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.038896s, 26652 KB] g=42, 504 evaluated, 503 expanded
[t=0.0393637s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0393742s, 26652 KB] g=76, 525 evaluated, 524 expanded
[t=0.0394237s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0394328s, 26652 KB] g=77, 527 evaluated, 526 expanded
[t=0.0395282s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0395377s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0395463s, 26652 KB] g=80, 531 evaluated, 530 expanded
[t=0.0395651s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0395742s, 26652 KB] g=81, 532 evaluated, 531 expanded
[t=0.0395906s, 26652 KB] Solution found!
[t=0.0396027s, 26652 KB] Actual search time: 0.0166456s
unstack b10 b12 (1)
put-down b10 (1)
unstack b11 b20 (1)
put-down b11 (1)
unstack b12 b1 (1)
put-down b12 (1)
unstack b20 b22 (1)
stack b20 b12 (1)
unstack b1 b9 (1)
stack b1 b10 (1)
unstack b9 b16 (1)
put-down b9 (1)
pick-up b11 (1)
stack b11 b1 (1)
unstack b16 b19 (1)
stack b16 b20 (1)
unstack b22 b15 (1)
put-down b22 (1)
unstack b15 b2 (1)
stack b15 b11 (1)
unstack b19 b18 (1)
put-down b19 (1)
unstack b2 b21 (1)
stack b2 b18 (1)
unstack b3 b7 (1)
stack b3 b21 (1)
unstack b7 b6 (1)
put-down b7 (1)
unstack b6 b17 (1)
put-down b6 (1)
unstack b17 b8 (1)
stack b17 b2 (1)
pick-up b19 (1)
stack b19 b7 (1)
pick-up b22 (1)
stack b22 b17 (1)
unstack b8 b14 (1)
stack b8 b19 (1)
unstack b14 b4 (1)
stack b14 b6 (1)
unstack b4 b13 (1)
put-down b4 (1)
unstack b13 b5 (1)
stack b13 b8 (1)
unstack b3 b21 (1)
put-down b3 (1)
unstack b21 b23 (1)
stack b21 b5 (1)
pick-up b3 (1)
stack b3 b21 (1)
pick-up b23 (1)
stack b23 b3 (1)
pick-up b4 (1)
stack b4 b23 (1)
unstack b16 b20 (1)
put-down b16 (1)
unstack b20 b12 (1)
put-down b20 (1)
pick-up b12 (1)
stack b12 b9 (1)
pick-up b20 (1)
stack b20 b12 (1)
pick-up b16 (1)
stack b16 b20 (1)
unstack b15 b11 (1)
put-down b15 (1)
unstack b11 b1 (1)
put-down b11 (1)
pick-up b15 (1)
stack b15 b11 (1)
unstack b1 b10 (1)
put-down b1 (1)
pick-up b10 (1)
stack b10 b14 (1)
pick-up b1 (1)
stack b1 b10 (1)
unstack b15 b11 (1)
put-down b15 (1)
pick-up b11 (1)
stack b11 b1 (1)
pick-up b15 (1)
stack b15 b11 (1)
[t=0.0396136s, 26652 KB] Plan length: 82 step(s).
[t=0.0396136s, 26652 KB] Plan cost: 82
[t=0.0396136s, 26652 KB] Expanded 532 state(s).
[t=0.0396136s, 26652 KB] Reopened 0 state(s).
[t=0.0396136s, 26652 KB] Evaluated 533 state(s).
[t=0.0396136s, 26652 KB] Evaluations: 1066
[t=0.0396136s, 26652 KB] Generated 6150 state(s).
[t=0.0396136s, 26652 KB] Dead ends: 0 state(s).
[t=0.0396136s, 26652 KB] Number of registered states: 533
[t=0.0396136s, 26652 KB] Int hash set load factor: 533/1024 = 0.520508
[t=0.0396136s, 26652 KB] Int hash set resizes: 10
[t=0.0396136s, 26652 KB] Search time: 0.0166928s
[t=0.0396136s, 26652 KB] Total time: 0.0396136s
Solution found.
Peak memory: 26652 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.19s
