INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_25/bws_problem_25_31.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.013s wall-clock]
2052 relevant atoms
1375 auxiliary atoms
3427 final queue length
5982 total queue pushes
Completing instantiation... [0.020s CPU, 0.021s wall-clock]
Instantiating: [0.040s CPU, 0.036s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
26 uncovered facts
Choosing groups: [0.010s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.032s wall-clock]
1850 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
50 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.019s wall-clock]
Reordering and filtering variables...
51 of 51 variables necessary.
26 of 51 mutex groups necessary.
1250 of 1250 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.008s wall-clock]
Translator variables: 51
Translator derived variables: 0
Translator facts: 702
Translator goal facts: 19
Translator mutex groups: 26
Translator total mutex groups size: 676
Translator operators: 1250
Translator axioms: 0
Translator task size: 10748
Translator peak memory: 38388 KB
Writing output... [0.010s CPU, 0.007s wall-clock]
Done! [0.120s CPU, 0.117s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.6182e-05s, 24488 KB] reading input...
[t=0.00342254s, 25632 KB] done reading input!
[t=0.00438751s, 26028 KB] Initializing landmark count heuristic...
[t=0.00441794s, 26028 KB] Generating landmark graph...
[t=0.00451001s, 26160 KB] Building a landmark graph with reasonable orders.
[t=0.00458789s, 26160 KB] Initializing Exploration...
[t=0.00493657s, 26528 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0210877s, 27056 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0211762s, 27056 KB] Landmarks generation time: 0.016665s
[t=0.0211895s, 27056 KB] Discovered 105 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0212212s, 27056 KB] 351 edges
[t=0.0212311s, 27056 KB] approx. reasonable orders
[t=0.0237386s, 27056 KB] approx. obedient reasonable orders
[t=0.0237686s, 27056 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.023778s, 27056 KB] Landmarks generation time: 0.0193574s
[t=0.0237877s, 27056 KB] Discovered 105 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0237963s, 27056 KB] 386 edges
[t=0.0238051s, 27056 KB] Landmark graph generation time: 0.0193943s
[t=0.0238138s, 27056 KB] Landmark graph contains 105 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0238225s, 27056 KB] Landmark graph contains 386 orderings.
[t=0.0243402s, 27056 KB] Simplifying 4950 unary operators... done! [3750 unary operators]
[t=0.0256199s, 27056 KB] time to simplify: 0.00135505s
[t=0.0257757s, 27056 KB] Initializing additive heuristic...
[t=0.0258044s, 27056 KB] Initializing FF heuristic...
[t=0.0258572s, 27056 KB] Building successor generator...done!
[t=0.0260997s, 27056 KB] peak memory difference for successor generator creation: 0 KB
[t=0.026109s, 27056 KB] time for successor generation creation: 0.000198674s
[t=0.0261211s, 27056 KB] Variables: 51
[t=0.0261291s, 27056 KB] FactPairs: 702
[t=0.0261373s, 27056 KB] Bytes per state: 20
[t=0.0262198s, 27056 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.026252s, 27056 KB] 49 initial landmarks, 19 goal landmarks
[t=0.0263074s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.026317s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0263254s, 27056 KB] g=0, 1 evaluated, 0 expanded
[t=0.0263489s, 27056 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0263571s, 27056 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0265229s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0265318s, 27056 KB] g=1, 6 evaluated, 5 expanded
[t=0.0265715s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0265798s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0265874s, 27056 KB] g=2, 7 evaluated, 6 expanded
[t=0.026744s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0267524s, 27056 KB] g=4, 12 evaluated, 11 expanded
[t=0.0267918s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0268s, 27056 KB] g=4, 13 evaluated, 12 expanded
[t=0.0270693s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0270786s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0270864s, 27056 KB] g=6, 22 evaluated, 21 expanded
[t=0.0272414s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0272496s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0272573s, 27056 KB] g=8, 27 evaluated, 26 expanded
[t=0.0273542s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0273629s, 27056 KB] g=9, 30 evaluated, 29 expanded
[t=0.027653s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0276623s, 27056 KB] g=12, 39 evaluated, 38 expanded
[t=0.0277374s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0277467s, 27056 KB] g=12, 41 evaluated, 40 expanded
[t=0.0280617s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0280779s, 27056 KB] g=14, 51 evaluated, 50 expanded
[t=0.0286129s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0286264s, 27056 KB] g=16, 67 evaluated, 66 expanded
[t=0.0292726s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0292891s, 27056 KB] g=18, 87 evaluated, 86 expanded
[t=0.0300114s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0300282s, 27056 KB] g=20, 108 evaluated, 107 expanded
[t=0.0307093s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0307265s, 27056 KB] g=22, 129 evaluated, 128 expanded
[t=0.0313344s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0313551s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0313649s, 27056 KB] g=24, 148 evaluated, 147 expanded
[t=0.0317127s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0317286s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0317372s, 27056 KB] g=26, 159 evaluated, 158 expanded
[t=0.0320829s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0320989s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0321072s, 27056 KB] g=28, 170 evaluated, 169 expanded
[t=0.0324268s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0324459s, 27056 KB] g=30, 180 evaluated, 179 expanded
[t=0.0326363s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0326493s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0326575s, 27056 KB] g=30, 186 evaluated, 185 expanded
[t=0.0329343s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0329458s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0329551s, 27056 KB] g=32, 195 evaluated, 194 expanded
[t=0.0332038s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0332163s, 27056 KB] g=34, 203 evaluated, 202 expanded
[t=0.0336423s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0336546s, 27056 KB] g=36, 217 evaluated, 216 expanded
[t=0.0341197s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0341712s, 27056 KB] g=37, 227 evaluated, 226 expanded
[t=0.0342659s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0342855s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0343073s, 27056 KB] g=38, 228 evaluated, 227 expanded
[t=0.0346922s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0347081s, 27056 KB] g=40, 237 evaluated, 236 expanded
[t=0.0349598s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0349868s, 27056 KB] g=40, 240 evaluated, 239 expanded
[t=0.0357128s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0357424s, 27056 KB] g=42, 252 evaluated, 251 expanded
[t=0.0358465s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0358567s, 27056 KB] g=42, 255 evaluated, 254 expanded
[t=0.0362209s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0362314s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0362401s, 27056 KB] g=44, 266 evaluated, 265 expanded
[t=0.0365408s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0365502s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0365585s, 27056 KB] g=46, 275 evaluated, 274 expanded
[t=0.0367792s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0367876s, 27056 KB] g=48, 282 evaluated, 281 expanded
[t=0.0368901s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0368987s, 27056 KB] g=48, 285 evaluated, 284 expanded
[t=0.0371667s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0371757s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0371836s, 27056 KB] g=50, 294 evaluated, 293 expanded
[t=0.0373648s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0373734s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0373811s, 27056 KB] g=52, 299 evaluated, 298 expanded
[t=0.037526s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0375344s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.037542s, 27056 KB] g=54, 303 evaluated, 302 expanded
[t=0.0418851s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0418988s, 27056 KB] g=74, 450 evaluated, 449 expanded
[t=0.0421127s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0421218s, 27056 KB] g=75, 457 evaluated, 456 expanded
[t=0.0421632s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0421719s, 27056 KB] g=76, 458 evaluated, 457 expanded
[t=0.0422446s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0422547s, 27056 KB] g=77, 460 evaluated, 459 expanded
[t=0.0422935s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0423044s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.042312s, 27056 KB] g=78, 461 evaluated, 460 expanded
[t=0.0424708s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0424795s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0424873s, 27056 KB] g=80, 466 evaluated, 465 expanded
[t=0.0431486s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0431789s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0431979s, 27056 KB] g=86, 480 evaluated, 479 expanded
[t=0.0440496s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0440745s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0440838s, 27056 KB] g=100, 501 evaluated, 500 expanded
[t=0.0605198s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0606141s, 27056 KB] g=114, 968 evaluated, 967 expanded
[t=0.0613263s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0613629s, 27056 KB] g=118, 977 evaluated, 976 expanded
[t=0.0615599s, 27056 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0615839s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0615998s, 27056 KB] g=120, 980 evaluated, 979 expanded
[t=0.0636441s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0637024s, 27056 KB] g=142, 1053 evaluated, 1052 expanded
[t=0.0637756s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.063786s, 27056 KB] g=144, 1056 evaluated, 1055 expanded
[t=0.0639835s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.063994s, 27056 KB] g=152, 1066 evaluated, 1065 expanded
[t=0.0640705s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.06408s, 27056 KB] g=156, 1070 evaluated, 1069 expanded
[t=0.0640996s, 27056 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0641086s, 27056 KB] g=157, 1071 evaluated, 1070 expanded
[t=0.0641259s, 27056 KB] Solution found!
[t=0.0641414s, 27056 KB] Actual search time: 0.0378872s
unstack b5 b10 (1)
stack b5 b13 (1)
unstack b10 b16 (1)
stack b10 b11 (1)
unstack b20 b25 (1)
stack b20 b24 (1)
unstack b25 b17 (1)
put-down b25 (1)
unstack b17 b23 (1)
put-down b17 (1)
unstack b10 b11 (1)
put-down b10 (1)
unstack b11 b3 (1)
put-down b11 (1)
unstack b23 b2 (1)
put-down b23 (1)
unstack b2 b18 (1)
put-down b2 (1)
unstack b18 b9 (1)
stack b18 b20 (1)
unstack b3 b15 (1)
put-down b3 (1)
unstack b15 b14 (1)
stack b15 b25 (1)
unstack b14 b12 (1)
put-down b14 (1)
pick-up b12 (1)
stack b12 b9 (1)
pick-up b11 (1)
stack b11 b14 (1)
pick-up b10 (1)
stack b10 b11 (1)
unstack b5 b13 (1)
put-down b5 (1)
unstack b13 b8 (1)
put-down b13 (1)
unstack b8 b6 (1)
stack b8 b15 (1)
unstack b6 b22 (1)
stack b6 b2 (1)
unstack b22 b19 (1)
stack b22 b18 (1)
unstack b19 b1 (1)
put-down b19 (1)
pick-up b1 (1)
stack b1 b6 (1)
pick-up b23 (1)
stack b23 b22 (1)
pick-up b16 (1)
stack b16 b23 (1)
pick-up b3 (1)
stack b3 b1 (1)
pick-up b5 (1)
stack b5 b13 (1)
unstack b16 b23 (1)
put-down b16 (1)
unstack b23 b22 (1)
put-down b23 (1)
unstack b22 b18 (1)
put-down b22 (1)
pick-up b23 (1)
stack b23 b22 (1)
pick-up b16 (1)
stack b16 b23 (1)
unstack b18 b20 (1)
put-down b18 (1)
unstack b20 b24 (1)
put-down b20 (1)
pick-up b18 (1)
stack b18 b20 (1)
unstack b24 b21 (1)
put-down b24 (1)
unstack b21 b4 (1)
stack b21 b3 (1)
unstack b4 b7 (1)
stack b4 b10 (1)
pick-up b17 (1)
stack b17 b7 (1)
unstack b18 b20 (1)
put-down b18 (1)
pick-up b20 (1)
stack b20 b24 (1)
pick-up b18 (1)
stack b18 b20 (1)
unstack b16 b23 (1)
put-down b16 (1)
unstack b23 b22 (1)
put-down b23 (1)
pick-up b16 (1)
stack b16 b23 (1)
pick-up b22 (1)
stack b22 b18 (1)
unstack b16 b23 (1)
put-down b16 (1)
pick-up b23 (1)
stack b23 b22 (1)
pick-up b16 (1)
stack b16 b23 (1)
unstack b21 b3 (1)
put-down b21 (1)
unstack b3 b1 (1)
put-down b3 (1)
pick-up b21 (1)
stack b21 b3 (1)
unstack b1 b6 (1)
put-down b1 (1)
unstack b6 b2 (1)
put-down b6 (1)
pick-up b2 (1)
stack b2 b4 (1)
pick-up b6 (1)
stack b6 b2 (1)
pick-up b1 (1)
stack b1 b6 (1)
unstack b21 b3 (1)
put-down b21 (1)
pick-up b3 (1)
stack b3 b1 (1)
pick-up b21 (1)
stack b21 b3 (1)
unstack b16 b23 (1)
put-down b16 (1)
unstack b23 b22 (1)
put-down b23 (1)
unstack b22 b18 (1)
put-down b22 (1)
pick-up b23 (1)
stack b23 b22 (1)
pick-up b16 (1)
stack b16 b23 (1)
unstack b18 b20 (1)
put-down b18 (1)
unstack b20 b24 (1)
put-down b20 (1)
pick-up b18 (1)
stack b18 b20 (1)
pick-up b24 (1)
stack b24 b21 (1)
unstack b18 b20 (1)
put-down b18 (1)
pick-up b20 (1)
stack b20 b24 (1)
pick-up b18 (1)
stack b18 b20 (1)
unstack b16 b23 (1)
put-down b16 (1)
unstack b23 b22 (1)
put-down b23 (1)
pick-up b16 (1)
stack b16 b23 (1)
pick-up b22 (1)
stack b22 b18 (1)
unstack b16 b23 (1)
put-down b16 (1)
pick-up b23 (1)
stack b23 b22 (1)
pick-up b16 (1)
stack b16 b23 (1)
[t=0.0641515s, 27056 KB] Plan length: 158 step(s).
[t=0.0641515s, 27056 KB] Plan cost: 158
[t=0.0641515s, 27056 KB] Expanded 1071 state(s).
[t=0.0641515s, 27056 KB] Reopened 0 state(s).
[t=0.0641515s, 27056 KB] Evaluated 1072 state(s).
[t=0.0641515s, 27056 KB] Evaluations: 2144
[t=0.0641515s, 27056 KB] Generated 11249 state(s).
[t=0.0641515s, 27056 KB] Dead ends: 0 state(s).
[t=0.0641515s, 27056 KB] Number of registered states: 1072
[t=0.0641515s, 27056 KB] Int hash set load factor: 1072/2048 = 0.523438
[t=0.0641515s, 27056 KB] Int hash set resizes: 11
[t=0.0641515s, 27056 KB] Search time: 0.0379321s
[t=0.0641515s, 27056 KB] Total time: 0.0641515s
Solution found.
Peak memory: 27056 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.24s
