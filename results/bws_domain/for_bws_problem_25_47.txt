INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_25/bws_problem_25_47.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.012s wall-clock]
2052 relevant atoms
1375 auxiliary atoms
3427 final queue length
5982 total queue pushes
Completing instantiation... [0.020s CPU, 0.021s wall-clock]
Instantiating: [0.030s CPU, 0.034s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
26 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.032s wall-clock]
1850 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
50 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.022s wall-clock]
Reordering and filtering variables...
51 of 51 variables necessary.
26 of 51 mutex groups necessary.
1250 of 1250 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.014s wall-clock]
Translator variables: 51
Translator derived variables: 0
Translator facts: 702
Translator goal facts: 21
Translator mutex groups: 26
Translator total mutex groups size: 676
Translator operators: 1250
Translator axioms: 0
Translator task size: 10750
Translator peak memory: 38388 KB
Writing output... [0.010s CPU, 0.006s wall-clock]
Done! [0.120s CPU, 0.123s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.8236e-05s, 24488 KB] reading input...
[t=0.00350774s, 25632 KB] done reading input!
[t=0.00444596s, 26028 KB] Initializing landmark count heuristic...
[t=0.00447776s, 26028 KB] Generating landmark graph...
[t=0.00455017s, 26160 KB] Building a landmark graph with reasonable orders.
[t=0.00462251s, 26160 KB] Initializing Exploration...
[t=0.00497418s, 26532 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0189183s, 27060 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0189941s, 27060 KB] Landmarks generation time: 0.0144434s
[t=0.0190081s, 27060 KB] Discovered 106 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0190261s, 27060 KB] 421 edges
[t=0.0190364s, 27060 KB] approx. reasonable orders
[t=0.019943s, 27060 KB] approx. obedient reasonable orders
[t=0.0199893s, 27060 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0199994s, 27060 KB] Landmarks generation time: 0.0155198s
[t=0.0200102s, 27060 KB] Discovered 106 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0200179s, 27060 KB] 436 edges
[t=0.0200268s, 27060 KB] Landmark graph generation time: 0.0155568s
[t=0.0200362s, 27060 KB] Landmark graph contains 106 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0200443s, 27060 KB] Landmark graph contains 436 orderings.
[t=0.0205855s, 27060 KB] Simplifying 4950 unary operators... done! [3750 unary operators]
[t=0.0218032s, 27060 KB] time to simplify: 0.00129752s
[t=0.021958s, 27060 KB] Initializing additive heuristic...
[t=0.0219741s, 27060 KB] Initializing FF heuristic...
[t=0.0220276s, 27060 KB] Building successor generator...done!
[t=0.0222661s, 27060 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0222748s, 27060 KB] time for successor generation creation: 0.000203532s
[t=0.0222876s, 27060 KB] Variables: 51
[t=0.0222958s, 27060 KB] FactPairs: 702
[t=0.0223043s, 27060 KB] Bytes per state: 20
[t=0.0224002s, 27060 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0224338s, 27060 KB] 50 initial landmarks, 21 goal landmarks
[t=0.0224929s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0225026s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0225116s, 27060 KB] g=0, 1 evaluated, 0 expanded
[t=0.0225257s, 27060 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0225345s, 27060 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0226799s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0226897s, 27060 KB] g=1, 5 evaluated, 4 expanded
[t=0.0228406s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0228537s, 27060 KB] g=2, 9 evaluated, 8 expanded
[t=0.0230498s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0230586s, 27060 KB] g=3, 15 evaluated, 14 expanded
[t=0.0233717s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0233808s, 27060 KB] g=6, 25 evaluated, 24 expanded
[t=0.0236786s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0236902s, 27060 KB] g=8, 34 evaluated, 33 expanded
[t=0.0240763s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0240896s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0241006s, 27060 KB] g=10, 46 evaluated, 45 expanded
[t=0.0243626s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0243741s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0243825s, 27060 KB] g=12, 54 evaluated, 53 expanded
[t=0.024665s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.024675s, 27060 KB] g=14, 63 evaluated, 62 expanded
[t=0.0247525s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0247616s, 27060 KB] g=14, 65 evaluated, 64 expanded
[t=0.0248618s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0248785s, 27060 KB] g=15, 68 evaluated, 67 expanded
[t=0.0249504s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0249596s, 27060 KB] g=16, 70 evaluated, 69 expanded
[t=0.0253593s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0253689s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0253776s, 27060 KB] g=18, 83 evaluated, 82 expanded
[t=0.0257232s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0257338s, 27060 KB] g=21, 94 evaluated, 93 expanded
[t=0.0262906s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0263105s, 27060 KB] g=24, 112 evaluated, 111 expanded
[t=0.0266181s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0266336s, 27060 KB] g=20, 122 evaluated, 121 expanded
[t=0.0270418s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0270567s, 27060 KB] g=24, 135 evaluated, 134 expanded
[t=0.0274089s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0274245s, 27060 KB] g=26, 146 evaluated, 145 expanded
[t=0.0277641s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0277801s, 27060 KB] g=28, 156 evaluated, 155 expanded
[t=0.0278539s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0278645s, 27060 KB] g=28, 158 evaluated, 157 expanded
[t=0.0284187s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0284325s, 27060 KB] g=30, 176 evaluated, 175 expanded
[t=0.0287116s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0287227s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.028731s, 27060 KB] g=32, 185 evaluated, 184 expanded
[t=0.0290538s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0290663s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0290744s, 27060 KB] g=34, 195 evaluated, 194 expanded
[t=0.0293766s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.029387s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0293954s, 27060 KB] g=36, 204 evaluated, 203 expanded
[t=0.0296806s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0296908s, 27060 KB] g=39, 213 evaluated, 212 expanded
[t=0.0297339s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0297434s, 27060 KB] g=40, 214 evaluated, 213 expanded
[t=0.0300318s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0300421s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0300501s, 27060 KB] g=42, 223 evaluated, 222 expanded
[t=0.0302992s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0303086s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0303228s, 27060 KB] g=44, 231 evaluated, 230 expanded
[t=0.0306073s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0306207s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0306302s, 27060 KB] g=46, 240 evaluated, 239 expanded
[t=0.03088s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0308985s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0309079s, 27060 KB] g=48, 248 evaluated, 247 expanded
[t=0.031514s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.031533s, 27060 KB] g=52, 267 evaluated, 266 expanded
[t=0.0317367s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.031746s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0317542s, 27060 KB] g=54, 273 evaluated, 272 expanded
[t=0.0328756s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0328936s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0329036s, 27060 KB] g=58, 308 evaluated, 307 expanded
[t=0.0331191s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0331281s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0331361s, 27060 KB] g=60, 315 evaluated, 314 expanded
[t=0.0343601s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0343749s, 27060 KB] g=66, 356 evaluated, 355 expanded
[t=0.0345872s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0345966s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.034605s, 27060 KB] g=68, 363 evaluated, 362 expanded
[t=0.0347868s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0347956s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0348035s, 27060 KB] g=70, 369 evaluated, 368 expanded
[t=0.0349303s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0349395s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0349478s, 27060 KB] g=72, 373 evaluated, 372 expanded
[t=0.0355088s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.035521s, 27060 KB] g=78, 391 evaluated, 390 expanded
[t=0.03568s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0356908s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.035699s, 27060 KB] g=80, 396 evaluated, 395 expanded
[t=0.0357966s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0358052s, 27060 KB] g=80, 399 evaluated, 398 expanded
[t=0.035936s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.035945s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0359532s, 27060 KB] g=82, 403 evaluated, 402 expanded
[t=0.0364827s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0364963s, 27060 KB] g=90, 421 evaluated, 420 expanded
[t=0.0366211s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0366301s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0366386s, 27060 KB] g=92, 425 evaluated, 424 expanded
[t=0.0487609s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0488109s, 27060 KB] g=126, 863 evaluated, 862 expanded
[t=0.0496378s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0496492s, 27060 KB] g=134, 895 evaluated, 894 expanded
[t=0.0497343s, 27060 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0497436s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0497517s, 27060 KB] g=136, 898 evaluated, 897 expanded
[t=0.0506005s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0506105s, 27060 KB] g=152, 938 evaluated, 937 expanded
[t=0.0507946s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0508033s, 27060 KB] g=160, 949 evaluated, 948 expanded
[t=0.0508279s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0508369s, 27060 KB] g=160, 950 evaluated, 949 expanded
[t=0.0508552s, 27060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0508642s, 27060 KB] g=161, 951 evaluated, 950 expanded
[t=0.05088s, 27060 KB] Solution found!
[t=0.0508919s, 27060 KB] Actual search time: 0.0284552s
unstack b12 b8 (1)
put-down b12 (1)
unstack b22 b10 (1)
put-down b22 (1)
unstack b10 b3 (1)
put-down b10 (1)
unstack b17 b25 (1)
put-down b17 (1)
unstack b3 b20 (1)
stack b3 b10 (1)
unstack b20 b4 (1)
put-down b20 (1)
unstack b4 b21 (1)
put-down b4 (1)
unstack b21 b15 (1)
stack b21 b3 (1)
unstack b15 b1 (1)
stack b15 b25 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b23 (1)
put-down b13 (1)
unstack b23 b9 (1)
stack b23 b1 (1)
pick-up b22 (1)
stack b22 b23 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b9 b19 (1)
put-down b9 (1)
unstack b19 b16 (1)
stack b19 b4 (1)
pick-up b17 (1)
stack b17 b19 (1)
pick-up b9 (1)
stack b9 b16 (1)
unstack b14 b11 (1)
put-down b14 (1)
unstack b11 b2 (1)
stack b11 b17 (1)
pick-up b14 (1)
stack b14 b11 (1)
unstack b2 b7 (1)
stack b2 b20 (1)
unstack b7 b18 (1)
stack b7 b12 (1)
pick-up b24 (1)
stack b24 b18 (1)
unstack b15 b25 (1)
put-down b15 (1)
pick-up b25 (1)
stack b25 b14 (1)
pick-up b15 (1)
stack b15 b25 (1)
unstack b8 b13 (1)
put-down b8 (1)
pick-up b13 (1)
stack b13 b7 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b9 b16 (1)
put-down b9 (1)
unstack b16 b5 (1)
put-down b16 (1)
unstack b5 b6 (1)
put-down b5 (1)
pick-up b16 (1)
stack b16 b5 (1)
pick-up b6 (1)
stack b6 b15 (1)
pick-up b9 (1)
stack b9 b16 (1)
unstack b22 b23 (1)
put-down b22 (1)
unstack b23 b1 (1)
put-down b23 (1)
pick-up b1 (1)
stack b1 b9 (1)
pick-up b23 (1)
stack b23 b1 (1)
pick-up b22 (1)
stack b22 b23 (1)
unstack b21 b3 (1)
put-down b21 (1)
unstack b3 b10 (1)
put-down b3 (1)
pick-up b10 (1)
stack b10 b6 (1)
pick-up b21 (1)
stack b21 b3 (1)
unstack b10 b6 (1)
put-down b10 (1)
unstack b6 b15 (1)
put-down b6 (1)
unstack b15 b25 (1)
put-down b15 (1)
pick-up b6 (1)
stack b6 b15 (1)
pick-up b10 (1)
stack b10 b6 (1)
unstack b21 b3 (1)
put-down b21 (1)
pick-up b3 (1)
stack b3 b10 (1)
pick-up b21 (1)
stack b21 b3 (1)
unstack b25 b14 (1)
put-down b25 (1)
unstack b14 b11 (1)
put-down b14 (1)
unstack b11 b17 (1)
put-down b11 (1)
pick-up b14 (1)
stack b14 b11 (1)
pick-up b25 (1)
stack b25 b14 (1)
unstack b17 b19 (1)
put-down b17 (1)
unstack b19 b4 (1)
put-down b19 (1)
pick-up b4 (1)
stack b4 b2 (1)
pick-up b19 (1)
stack b19 b4 (1)
pick-up b17 (1)
stack b17 b19 (1)
unstack b25 b14 (1)
put-down b25 (1)
unstack b14 b11 (1)
put-down b14 (1)
pick-up b11 (1)
stack b11 b17 (1)
pick-up b14 (1)
stack b14 b11 (1)
pick-up b25 (1)
stack b25 b14 (1)
unstack b21 b3 (1)
put-down b21 (1)
unstack b3 b10 (1)
put-down b3 (1)
unstack b10 b6 (1)
put-down b10 (1)
pick-up b3 (1)
stack b3 b10 (1)
pick-up b21 (1)
stack b21 b3 (1)
unstack b6 b15 (1)
put-down b6 (1)
pick-up b15 (1)
stack b15 b25 (1)
pick-up b6 (1)
stack b6 b15 (1)
unstack b21 b3 (1)
put-down b21 (1)
unstack b3 b10 (1)
put-down b3 (1)
pick-up b10 (1)
stack b10 b6 (1)
pick-up b3 (1)
stack b3 b10 (1)
pick-up b21 (1)
stack b21 b3 (1)
[t=0.0509013s, 27060 KB] Plan length: 162 step(s).
[t=0.0509013s, 27060 KB] Plan cost: 162
[t=0.0509013s, 27060 KB] Expanded 951 state(s).
[t=0.0509013s, 27060 KB] Reopened 0 state(s).
[t=0.0509013s, 27060 KB] Evaluated 952 state(s).
[t=0.0509013s, 27060 KB] Evaluations: 1904
[t=0.0509013s, 27060 KB] Generated 8824 state(s).
[t=0.0509013s, 27060 KB] Dead ends: 0 state(s).
[t=0.0509013s, 27060 KB] Number of registered states: 952
[t=0.0509013s, 27060 KB] Int hash set load factor: 952/1024 = 0.929688
[t=0.0509013s, 27060 KB] Int hash set resizes: 10
[t=0.0509013s, 27060 KB] Search time: 0.0285016s
[t=0.0509013s, 27060 KB] Total time: 0.0509013s
Solution found.
Peak memory: 27060 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.22s
