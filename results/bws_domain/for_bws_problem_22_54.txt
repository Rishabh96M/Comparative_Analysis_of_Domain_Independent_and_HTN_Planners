INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_22/bws_problem_22_54.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
1608 relevant atoms
1078 auxiliary atoms
2686 final queue length
4670 total queue pushes
Completing instantiation... [0.010s CPU, 0.017s wall-clock]
Instantiating: [0.020s CPU, 0.029s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
23 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.024s wall-clock]
1430 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
44 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.012s wall-clock]
Reordering and filtering variables...
45 of 45 variables necessary.
23 of 45 mutex groups necessary.
968 of 968 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 45
Translator derived variables: 0
Translator facts: 552
Translator goal facts: 17
Translator mutex groups: 23
Translator total mutex groups size: 529
Translator operators: 968
Translator axioms: 0
Translator task size: 8337
Translator peak memory: 36976 KB
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.090s CPU, 0.088s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9575e-05s, 24488 KB] reading input...
[t=0.0029085s, 25340 KB] done reading input!
[t=0.00451612s, 25736 KB] Initializing landmark count heuristic...
[t=0.00455763s, 25736 KB] Generating landmark graph...
[t=0.00461915s, 25736 KB] Building a landmark graph with reasonable orders.
[t=0.00467756s, 25736 KB] Initializing Exploration...
[t=0.00497137s, 26000 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0148932s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0149893s, 26528 KB] Landmarks generation time: 0.0103758s
[t=0.0150081s, 26528 KB] Discovered 94 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0150363s, 26528 KB] 528 edges
[t=0.0150473s, 26528 KB] approx. reasonable orders
[t=0.0161481s, 26528 KB] approx. obedient reasonable orders
[t=0.0161909s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0162016s, 26528 KB] Landmarks generation time: 0.011642s
[t=0.0162118s, 26528 KB] Discovered 94 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0162205s, 26528 KB] 549 edges
[t=0.0162296s, 26528 KB] Landmark graph generation time: 0.0116798s
[t=0.0162386s, 26528 KB] Landmark graph contains 94 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0162471s, 26528 KB] Landmark graph contains 549 orderings.
[t=0.0166885s, 26528 KB] Simplifying 3828 unary operators... done! [2904 unary operators]
[t=0.0177388s, 26528 KB] time to simplify: 0.00113315s
[t=0.0178887s, 26528 KB] Initializing additive heuristic...
[t=0.0179054s, 26528 KB] Initializing FF heuristic...
[t=0.0179723s, 26528 KB] Building successor generator...done!
[t=0.0181933s, 26528 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0182028s, 26528 KB] time for successor generation creation: 0.000192658s
[t=0.0182186s, 26528 KB] Variables: 45
[t=0.0182277s, 26528 KB] FactPairs: 552
[t=0.018236s, 26528 KB] Bytes per state: 20
[t=0.0183398s, 26528 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0183892s, 26528 KB] 44 initial landmarks, 17 goal landmarks
[t=0.0184436s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0184533s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0184618s, 26528 KB] g=0, 1 evaluated, 0 expanded
[t=0.0184752s, 26528 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0184837s, 26528 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0186351s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.018646s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0186555s, 26528 KB] g=2, 6 evaluated, 5 expanded
[t=0.01877s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0187794s, 26528 KB] g=4, 10 evaluated, 9 expanded
[t=0.018993s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0190028s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0190113s, 26528 KB] g=6, 18 evaluated, 17 expanded
[t=0.0192433s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0192554s, 26528 KB] g=8, 26 evaluated, 25 expanded
[t=0.0194526s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.019466s, 26528 KB] g=10, 33 evaluated, 32 expanded
[t=0.0196065s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0196177s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0196261s, 26528 KB] g=12, 38 evaluated, 37 expanded
[t=0.0199017s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0199169s, 26528 KB] g=16, 48 evaluated, 47 expanded
[t=0.0199572s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0199662s, 26528 KB] g=17, 49 evaluated, 48 expanded
[t=0.0203656s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0204403s, 26528 KB] g=20, 60 evaluated, 59 expanded
[t=0.0206327s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0206439s, 26528 KB] g=18, 66 evaluated, 65 expanded
[t=0.0208401s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.020855s, 26528 KB] g=22, 73 evaluated, 72 expanded
[t=0.0210991s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0211129s, 26528 KB] g=23, 82 evaluated, 81 expanded
[t=0.0211823s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0211955s, 26528 KB] g=24, 84 evaluated, 83 expanded
[t=0.0214738s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0214946s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0215035s, 26528 KB] g=26, 94 evaluated, 93 expanded
[t=0.0217516s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0217742s, 26528 KB] g=28, 103 evaluated, 102 expanded
[t=0.0218156s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0218286s, 26528 KB] g=28, 104 evaluated, 103 expanded
[t=0.0222277s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0222449s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0222538s, 26528 KB] g=30, 118 evaluated, 117 expanded
[t=0.0224901s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0224999s, 26528 KB] g=32, 126 evaluated, 125 expanded
[t=0.0225365s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.022546s, 26528 KB] g=32, 127 evaluated, 126 expanded
[t=0.0229665s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0229794s, 26528 KB] g=34, 142 evaluated, 141 expanded
[t=0.0231001s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0231108s, 26528 KB] g=34, 146 evaluated, 145 expanded
[t=0.023392s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0234067s, 26528 KB] g=36, 156 evaluated, 155 expanded
[t=0.0236228s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0236325s, 26528 KB] g=36, 164 evaluated, 163 expanded
[t=0.0237983s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0238083s, 26528 KB] g=38, 170 evaluated, 169 expanded
[t=0.0242246s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0242384s, 26528 KB] g=38, 184 evaluated, 183 expanded
[t=0.0243391s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0243491s, 26528 KB] g=40, 186 evaluated, 185 expanded
[t=0.0247092s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0247184s, 26528 KB] g=42, 200 evaluated, 199 expanded
[t=0.0248062s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0248149s, 26528 KB] g=40, 203 evaluated, 202 expanded
[t=0.0252588s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0252724s, 26528 KB] g=42, 220 evaluated, 219 expanded
[t=0.0254442s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.02547s, 26528 KB] g=44, 226 evaluated, 225 expanded
[t=0.0257412s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0257521s, 26528 KB] g=44, 236 evaluated, 235 expanded
[t=0.0258389s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0258474s, 26528 KB] g=46, 239 evaluated, 238 expanded
[t=0.0262934s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0263035s, 26528 KB] g=46, 255 evaluated, 254 expanded
[t=0.0264999s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0265087s, 26528 KB] g=48, 262 evaluated, 261 expanded
[t=0.0265671s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.026576s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.026584s, 26528 KB] g=48, 264 evaluated, 263 expanded
[t=0.0267383s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.026747s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0267555s, 26528 KB] g=50, 270 evaluated, 269 expanded
[t=0.0271682s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0271784s, 26528 KB] g=54, 286 evaluated, 285 expanded
[t=0.0272876s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.027297s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0273055s, 26528 KB] g=56, 290 evaluated, 289 expanded
[t=0.0285673s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0285804s, 26528 KB] g=60, 339 evaluated, 338 expanded
[t=0.0286665s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0286755s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0286833s, 26528 KB] g=62, 342 evaluated, 341 expanded
[t=0.0293328s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.029344s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0293519s, 26528 KB] g=74, 368 evaluated, 367 expanded
[t=0.0295711s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0295812s, 26528 KB] g=78, 377 evaluated, 376 expanded
[t=0.0296655s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0296743s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0296905s, 26528 KB] g=80, 380 evaluated, 379 expanded
[t=0.032154s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0321949s, 26528 KB] g=110, 494 evaluated, 493 expanded
[t=0.0324804s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0324943s, 26528 KB] g=114, 505 evaluated, 504 expanded
[t=0.032566s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0325752s, 26528 KB] g=116, 508 evaluated, 507 expanded
[t=0.0328555s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0328654s, 26528 KB] g=128, 524 evaluated, 523 expanded
[t=0.0329302s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0329391s, 26528 KB] g=132, 528 evaluated, 527 expanded
[t=0.0329575s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0329698s, 26528 KB] g=133, 529 evaluated, 528 expanded
[t=0.0329854s, 26528 KB] Solution found!
[t=0.0329969s, 26528 KB] Actual search time: 0.0146049s
unstack b18 b16 (1)
put-down b18 (1)
unstack b14 b21 (1)
put-down b14 (1)
unstack b22 b1 (1)
put-down b22 (1)
unstack b1 b8 (1)
put-down b1 (1)
pick-up b21 (1)
stack b21 b22 (1)
pick-up b8 (1)
stack b8 b1 (1)
unstack b16 b2 (1)
put-down b16 (1)
unstack b2 b11 (1)
put-down b2 (1)
unstack b11 b6 (1)
put-down b11 (1)
unstack b6 b15 (1)
put-down b6 (1)
unstack b15 b3 (1)
put-down b15 (1)
unstack b3 b7 (1)
stack b3 b5 (1)
unstack b7 b4 (1)
put-down b7 (1)
unstack b4 b19 (1)
stack b4 b16 (1)
unstack b19 b10 (1)
stack b19 b4 (1)
unstack b10 b20 (1)
put-down b10 (1)
unstack b20 b13 (1)
stack b20 b19 (1)
unstack b13 b9 (1)
put-down b13 (1)
unstack b9 b12 (1)
stack b9 b10 (1)
unstack b12 b17 (1)
stack b12 b9 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b17 (1)
stack b17 b13 (1)
pick-up b6 (1)
stack b6 b17 (1)
pick-up b15 (1)
stack b15 b6 (1)
pick-up b14 (1)
stack b14 b15 (1)
unstack b8 b1 (1)
put-down b8 (1)
pick-up b1 (1)
stack b1 b20 (1)
pick-up b8 (1)
stack b8 b1 (1)
unstack b21 b22 (1)
put-down b21 (1)
pick-up b22 (1)
stack b22 b8 (1)
pick-up b21 (1)
stack b21 b22 (1)
unstack b11 b12 (1)
put-down b11 (1)
unstack b12 b9 (1)
put-down b12 (1)
pick-up b11 (1)
stack b11 b12 (1)
unstack b9 b10 (1)
put-down b9 (1)
pick-up b10 (1)
stack b10 b14 (1)
pick-up b9 (1)
stack b9 b10 (1)
unstack b11 b12 (1)
put-down b11 (1)
pick-up b12 (1)
stack b12 b9 (1)
pick-up b11 (1)
stack b11 b12 (1)
unstack b21 b22 (1)
put-down b21 (1)
unstack b22 b8 (1)
put-down b22 (1)
pick-up b21 (1)
stack b21 b22 (1)
unstack b8 b1 (1)
put-down b8 (1)
unstack b1 b20 (1)
put-down b1 (1)
pick-up b8 (1)
stack b8 b1 (1)
unstack b21 b22 (1)
put-down b21 (1)
pick-up b22 (1)
stack b22 b8 (1)
pick-up b21 (1)
stack b21 b22 (1)
unstack b20 b19 (1)
put-down b20 (1)
unstack b19 b4 (1)
put-down b19 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b4 b16 (1)
put-down b4 (1)
pick-up b16 (1)
stack b16 b2 (1)
pick-up b4 (1)
stack b4 b16 (1)
unstack b20 b19 (1)
put-down b20 (1)
pick-up b19 (1)
stack b19 b4 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b21 b22 (1)
put-down b21 (1)
unstack b22 b8 (1)
put-down b22 (1)
pick-up b21 (1)
stack b21 b22 (1)
unstack b8 b1 (1)
put-down b8 (1)
pick-up b1 (1)
stack b1 b20 (1)
pick-up b8 (1)
stack b8 b1 (1)
unstack b21 b22 (1)
put-down b21 (1)
pick-up b22 (1)
stack b22 b8 (1)
pick-up b21 (1)
stack b21 b22 (1)
[t=0.0330067s, 26528 KB] Plan length: 134 step(s).
[t=0.0330067s, 26528 KB] Plan cost: 134
[t=0.0330067s, 26528 KB] Expanded 529 state(s).
[t=0.0330067s, 26528 KB] Reopened 0 state(s).
[t=0.0330067s, 26528 KB] Evaluated 530 state(s).
[t=0.0330067s, 26528 KB] Evaluations: 1060
[t=0.0330067s, 26528 KB] Generated 5325 state(s).
[t=0.0330067s, 26528 KB] Dead ends: 0 state(s).
[t=0.0330067s, 26528 KB] Number of registered states: 530
[t=0.0330067s, 26528 KB] Int hash set load factor: 530/1024 = 0.517578
[t=0.0330067s, 26528 KB] Int hash set resizes: 10
[t=0.0330067s, 26528 KB] Search time: 0.0146674s
[t=0.0330067s, 26528 KB] Total time: 0.0330067s
Solution found.
Peak memory: 26528 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.18s
