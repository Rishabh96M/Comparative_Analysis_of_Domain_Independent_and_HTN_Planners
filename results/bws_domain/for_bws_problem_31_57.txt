INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_31/bws_problem_31_57.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.019s wall-clock]
3102 relevant atoms
2077 auxiliary atoms
5179 final queue length
9091 total queue pushes
Completing instantiation... [0.040s CPU, 0.032s wall-clock]
Instantiating: [0.060s CPU, 0.053s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
32 uncovered facts
Choosing groups: [0.010s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.010s CPU, 0.012s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.050s wall-clock]
2852 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
62 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.025s wall-clock]
Reordering and filtering variables...
63 of 63 variables necessary.
32 of 63 mutex groups necessary.
1922 of 1922 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.012s wall-clock]
Translator variables: 63
Translator derived variables: 0
Translator facts: 1056
Translator goal facts: 25
Translator mutex groups: 32
Translator total mutex groups size: 1024
Translator operators: 1922
Translator axioms: 0
Translator task size: 16490
Translator peak memory: 42104 KB
Writing output... [0.010s CPU, 0.010s wall-clock]
Done! [0.180s CPU, 0.180s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.118e-05s, 24488 KB] reading input...
[t=0.00597351s, 26640 KB] done reading input!
[t=0.00712007s, 26904 KB] Initializing landmark count heuristic...
[t=0.00718718s, 26904 KB] Generating landmark graph...
[t=0.00732304s, 27036 KB] Building a landmark graph with reasonable orders.
[t=0.0074534s, 27172 KB] Initializing Exploration...
[t=0.00806545s, 27620 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0354558s, 28404 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0355941s, 28404 KB] Landmarks generation time: 0.0282805s
[t=0.0356193s, 28404 KB] Discovered 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0356368s, 28404 KB] 471 edges
[t=0.0356476s, 28404 KB] approx. reasonable orders
[t=0.035658s, 28404 KB] approx. obedient reasonable orders
[t=0.0357043s, 28404 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.035715s, 28404 KB] Landmarks generation time: 0.0285244s
[t=0.0357248s, 28404 KB] Discovered 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0357327s, 28404 KB] 471 edges
[t=0.035741s, 28404 KB] Landmark graph generation time: 0.0285608s
[t=0.0357495s, 28404 KB] Landmark graph contains 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0357574s, 28404 KB] Landmark graph contains 471 orderings.
[t=0.036396s, 28436 KB] Simplifying 7626 unary operators... done! [5766 unary operators]
[t=0.038338s, 28568 KB] time to simplify: 0.00206493s
[t=0.0385683s, 28568 KB] Initializing additive heuristic...
[t=0.0385891s, 28568 KB] Initializing FF heuristic...
[t=0.0386457s, 28568 KB] Building successor generator...done!
[t=0.0389837s, 28568 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0389932s, 28568 KB] time for successor generation creation: 0.000308924s
[t=0.0390066s, 28568 KB] Variables: 63
[t=0.0390148s, 28568 KB] FactPairs: 1056
[t=0.0390227s, 28568 KB] Bytes per state: 24
[t=0.0391792s, 28568 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0392582s, 28568 KB] 61 initial landmarks, 25 goal landmarks
[t=0.0393775s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0393886s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0393971s, 28568 KB] g=0, 1 evaluated, 0 expanded
[t=0.0394117s, 28568 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0394204s, 28568 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0397569s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0397675s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0397764s, 28568 KB] g=2, 8 evaluated, 7 expanded
[t=0.0400554s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0400659s, 28568 KB] g=4, 14 evaluated, 13 expanded
[t=0.0411148s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0411276s, 28568 KB] g=6, 37 evaluated, 36 expanded
[t=0.0416855s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.041699s, 28568 KB] g=8, 48 evaluated, 47 expanded
[t=0.0425218s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.042534s, 28568 KB] g=10, 66 evaluated, 65 expanded
[t=0.0427283s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0427385s, 28568 KB] g=6, 70 evaluated, 69 expanded
[t=0.0433753s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0433852s, 28568 KB] g=12, 84 evaluated, 83 expanded
[t=0.0439866s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0439967s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.044006s, 28568 KB] g=14, 97 evaluated, 96 expanded
[t=0.0444762s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0444902s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0445048s, 28568 KB] g=16, 106 evaluated, 105 expanded
[t=0.0449706s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0449824s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0449909s, 28568 KB] g=18, 116 evaluated, 115 expanded
[t=0.0454024s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0454126s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0454207s, 28568 KB] g=20, 125 evaluated, 124 expanded
[t=0.0458066s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0458177s, 28568 KB] g=22, 133 evaluated, 132 expanded
[t=0.0458742s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0458836s, 28568 KB] g=22, 134 evaluated, 133 expanded
[t=0.0465158s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0465279s, 28568 KB] g=24, 148 evaluated, 147 expanded
[t=0.0467852s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0468002s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0468096s, 28568 KB] g=24, 152 evaluated, 151 expanded
[t=0.0471357s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0471486s, 28568 KB] g=26, 159 evaluated, 158 expanded
[t=0.0475211s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0475326s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0475412s, 28568 KB] g=28, 167 evaluated, 166 expanded
[t=0.0475985s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0476088s, 28568 KB] g=29, 168 evaluated, 167 expanded
[t=0.0476669s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.047676s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0476844s, 28568 KB] g=30, 169 evaluated, 168 expanded
[t=0.0480589s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0480723s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0480822s, 28568 KB] g=32, 177 evaluated, 176 expanded
[t=0.0496328s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0496615s, 28568 KB] g=35, 208 evaluated, 207 expanded
[t=0.0497654s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.049776s, 28568 KB] g=36, 210 evaluated, 209 expanded
[t=0.0501464s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0501581s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0501672s, 28568 KB] g=38, 218 evaluated, 217 expanded
[t=0.0505801s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0505906s, 28568 KB] g=40, 227 evaluated, 226 expanded
[t=0.0506935s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0507035s, 28568 KB] g=40, 229 evaluated, 228 expanded
[t=0.0513348s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0513552s, 28568 KB] g=42, 243 evaluated, 242 expanded
[t=0.0517143s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0517288s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0517393s, 28568 KB] g=44, 250 evaluated, 249 expanded
[t=0.0521668s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0521779s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0521895s, 28568 KB] g=46, 259 evaluated, 258 expanded
[t=0.0525116s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0525236s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0525325s, 28568 KB] g=46, 266 evaluated, 265 expanded
[t=0.0528957s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0529224s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0529338s, 28568 KB] g=48, 274 evaluated, 273 expanded
[t=0.0540521s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.054069s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0540781s, 28568 KB] g=52, 298 evaluated, 297 expanded
[t=0.054395s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0544052s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.054414s, 28568 KB] g=54, 305 evaluated, 304 expanded
[t=0.0553488s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0553601s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0553696s, 28568 KB] g=58, 326 evaluated, 325 expanded
[t=0.0556447s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0556572s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0556666s, 28568 KB] g=60, 332 evaluated, 331 expanded
[t=0.0564262s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0564375s, 28568 KB] g=64, 349 evaluated, 348 expanded
[t=0.056688s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0567016s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0567107s, 28568 KB] g=66, 353 evaluated, 352 expanded
[t=0.074833s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0748912s, 28568 KB] g=84, 753 evaluated, 752 expanded
[t=0.0754011s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0754122s, 28568 KB] g=86, 764 evaluated, 763 expanded
[t=0.0757773s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0757879s, 28568 KB] g=88, 772 evaluated, 771 expanded
[t=0.0762595s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0762799s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0762895s, 28568 KB] g=90, 781 evaluated, 780 expanded
[t=0.0766901s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0767093s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0767193s, 28568 KB] g=92, 790 evaluated, 789 expanded
[t=0.0770695s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0770812s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0770897s, 28568 KB] g=94, 798 evaluated, 797 expanded
[t=0.0773957s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0774066s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0774161s, 28568 KB] g=96, 805 evaluated, 804 expanded
[t=0.0776721s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0776818s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0776901s, 28568 KB] g=98, 811 evaluated, 810 expanded
[t=0.0780035s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0780145s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0780231s, 28568 KB] g=100, 818 evaluated, 817 expanded
[t=0.0797737s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.079797s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0798062s, 28568 KB] g=106, 858 evaluated, 857 expanded
[t=0.0830603s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0831286s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0831385s, 28568 KB] g=114, 932 evaluated, 931 expanded
[t=0.0833164s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0833286s, 28568 KB] g=114, 936 evaluated, 935 expanded
[t=0.0835386s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0835525s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0835609s, 28568 KB] g=116, 941 evaluated, 940 expanded
[t=0.0868594s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0869333s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0869454s, 28568 KB] g=130, 1020 evaluated, 1019 expanded
[t=0.0878379s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0878545s, 28568 KB] g=140, 1039 evaluated, 1038 expanded
[t=0.0879906s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0880001s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0880083s, 28568 KB] g=142, 1042 evaluated, 1041 expanded
[t=0.0883902s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0883998s, 28568 KB] g=146, 1051 evaluated, 1050 expanded
[t=0.0885351s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0885443s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0885526s, 28568 KB] g=148, 1054 evaluated, 1053 expanded
[t=0.0928467s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0928915s, 28568 KB] g=178, 1166 evaluated, 1165 expanded
[t=0.0931879s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0932066s, 28568 KB] g=182, 1175 evaluated, 1174 expanded
[t=0.0933093s, 28568 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0933203s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0933286s, 28568 KB] g=184, 1178 evaluated, 1177 expanded
[t=0.0938427s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0938579s, 28568 KB] g=196, 1194 evaluated, 1193 expanded
[t=0.0939508s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0939602s, 28568 KB] g=200, 1198 evaluated, 1197 expanded
[t=0.0939817s, 28568 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.093991s, 28568 KB] g=201, 1199 evaluated, 1198 expanded
[t=0.0940093s, 28568 KB] Solution found!
[t=0.0940248s, 28568 KB] Actual search time: 0.054763s
unstack b13 b12 (1)
stack b13 b3 (1)
unstack b12 b28 (1)
put-down b12 (1)
unstack b2 b31 (1)
put-down b2 (1)
unstack b22 b6 (1)
put-down b22 (1)
unstack b23 b17 (1)
put-down b23 (1)
unstack b17 b11 (1)
stack b17 b2 (1)
unstack b28 b4 (1)
stack b28 b22 (1)
unstack b31 b25 (1)
put-down b31 (1)
unstack b25 b27 (1)
stack b25 b13 (1)
pick-up b12 (1)
stack b12 b25 (1)
pick-up b23 (1)
stack b23 b27 (1)
unstack b6 b16 (1)
stack b6 b30 (1)
unstack b4 b9 (1)
put-down b4 (1)
unstack b9 b15 (1)
stack b9 b12 (1)
unstack b15 b19 (1)
stack b15 b4 (1)
pick-up b19 (1)
stack b19 b28 (1)
unstack b6 b30 (1)
put-down b6 (1)
unstack b30 b21 (1)
stack b30 b16 (1)
unstack b21 b18 (1)
put-down b21 (1)
pick-up b6 (1)
stack b6 b30 (1)
unstack b18 b1 (1)
put-down b18 (1)
unstack b1 b5 (1)
put-down b1 (1)
pick-up b5 (1)
stack b5 b31 (1)
pick-up b18 (1)
stack b18 b5 (1)
unstack b23 b27 (1)
put-down b23 (1)
pick-up b27 (1)
stack b27 b21 (1)
pick-up b23 (1)
stack b23 b27 (1)
unstack b15 b4 (1)
put-down b15 (1)
pick-up b4 (1)
stack b4 b1 (1)
pick-up b15 (1)
stack b15 b4 (1)
unstack b17 b2 (1)
put-down b17 (1)
unstack b9 b12 (1)
put-down b9 (1)
pick-up b2 (1)
stack b2 b9 (1)
pick-up b17 (1)
stack b17 b2 (1)
unstack b12 b25 (1)
put-down b12 (1)
unstack b25 b13 (1)
put-down b25 (1)
pick-up b12 (1)
stack b12 b25 (1)
unstack b13 b3 (1)
put-down b13 (1)
unstack b3 b10 (1)
put-down b3 (1)
unstack b10 b14 (1)
put-down b10 (1)
unstack b14 b24 (1)
put-down b14 (1)
unstack b24 b7 (1)
put-down b24 (1)
pick-up b3 (1)
stack b3 b24 (1)
unstack b7 b20 (1)
put-down b7 (1)
unstack b20 b29 (1)
stack b20 b18 (1)
pick-up b10 (1)
stack b10 b14 (1)
unstack b29 b26 (1)
stack b29 b6 (1)
pick-up b13 (1)
stack b13 b3 (1)
unstack b26 b8 (1)
stack b26 b20 (1)
pick-up b8 (1)
stack b8 b23 (1)
unstack b12 b25 (1)
put-down b12 (1)
pick-up b25 (1)
stack b25 b13 (1)
pick-up b12 (1)
stack b12 b25 (1)
unstack b19 b28 (1)
put-down b19 (1)
unstack b28 b22 (1)
put-down b28 (1)
pick-up b22 (1)
stack b22 b26 (1)
pick-up b28 (1)
stack b28 b22 (1)
pick-up b19 (1)
stack b19 b28 (1)
unstack b17 b2 (1)
put-down b17 (1)
unstack b2 b9 (1)
put-down b2 (1)
pick-up b17 (1)
stack b17 b2 (1)
pick-up b9 (1)
stack b9 b12 (1)
unstack b17 b2 (1)
put-down b17 (1)
pick-up b2 (1)
stack b2 b9 (1)
pick-up b17 (1)
stack b17 b2 (1)
unstack b29 b6 (1)
put-down b29 (1)
unstack b6 b30 (1)
put-down b6 (1)
unstack b30 b16 (1)
put-down b30 (1)
pick-up b16 (1)
stack b16 b7 (1)
pick-up b29 (1)
stack b29 b6 (1)
pick-up b30 (1)
stack b30 b16 (1)
unstack b29 b6 (1)
put-down b29 (1)
pick-up b6 (1)
stack b6 b30 (1)
pick-up b29 (1)
stack b29 b6 (1)
unstack b17 b2 (1)
put-down b17 (1)
unstack b2 b9 (1)
put-down b2 (1)
pick-up b17 (1)
stack b17 b2 (1)
unstack b9 b12 (1)
put-down b9 (1)
unstack b12 b25 (1)
put-down b12 (1)
pick-up b9 (1)
stack b9 b12 (1)
unstack b17 b2 (1)
put-down b17 (1)
pick-up b2 (1)
stack b2 b9 (1)
pick-up b17 (1)
stack b17 b2 (1)
unstack b25 b13 (1)
put-down b25 (1)
unstack b13 b3 (1)
put-down b13 (1)
pick-up b25 (1)
stack b25 b13 (1)
unstack b3 b24 (1)
put-down b3 (1)
pick-up b24 (1)
stack b24 b29 (1)
pick-up b3 (1)
stack b3 b24 (1)
unstack b25 b13 (1)
put-down b25 (1)
pick-up b13 (1)
stack b13 b3 (1)
pick-up b25 (1)
stack b25 b13 (1)
unstack b17 b2 (1)
put-down b17 (1)
unstack b2 b9 (1)
put-down b2 (1)
pick-up b17 (1)
stack b17 b2 (1)
unstack b9 b12 (1)
put-down b9 (1)
pick-up b12 (1)
stack b12 b25 (1)
pick-up b9 (1)
stack b9 b12 (1)
unstack b17 b2 (1)
put-down b17 (1)
pick-up b2 (1)
stack b2 b9 (1)
pick-up b17 (1)
stack b17 b2 (1)
[t=0.0940347s, 28568 KB] Plan length: 202 step(s).
[t=0.0940347s, 28568 KB] Plan cost: 202
[t=0.0940347s, 28568 KB] Expanded 1199 state(s).
[t=0.0940347s, 28568 KB] Reopened 0 state(s).
[t=0.0940347s, 28568 KB] Evaluated 1200 state(s).
[t=0.0940347s, 28568 KB] Evaluations: 2400
[t=0.0940347s, 28568 KB] Generated 12793 state(s).
[t=0.0940347s, 28568 KB] Dead ends: 0 state(s).
[t=0.0940347s, 28568 KB] Number of registered states: 1200
[t=0.0940347s, 28568 KB] Int hash set load factor: 1200/2048 = 0.585938
[t=0.0940347s, 28568 KB] Int hash set resizes: 11
[t=0.0940347s, 28568 KB] Search time: 0.0548562s
[t=0.0940347s, 28568 KB] Total time: 0.0940347s
Solution found.
Peak memory: 28568 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.34s
