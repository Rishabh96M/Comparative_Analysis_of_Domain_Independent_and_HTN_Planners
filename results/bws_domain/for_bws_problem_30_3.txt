INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_30/bws_problem_30_3.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.019s wall-clock]
2912 relevant atoms
1950 auxiliary atoms
4862 final queue length
8527 total queue pushes
Completing instantiation... [0.040s CPU, 0.032s wall-clock]
Instantiating: [0.050s CPU, 0.053s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
31 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.051s wall-clock]
2670 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
60 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.024s wall-clock]
Reordering and filtering variables...
61 of 61 variables necessary.
31 of 61 mutex groups necessary.
1800 of 1800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.013s wall-clock]
Translator variables: 61
Translator derived variables: 0
Translator facts: 992
Translator goal facts: 26
Translator mutex groups: 31
Translator total mutex groups size: 961
Translator operators: 1800
Translator axioms: 0
Translator task size: 15450
Translator peak memory: 41336 KB
Writing output... [0.010s CPU, 0.010s wall-clock]
Done! [0.170s CPU, 0.166s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.5039e-05s, 24488 KB] reading input...
[t=0.00540455s, 26364 KB] done reading input!
[t=0.00641415s, 26760 KB] Initializing landmark count heuristic...
[t=0.00646437s, 26760 KB] Generating landmark graph...
[t=0.00655686s, 26892 KB] Building a landmark graph with reasonable orders.
[t=0.00664104s, 27024 KB] Initializing Exploration...
[t=0.00713773s, 27316 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0364099s, 28376 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0365568s, 28376 KB] Landmarks generation time: 0.0300118s
[t=0.0365832s, 28376 KB] Discovered 136 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0366071s, 28376 KB] 887 edges
[t=0.0366174s, 28376 KB] approx. reasonable orders
[t=0.0448331s, 28376 KB] approx. obedient reasonable orders
[t=0.0455411s, 28376 KB] Removed 9 reasonable or obedient reasonable orders
[t=0.0455573s, 28376 KB] Landmarks generation time: 0.0390937s
[t=0.0455696s, 28376 KB] Discovered 136 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.045578s, 28376 KB] 1009 edges
[t=0.0455868s, 28376 KB] Landmark graph generation time: 0.0391294s
[t=0.0455953s, 28376 KB] Landmark graph contains 136 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0456034s, 28376 KB] Landmark graph contains 1009 orderings.
[t=0.0462792s, 28404 KB] Simplifying 7140 unary operators... done! [5400 unary operators]
[t=0.0479318s, 28404 KB] time to simplify: 0.00175839s
[t=0.0481537s, 28544 KB] Initializing additive heuristic...
[t=0.0481729s, 28544 KB] Initializing FF heuristic...
[t=0.0482248s, 28544 KB] Building successor generator...done!
[t=0.0485253s, 28544 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0485342s, 28544 KB] time for successor generation creation: 0.000262486s
[t=0.0485469s, 28544 KB] Variables: 61
[t=0.0485549s, 28544 KB] FactPairs: 992
[t=0.0485626s, 28544 KB] Bytes per state: 24
[t=0.0486458s, 28544 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.048677s, 28544 KB] 59 initial landmarks, 26 goal landmarks
[t=0.0487494s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 77
[t=0.0487586s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0487666s, 28544 KB] g=0, 1 evaluated, 0 expanded
[t=0.0487795s, 28544 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 77
[t=0.0487879s, 28544 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0488878s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 76
[t=0.0488968s, 28544 KB] g=1, 3 evaluated, 2 expanded
[t=0.0492216s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0492333s, 28544 KB] g=2, 10 evaluated, 9 expanded
[t=0.0493268s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 75
[t=0.0493357s, 28544 KB] g=3, 12 evaluated, 11 expanded
[t=0.0497933s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0498039s, 28544 KB] g=6, 23 evaluated, 22 expanded
[t=0.049892s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0499007s, 28544 KB] g=6, 25 evaluated, 24 expanded
[t=0.0503088s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0503185s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0503268s, 28544 KB] g=8, 35 evaluated, 34 expanded
[t=0.0505768s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0505855s, 28544 KB] g=10, 41 evaluated, 40 expanded
[t=0.0506351s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0506436s, 28544 KB] g=10, 42 evaluated, 41 expanded
[t=0.0512256s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0512378s, 28544 KB] g=12, 56 evaluated, 55 expanded
[t=0.0514817s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0514957s, 28544 KB] g=14, 61 evaluated, 60 expanded
[t=0.0520044s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0520295s, 28544 KB] g=14, 73 evaluated, 72 expanded
[t=0.0524553s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.052466s, 28544 KB] g=16, 83 evaluated, 82 expanded
[t=0.0532582s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0532707s, 28544 KB] g=18, 102 evaluated, 101 expanded
[t=0.0533663s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0533755s, 28544 KB] g=20, 104 evaluated, 103 expanded
[t=0.0541749s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0541952s, 28544 KB] g=20, 122 evaluated, 121 expanded
[t=0.0546136s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0546287s, 28544 KB] g=24, 131 evaluated, 130 expanded
[t=0.0548072s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0548195s, 28544 KB] g=25, 135 evaluated, 134 expanded
[t=0.0552385s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0552519s, 28544 KB] g=26, 145 evaluated, 144 expanded
[t=0.0554282s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.055437s, 28544 KB] g=27, 149 evaluated, 148 expanded
[t=0.0559975s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0560101s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0560179s, 28544 KB] g=28, 162 evaluated, 161 expanded
[t=0.0561302s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0561394s, 28544 KB] g=29, 164 evaluated, 163 expanded
[t=0.0567023s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0567124s, 28544 KB] g=31, 177 evaluated, 176 expanded
[t=0.0571209s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0571305s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0571383s, 28544 KB] g=32, 187 evaluated, 186 expanded
[t=0.0572722s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0572808s, 28544 KB] g=33, 190 evaluated, 189 expanded
[t=0.0576679s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0576782s, 28544 KB] g=34, 199 evaluated, 198 expanded
[t=0.058102s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.058112s, 28544 KB] g=36, 209 evaluated, 208 expanded
[t=0.0589353s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0589465s, 28544 KB] g=38, 228 evaluated, 227 expanded
[t=0.0590509s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0590612s, 28544 KB] g=38, 230 evaluated, 229 expanded
[t=0.0597856s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0598015s, 28544 KB] g=40, 247 evaluated, 246 expanded
[t=0.0607837s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.060795s, 28544 KB] g=42, 270 evaluated, 269 expanded
[t=0.0619207s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.061939s, 28544 KB] g=44, 296 evaluated, 295 expanded
[t=0.0634076s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0634364s, 28544 KB] g=46, 324 evaluated, 323 expanded
[t=0.0639877s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0640093s, 28544 KB] g=42, 333 evaluated, 332 expanded
[t=0.0650267s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0650555s, 28544 KB] g=48, 349 evaluated, 348 expanded
[t=0.066009s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0660332s, 28544 KB] g=44, 365 evaluated, 364 expanded
[t=0.066646s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0666568s, 28544 KB] g=50, 379 evaluated, 378 expanded
[t=0.0680224s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0680336s, 28544 KB] g=52, 411 evaluated, 410 expanded
[t=0.0685078s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0685181s, 28544 KB] g=53, 422 evaluated, 421 expanded
[t=0.0686159s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0686262s, 28544 KB] g=54, 424 evaluated, 423 expanded
[t=0.0697341s, 28544 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0697527s, 28544 KB] g=56, 449 evaluated, 448 expanded
[t=0.0870365s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0871018s, 28544 KB] g=50, 861 evaluated, 860 expanded
[t=0.089957s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0899737s, 28544 KB] g=54, 929 evaluated, 928 expanded
[t=0.0904187s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0904289s, 28544 KB] g=56, 939 evaluated, 938 expanded
[t=0.100741s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.100776s, 28544 KB] g=74, 1185 evaluated, 1184 expanded
[t=0.101458s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.101474s, 28544 KB] g=76, 1201 evaluated, 1200 expanded
[t=0.102147s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.102161s, 28544 KB] g=78, 1217 evaluated, 1216 expanded
[t=0.102805s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.102819s, 28544 KB] g=80, 1233 evaluated, 1232 expanded
[t=0.103924s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.104018s, 28544 KB] g=82, 1250 evaluated, 1249 expanded
[t=0.104837s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.104868s, 28544 KB] g=84, 1265 evaluated, 1264 expanded
[t=0.105885s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.105917s, 28544 KB] g=86, 1281 evaluated, 1280 expanded
[t=0.10704s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.107059s, 28544 KB] g=88, 1306 evaluated, 1305 expanded
[t=0.110123s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.110151s, 28544 KB] g=94, 1380 evaluated, 1379 expanded
[t=0.117808s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.117831s, 28544 KB] g=108, 1565 evaluated, 1564 expanded
[t=0.121s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.121016s, 28544 KB] g=118, 1642 evaluated, 1641 expanded
[t=0.150162s, 28544 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.150238s, 28544 KB] g=160, 2295 evaluated, 2294 expanded
[t=0.264086s, 29468 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.264404s, 29468 KB] g=232, 4875 evaluated, 4874 expanded
[t=0.26491s, 29468 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.26497s, 29468 KB] g=234, 4883 evaluated, 4882 expanded
[t=0.269628s, 29468 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.269682s, 29468 KB] g=246, 4991 evaluated, 4990 expanded
[t=0.270469s, 29468 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.270483s, 29468 KB] g=250, 5011 evaluated, 5010 expanded
[t=0.270718s, 29468 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.270729s, 29468 KB] g=252, 5017 evaluated, 5016 expanded
[t=0.279177s, 29600 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.279217s, 29600 KB] g=282, 5242 evaluated, 5241 expanded
[t=0.2799s, 29600 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.279912s, 29600 KB] g=286, 5262 evaluated, 5261 expanded
[t=0.28013s, 29600 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.280151s, 29600 KB] g=288, 5268 evaluated, 5267 expanded
[t=0.281297s, 29600 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.281325s, 29600 KB] g=300, 5303 evaluated, 5302 expanded
[t=0.281631s, 29600 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.281656s, 29600 KB] g=304, 5312 evaluated, 5311 expanded
[t=0.281725s, 29600 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.281735s, 29600 KB] g=305, 5314 evaluated, 5313 expanded
[t=0.281794s, 29600 KB] Solution found!
[t=0.28182s, 29600 KB] Actual search time: 0.233142s
unstack b11 b2 (1)
put-down b11 (1)
unstack b14 b8 (1)
put-down b14 (1)
unstack b2 b29 (1)
stack b2 b8 (1)
pick-up b19 (1)
stack b19 b11 (1)
unstack b25 b4 (1)
stack b25 b9 (1)
unstack b29 b12 (1)
put-down b29 (1)
unstack b12 b6 (1)
put-down b12 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b6 b23 (1)
put-down b6 (1)
unstack b23 b20 (1)
stack b23 b25 (1)
unstack b20 b24 (1)
put-down b20 (1)
unstack b24 b7 (1)
stack b24 b19 (1)
unstack b7 b13 (1)
put-down b7 (1)
pick-up b29 (1)
stack b29 b7 (1)
unstack b13 b28 (1)
put-down b13 (1)
unstack b28 b1 (1)
stack b28 b29 (1)
unstack b1 b21 (1)
stack b1 b23 (1)
unstack b21 b27 (1)
put-down b21 (1)
unstack b27 b22 (1)
put-down b27 (1)
pick-up b20 (1)
stack b20 b27 (1)
unstack b22 b15 (1)
put-down b22 (1)
pick-up b21 (1)
stack b21 b22 (1)
unstack b2 b8 (1)
put-down b2 (1)
pick-up b8 (1)
stack b8 b15 (1)
pick-up b2 (1)
stack b2 b8 (1)
unstack b21 b22 (1)
put-down b21 (1)
pick-up b22 (1)
stack b22 b2 (1)
pick-up b21 (1)
stack b21 b22 (1)
unstack b1 b23 (1)
put-down b1 (1)
unstack b23 b25 (1)
put-down b23 (1)
pick-up b1 (1)
stack b1 b23 (1)
unstack b25 b9 (1)
put-down b25 (1)
unstack b9 b3 (1)
stack b9 b13 (1)
pick-up b25 (1)
stack b25 b9 (1)
unstack b3 b26 (1)
put-down b3 (1)
unstack b26 b10 (1)
put-down b26 (1)
unstack b10 b18 (1)
stack b10 b20 (1)
unstack b18 b17 (1)
stack b18 b6 (1)
unstack b17 b16 (1)
stack b17 b1 (1)
unstack b16 b5 (1)
stack b16 b4 (1)
pick-up b26 (1)
stack b26 b18 (1)
unstack b5 b30 (1)
stack b5 b21 (1)
pick-up b30 (1)
stack b30 b17 (1)
pick-up b3 (1)
stack b3 b30 (1)
unstack b14 b12 (1)
put-down b14 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b10 b20 (1)
put-down b10 (1)
unstack b20 b27 (1)
put-down b20 (1)
pick-up b10 (1)
stack b10 b20 (1)
pick-up b27 (1)
stack b27 b26 (1)
unstack b10 b20 (1)
put-down b10 (1)
pick-up b20 (1)
stack b20 b27 (1)
pick-up b10 (1)
stack b10 b20 (1)
unstack b25 b9 (1)
put-down b25 (1)
unstack b9 b13 (1)
put-down b9 (1)
pick-up b13 (1)
stack b13 b10 (1)
pick-up b9 (1)
stack b9 b13 (1)
pick-up b25 (1)
stack b25 b9 (1)
unstack b14 b12 (1)
put-down b14 (1)
unstack b12 b3 (1)
put-down b12 (1)
unstack b3 b30 (1)
put-down b3 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b30 b17 (1)
put-down b30 (1)
unstack b17 b1 (1)
put-down b17 (1)
pick-up b30 (1)
stack b30 b17 (1)
unstack b1 b23 (1)
put-down b1 (1)
pick-up b23 (1)
stack b23 b25 (1)
pick-up b1 (1)
stack b1 b23 (1)
unstack b30 b17 (1)
put-down b30 (1)
pick-up b17 (1)
stack b17 b1 (1)
pick-up b30 (1)
stack b30 b17 (1)
unstack b14 b12 (1)
put-down b14 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b30 b17 (1)
put-down b30 (1)
pick-up b3 (1)
stack b3 b30 (1)
unstack b14 b12 (1)
put-down b14 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b17 b1 (1)
put-down b17 (1)
unstack b1 b23 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b1 (1)
unstack b23 b25 (1)
put-down b23 (1)
unstack b25 b9 (1)
put-down b25 (1)
pick-up b23 (1)
stack b23 b25 (1)
unstack b17 b1 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b23 (1)
pick-up b17 (1)
stack b17 b1 (1)
unstack b14 b12 (1)
put-down b14 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b3 b30 (1)
put-down b3 (1)
pick-up b30 (1)
stack b30 b17 (1)
pick-up b3 (1)
stack b3 b30 (1)
unstack b14 b12 (1)
put-down b14 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b9 b13 (1)
put-down b9 (1)
unstack b13 b10 (1)
put-down b13 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b10 b20 (1)
put-down b10 (1)
unstack b20 b27 (1)
put-down b20 (1)
pick-up b10 (1)
stack b10 b20 (1)
unstack b9 b13 (1)
put-down b9 (1)
pick-up b13 (1)
stack b13 b10 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b27 b26 (1)
put-down b27 (1)
unstack b26 b18 (1)
put-down b26 (1)
pick-up b27 (1)
stack b27 b26 (1)
unstack b18 b6 (1)
put-down b18 (1)
pick-up b6 (1)
stack b6 b5 (1)
pick-up b18 (1)
stack b18 b6 (1)
unstack b27 b26 (1)
put-down b27 (1)
pick-up b26 (1)
stack b26 b18 (1)
pick-up b27 (1)
stack b27 b26 (1)
unstack b9 b13 (1)
put-down b9 (1)
unstack b13 b10 (1)
put-down b13 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b10 b20 (1)
put-down b10 (1)
pick-up b20 (1)
stack b20 b27 (1)
pick-up b10 (1)
stack b10 b20 (1)
unstack b9 b13 (1)
put-down b9 (1)
pick-up b13 (1)
stack b13 b10 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b14 b12 (1)
put-down b14 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b3 b30 (1)
put-down b3 (1)
unstack b30 b17 (1)
put-down b30 (1)
pick-up b3 (1)
stack b3 b30 (1)
unstack b14 b12 (1)
put-down b14 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b17 b1 (1)
put-down b17 (1)
unstack b1 b23 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b1 (1)
unstack b23 b25 (1)
put-down b23 (1)
pick-up b25 (1)
stack b25 b9 (1)
pick-up b23 (1)
stack b23 b25 (1)
unstack b17 b1 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b23 (1)
pick-up b17 (1)
stack b17 b1 (1)
unstack b14 b12 (1)
put-down b14 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b14 (1)
stack b14 b12 (1)
unstack b3 b30 (1)
put-down b3 (1)
pick-up b30 (1)
stack b30 b17 (1)
pick-up b3 (1)
stack b3 b30 (1)
unstack b14 b12 (1)
put-down b14 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b14 (1)
stack b14 b12 (1)
[t=0.281831s, 29600 KB] Plan length: 306 step(s).
[t=0.281831s, 29600 KB] Plan cost: 306
[t=0.281831s, 29600 KB] Expanded 5315 state(s).
[t=0.281831s, 29600 KB] Reopened 0 state(s).
[t=0.281831s, 29600 KB] Evaluated 5316 state(s).
[t=0.281831s, 29600 KB] Evaluations: 10632
[t=0.281831s, 29600 KB] Generated 79188 state(s).
[t=0.281831s, 29600 KB] Dead ends: 0 state(s).
[t=0.281831s, 29600 KB] Number of registered states: 5316
[t=0.281831s, 29600 KB] Int hash set load factor: 5316/8192 = 0.648926
[t=0.281831s, 29600 KB] Int hash set resizes: 13
[t=0.281831s, 29600 KB] Search time: 0.233186s
[t=0.281831s, 29600 KB] Total time: 0.281831s
Solution found.
Peak memory: 29600 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.49s
