INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_30/bws_problem_30_18.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.017s wall-clock]
2912 relevant atoms
1950 auxiliary atoms
4862 final queue length
8530 total queue pushes
Completing instantiation... [0.030s CPU, 0.029s wall-clock]
Instantiating: [0.050s CPU, 0.049s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
31 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.050s wall-clock]
2670 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
60 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.022s wall-clock]
Reordering and filtering variables...
61 of 61 variables necessary.
31 of 61 mutex groups necessary.
1800 of 1800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.012s wall-clock]
Translator variables: 61
Translator derived variables: 0
Translator facts: 992
Translator goal facts: 24
Translator mutex groups: 31
Translator total mutex groups size: 961
Translator operators: 1800
Translator axioms: 0
Translator task size: 15448
Translator peak memory: 41336 KB
Writing output... [0.000s CPU, 0.009s wall-clock]
Done! [0.150s CPU, 0.158s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9444e-05s, 24488 KB] reading input...
[t=0.00518052s, 26364 KB] done reading input!
[t=0.00632955s, 26760 KB] Initializing landmark count heuristic...
[t=0.0063653s, 26760 KB] Generating landmark graph...
[t=0.00645745s, 26892 KB] Building a landmark graph with reasonable orders.
[t=0.00654615s, 27024 KB] Initializing Exploration...
[t=0.00707753s, 27316 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0310068s, 28108 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0311136s, 28108 KB] Landmarks generation time: 0.0246648s
[t=0.0311377s, 28108 KB] Discovered 129 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0311561s, 28108 KB] 490 edges
[t=0.0311661s, 28108 KB] approx. reasonable orders
[t=0.0386011s, 28108 KB] approx. obedient reasonable orders
[t=0.0389801s, 28108 KB] Removed 3 reasonable or obedient reasonable orders
[t=0.0389944s, 28108 KB] Landmarks generation time: 0.0326275s
[t=0.0390054s, 28108 KB] Discovered 129 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0390141s, 28108 KB] 587 edges
[t=0.0390231s, 28108 KB] Landmark graph generation time: 0.0326652s
[t=0.0390321s, 28108 KB] Landmark graph contains 129 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0390406s, 28108 KB] Landmark graph contains 587 orderings.
[t=0.0397494s, 28136 KB] Simplifying 7140 unary operators... done! [5400 unary operators]
[t=0.0414801s, 28268 KB] time to simplify: 0.00185152s
[t=0.0417094s, 28268 KB] Initializing additive heuristic...
[t=0.0417298s, 28268 KB] Initializing FF heuristic...
[t=0.0418005s, 28268 KB] Building successor generator...done!
[t=0.0421878s, 28268 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0421965s, 28268 KB] time for successor generation creation: 0.000339679s
[t=0.0422295s, 28268 KB] Variables: 61
[t=0.0422381s, 28268 KB] FactPairs: 992
[t=0.0422474s, 28268 KB] Bytes per state: 24
[t=0.0424105s, 28268 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0424698s, 28268 KB] 59 initial landmarks, 24 goal landmarks
[t=0.0426264s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0426386s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0426494s, 28268 KB] g=0, 1 evaluated, 0 expanded
[t=0.0426714s, 28268 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.042682s, 28268 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0428982s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0429132s, 28268 KB] g=1, 5 evaluated, 4 expanded
[t=0.0432066s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0432194s, 28268 KB] g=3, 11 evaluated, 10 expanded
[t=0.0435585s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0435768s, 28268 KB] g=5, 18 evaluated, 17 expanded
[t=0.044392s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0444088s, 28268 KB] g=2, 35 evaluated, 34 expanded
[t=0.0445609s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0445728s, 28268 KB] g=8, 38 evaluated, 37 expanded
[t=0.0455515s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0455646s, 28268 KB] g=5, 59 evaluated, 58 expanded
[t=0.0458265s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0458361s, 28268 KB] g=7, 65 evaluated, 64 expanded
[t=0.0461304s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0461402s, 28268 KB] g=9, 72 evaluated, 71 expanded
[t=0.0467982s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0468089s, 28268 KB] g=11, 88 evaluated, 87 expanded
[t=0.046906s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0469157s, 28268 KB] g=12, 90 evaluated, 89 expanded
[t=0.0477738s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0477977s, 28268 KB] g=14, 111 evaluated, 110 expanded
[t=0.0478893s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0478983s, 28268 KB] g=14, 113 evaluated, 112 expanded
[t=0.0488526s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0488625s, 28268 KB] g=16, 137 evaluated, 136 expanded
[t=0.0499149s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0499263s, 28268 KB] g=18, 163 evaluated, 162 expanded
[t=0.0505744s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0505846s, 28268 KB] g=18, 179 evaluated, 178 expanded
[t=0.0509159s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0509259s, 28268 KB] g=20, 187 evaluated, 186 expanded
[t=0.0513855s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0513953s, 28268 KB] g=20, 198 evaluated, 197 expanded
[t=0.0522083s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.052219s, 28268 KB] g=22, 218 evaluated, 217 expanded
[t=0.0523912s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.052401s, 28268 KB] g=22, 222 evaluated, 221 expanded
[t=0.0531465s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0531652s, 28268 KB] g=24, 240 evaluated, 239 expanded
[t=0.0539285s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0539456s, 28268 KB] g=24, 257 evaluated, 256 expanded
[t=0.0540165s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0540262s, 28268 KB] g=26, 258 evaluated, 257 expanded
[t=0.0549692s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0549792s, 28268 KB] g=28, 281 evaluated, 280 expanded
[t=0.0555319s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0555415s, 28268 KB] g=26, 294 evaluated, 293 expanded
[t=0.057249s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0572625s, 28268 KB] g=28, 333 evaluated, 332 expanded
[t=0.0583979s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0584087s, 28268 KB] g=36, 360 evaluated, 359 expanded
[t=0.0591735s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0591835s, 28268 KB] g=38, 378 evaluated, 377 expanded
[t=0.0598776s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0598875s, 28268 KB] g=30, 394 evaluated, 393 expanded
[t=0.0610147s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0610249s, 28268 KB] g=40, 421 evaluated, 420 expanded
[t=0.0616811s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0616926s, 28268 KB] g=32, 436 evaluated, 435 expanded
[t=0.0651967s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0652169s, 28268 KB] g=44, 520 evaluated, 519 expanded
[t=0.0661053s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.066116s, 28268 KB] g=46, 541 evaluated, 540 expanded
[t=0.0669491s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0669591s, 28268 KB] g=48, 561 evaluated, 560 expanded
[t=0.0678423s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0678593s, 28268 KB] g=50, 582 evaluated, 581 expanded
[t=0.0686351s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0686453s, 28268 KB] g=52, 601 evaluated, 600 expanded
[t=0.0742198s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0742787s, 28268 KB] g=58, 735 evaluated, 734 expanded
[t=0.0747594s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0747717s, 28268 KB] g=60, 746 evaluated, 745 expanded
[t=0.0753476s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0753643s, 28268 KB] g=60, 759 evaluated, 758 expanded
[t=0.076075s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0760897s, 28268 KB] g=62, 776 evaluated, 775 expanded
[t=0.07819s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0782153s, 28268 KB] g=36, 825 evaluated, 824 expanded
[t=0.0796546s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0796654s, 28268 KB] g=38, 859 evaluated, 858 expanded
[t=0.0799324s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0799427s, 28268 KB] g=66, 865 evaluated, 864 expanded
[t=0.0806291s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0806394s, 28268 KB] g=68, 881 evaluated, 880 expanded
[t=0.0811168s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0811272s, 28268 KB] g=70, 892 evaluated, 891 expanded
[t=0.0844166s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.084429s, 28268 KB] g=76, 969 evaluated, 968 expanded
[t=0.0848515s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0848615s, 28268 KB] g=78, 979 evaluated, 978 expanded
[t=0.0872607s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0872767s, 28268 KB] g=82, 1035 evaluated, 1034 expanded
[t=0.0877107s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0877219s, 28268 KB] g=84, 1045 evaluated, 1044 expanded
[t=0.0962921s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0963247s, 28268 KB] g=96, 1255 evaluated, 1254 expanded
[t=0.0966307s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0966411s, 28268 KB] g=98, 1262 evaluated, 1261 expanded
[t=0.100697s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.10074s, 28268 KB] g=102, 1356 evaluated, 1355 expanded
[t=0.101031s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.101042s, 28268 KB] g=104, 1363 evaluated, 1362 expanded
[t=0.10493s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.104944s, 28268 KB] g=116, 1463 evaluated, 1462 expanded
[t=0.105676s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.105687s, 28268 KB] g=120, 1482 evaluated, 1481 expanded
[t=0.105919s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.105929s, 28268 KB] g=122, 1488 evaluated, 1487 expanded
[t=0.108983s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.108999s, 28268 KB] g=138, 1573 evaluated, 1572 expanded
[t=0.109802s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.109813s, 28268 KB] g=146, 1597 evaluated, 1596 expanded
[t=0.109922s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.109931s, 28268 KB] g=146, 1600 evaluated, 1599 expanded
[t=0.109993s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.110002s, 28268 KB] g=147, 1602 evaluated, 1601 expanded
[t=0.110061s, 28268 KB] Solution found!
[t=0.110078s, 28268 KB] Actual search time: 0.067602s
unstack b6 b26 (1)
stack b6 b27 (1)
unstack b12 b2 (1)
put-down b12 (1)
unstack b14 b30 (1)
put-down b14 (1)
unstack b15 b28 (1)
put-down b15 (1)
unstack b2 b23 (1)
put-down b2 (1)
unstack b28 b11 (1)
stack b28 b26 (1)
pick-up b12 (1)
stack b12 b11 (1)
unstack b5 b1 (1)
put-down b5 (1)
unstack b1 b3 (1)
stack b1 b30 (1)
unstack b3 b17 (1)
put-down b3 (1)
unstack b17 b21 (1)
put-down b17 (1)
unstack b21 b4 (1)
stack b21 b12 (1)
pick-up b15 (1)
stack b15 b4 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b25 b10 (1)
put-down b25 (1)
unstack b10 b16 (1)
put-down b10 (1)
unstack b16 b24 (1)
put-down b16 (1)
unstack b24 b29 (1)
put-down b24 (1)
pick-up b29 (1)
stack b29 b16 (1)
pick-up b10 (1)
stack b10 b29 (1)
unstack b15 b4 (1)
put-down b15 (1)
unstack b4 b13 (1)
stack b4 b6 (1)
unstack b13 b18 (1)
stack b13 b25 (1)
unstack b18 b19 (1)
put-down b18 (1)
pick-up b14 (1)
stack b14 b19 (1)
pick-up b15 (1)
stack b15 b4 (1)
unstack b14 b19 (1)
put-down b14 (1)
unstack b19 b9 (1)
stack b19 b1 (1)
pick-up b14 (1)
stack b14 b19 (1)
pick-up b9 (1)
stack b9 b22 (1)
pick-up b23 (1)
stack b23 b9 (1)
unstack b28 b26 (1)
put-down b28 (1)
unstack b26 b20 (1)
stack b26 b3 (1)
pick-up b2 (1)
stack b2 b20 (1)
pick-up b28 (1)
stack b28 b26 (1)
unstack b2 b20 (1)
put-down b2 (1)
unstack b20 b8 (1)
stack b20 b10 (1)
pick-up b2 (1)
stack b2 b20 (1)
pick-up b8 (1)
stack b8 b24 (1)
unstack b13 b25 (1)
put-down b13 (1)
pick-up b25 (1)
stack b25 b8 (1)
pick-up b13 (1)
stack b13 b25 (1)
unstack b5 b21 (1)
put-down b5 (1)
unstack b21 b12 (1)
put-down b21 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b12 b11 (1)
put-down b12 (1)
unstack b11 b7 (1)
stack b11 b18 (1)
pick-up b12 (1)
stack b12 b11 (1)
unstack b5 b21 (1)
put-down b5 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b5 (1)
stack b5 b21 (1)
pick-up b7 (1)
stack b7 b5 (1)
unstack b14 b19 (1)
put-down b14 (1)
unstack b19 b1 (1)
put-down b19 (1)
pick-up b14 (1)
stack b14 b19 (1)
unstack b1 b30 (1)
put-down b1 (1)
pick-up b30 (1)
stack b30 b7 (1)
pick-up b1 (1)
stack b1 b30 (1)
unstack b14 b19 (1)
put-down b14 (1)
pick-up b19 (1)
stack b19 b1 (1)
pick-up b14 (1)
stack b14 b19 (1)
unstack b2 b20 (1)
put-down b2 (1)
unstack b20 b10 (1)
put-down b20 (1)
unstack b10 b29 (1)
put-down b10 (1)
pick-up b20 (1)
stack b20 b10 (1)
pick-up b2 (1)
stack b2 b20 (1)
unstack b29 b16 (1)
put-down b29 (1)
pick-up b16 (1)
stack b16 b13 (1)
pick-up b29 (1)
stack b29 b16 (1)
unstack b2 b20 (1)
put-down b2 (1)
unstack b20 b10 (1)
put-down b20 (1)
pick-up b10 (1)
stack b10 b29 (1)
pick-up b20 (1)
stack b20 b10 (1)
pick-up b2 (1)
stack b2 b20 (1)
[t=0.110088s, 28268 KB] Plan length: 148 step(s).
[t=0.110088s, 28268 KB] Plan cost: 148
[t=0.110088s, 28268 KB] Expanded 1603 state(s).
[t=0.110088s, 28268 KB] Reopened 0 state(s).
[t=0.110088s, 28268 KB] Evaluated 1604 state(s).
[t=0.110088s, 28268 KB] Evaluations: 3208
[t=0.110088s, 28268 KB] Generated 25829 state(s).
[t=0.110088s, 28268 KB] Dead ends: 0 state(s).
[t=0.110088s, 28268 KB] Number of registered states: 1604
[t=0.110088s, 28268 KB] Int hash set load factor: 1604/2048 = 0.783203
[t=0.110088s, 28268 KB] Int hash set resizes: 11
[t=0.110088s, 28268 KB] Search time: 0.067678s
[t=0.110088s, 28268 KB] Total time: 0.110088s
Solution found.
Peak memory: 28268 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.32s
