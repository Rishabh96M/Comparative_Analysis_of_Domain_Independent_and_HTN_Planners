INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_32/bws_problem_32_46.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.030s CPU, 0.022s wall-clock]
3298 relevant atoms
2208 auxiliary atoms
5506 final queue length
9670 total queue pushes
Completing instantiation... [0.040s CPU, 0.043s wall-clock]
Instantiating: [0.070s CPU, 0.069s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
33 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.055s wall-clock]
3040 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
64 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.026s wall-clock]
Reordering and filtering variables...
65 of 65 variables necessary.
33 of 65 mutex groups necessary.
2048 of 2048 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.014s wall-clock]
Translator variables: 65
Translator derived variables: 0
Translator facts: 1122
Translator goal facts: 27
Translator mutex groups: 33
Translator total mutex groups size: 1089
Translator operators: 2048
Translator axioms: 0
Translator task size: 17567
Translator peak memory: 42752 KB
Writing output... [0.010s CPU, 0.011s wall-clock]
Done! [0.200s CPU, 0.196s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.871e-05s, 24488 KB] reading input...
[t=0.00694519s, 26784 KB] done reading input!
[t=0.0078694s, 27180 KB] Initializing landmark count heuristic...
[t=0.00790668s, 27180 KB] Generating landmark graph...
[t=0.00806102s, 27312 KB] Building a landmark graph with reasonable orders.
[t=0.00815808s, 27312 KB] Initializing Exploration...
[t=0.00871425s, 27768 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0424742s, 28824 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0427766s, 28824 KB] Landmarks generation time: 0.0347543s
[t=0.0428379s, 28824 KB] Discovered 140 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0428693s, 28824 KB] 815 edges
[t=0.0428843s, 28824 KB] approx. reasonable orders
[t=0.0442359s, 28824 KB] approx. obedient reasonable orders
[t=0.0443217s, 28824 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.044333s, 28824 KB] Landmarks generation time: 0.036436s
[t=0.0443576s, 28824 KB] Discovered 140 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0443663s, 28824 KB] 820 edges
[t=0.044375s, 28824 KB] Landmark graph generation time: 0.036476s
[t=0.0443843s, 28824 KB] Landmark graph contains 140 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0443929s, 28824 KB] Landmark graph contains 820 orderings.
[t=0.045163s, 28856 KB] Simplifying 8128 unary operators... done! [6144 unary operators]
[t=0.0472816s, 28856 KB] time to simplify: 0.00214663s
[t=0.0474304s, 28856 KB] Initializing additive heuristic...
[t=0.0474527s, 28856 KB] Initializing FF heuristic...
[t=0.0475101s, 28856 KB] Building successor generator...done!
[t=0.047905s, 29012 KB] peak memory difference for successor generator creation: 156 KB
[t=0.0479147s, 29012 KB] time for successor generation creation: 0.000365209s
[t=0.0479293s, 29012 KB] Variables: 65
[t=0.0479377s, 29012 KB] FactPairs: 1122
[t=0.0479459s, 29012 KB] Bytes per state: 32
[t=0.048044s, 29012 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0480796s, 29012 KB] 62 initial landmarks, 27 goal landmarks
[t=0.0481632s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 78
[t=0.0481739s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.048183s, 29012 KB] g=0, 1 evaluated, 0 expanded
[t=0.0481977s, 29012 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 78
[t=0.0482066s, 29012 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0484729s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 77
[t=0.048483s, 29012 KB] g=2, 6 evaluated, 5 expanded
[t=0.0490895s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 76
[t=0.0491014s, 29012 KB] g=4, 18 evaluated, 17 expanded
[t=0.0494032s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0494132s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0494227s, 29012 KB] g=4, 24 evaluated, 23 expanded
[t=0.0496757s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0496851s, 29012 KB] g=6, 29 evaluated, 28 expanded
[t=0.0504472s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0504673s, 29012 KB] g=8, 44 evaluated, 43 expanded
[t=0.0507764s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0507875s, 29012 KB] g=8, 50 evaluated, 49 expanded
[t=0.0508475s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0508568s, 29012 KB] g=10, 51 evaluated, 50 expanded
[t=0.0514459s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0514567s, 29012 KB] g=12, 63 evaluated, 62 expanded
[t=0.0520507s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0520683s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0520769s, 29012 KB] g=14, 75 evaluated, 74 expanded
[t=0.0524214s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0524402s, 29012 KB] g=16, 82 evaluated, 81 expanded
[t=0.0525003s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0525095s, 29012 KB] g=16, 83 evaluated, 82 expanded
[t=0.0530984s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.053112s, 29012 KB] g=18, 95 evaluated, 94 expanded
[t=0.0533984s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0534094s, 29012 KB] g=18, 101 evaluated, 100 expanded
[t=0.0543248s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0543376s, 29012 KB] g=21, 120 evaluated, 119 expanded
[t=0.0549463s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0549701s, 29012 KB] g=24, 131 evaluated, 130 expanded
[t=0.0557707s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0557832s, 29012 KB] g=26, 147 evaluated, 146 expanded
[t=0.0567201s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0567347s, 29012 KB] g=28, 166 evaluated, 165 expanded
[t=0.0572845s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0573036s, 29012 KB] g=30, 177 evaluated, 176 expanded
[t=0.0573666s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0573769s, 29012 KB] g=30, 178 evaluated, 177 expanded
[t=0.058197s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0582181s, 29012 KB] g=32, 195 evaluated, 194 expanded
[t=0.0584238s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0584361s, 29012 KB] g=32, 199 evaluated, 198 expanded
[t=0.0590993s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0591251s, 29012 KB] g=34, 212 evaluated, 211 expanded
[t=0.0595844s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.05961s, 29012 KB] g=34, 221 evaluated, 220 expanded
[t=0.0598354s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0598474s, 29012 KB] g=35, 225 evaluated, 224 expanded
[t=0.0599118s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0599214s, 29012 KB] g=36, 226 evaluated, 225 expanded
[t=0.0599838s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0599933s, 29012 KB] g=36, 227 evaluated, 226 expanded
[t=0.0608695s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0609076s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0609209s, 29012 KB] g=38, 243 evaluated, 242 expanded
[t=0.0614556s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0614859s, 29012 KB] g=40, 252 evaluated, 251 expanded
[t=0.0616027s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0616126s, 29012 KB] g=40, 254 evaluated, 253 expanded
[t=0.0623267s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0623469s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0623698s, 29012 KB] g=42, 268 evaluated, 267 expanded
[t=0.0627237s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0627363s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0627453s, 29012 KB] g=44, 275 evaluated, 274 expanded
[t=0.063053s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0630654s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.063074s, 29012 KB] g=46, 281 evaluated, 280 expanded
[t=0.064821s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0648472s, 29012 KB] g=50, 316 evaluated, 315 expanded
[t=0.0653336s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0653444s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0653531s, 29012 KB] g=52, 326 evaluated, 325 expanded
[t=0.0714655s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0715208s, 29012 KB] g=65, 449 evaluated, 448 expanded
[t=0.0715923s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0716029s, 29012 KB] g=66, 450 evaluated, 449 expanded
[t=0.0718163s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0718275s, 29012 KB] g=67, 454 evaluated, 453 expanded
[t=0.0718934s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0719032s, 29012 KB] g=68, 455 evaluated, 454 expanded
[t=0.0724189s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0724313s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0724402s, 29012 KB] g=70, 465 evaluated, 464 expanded
[t=0.0728414s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.072854s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0728624s, 29012 KB] g=72, 473 evaluated, 472 expanded
[t=0.0730773s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0730895s, 29012 KB] g=73, 477 evaluated, 476 expanded
[t=0.0731522s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0731622s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0731711s, 29012 KB] g=74, 478 evaluated, 477 expanded
[t=0.0736376s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0736674s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0736765s, 29012 KB] g=76, 487 evaluated, 486 expanded
[t=0.0740557s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0740778s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0740877s, 29012 KB] g=78, 494 evaluated, 493 expanded
[t=0.0744897s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0745018s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.074535s, 29012 KB] g=80, 502 evaluated, 501 expanded
[t=0.0748856s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0748966s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0749048s, 29012 KB] g=82, 509 evaluated, 508 expanded
[t=0.0752752s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0752863s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0752963s, 29012 KB] g=84, 516 evaluated, 515 expanded
[t=0.0761787s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.076201s, 29012 KB] g=87, 534 evaluated, 533 expanded
[t=0.0762608s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0762702s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0762784s, 29012 KB] g=88, 535 evaluated, 534 expanded
[t=0.076616s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0766274s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0766354s, 29012 KB] g=90, 542 evaluated, 541 expanded
[t=0.0783358s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0783707s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0783962s, 29012 KB] g=96, 578 evaluated, 577 expanded
[t=0.0809278s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0809565s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0809661s, 29012 KB] g=104, 630 evaluated, 629 expanded
[t=0.0812072s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0812173s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0812259s, 29012 KB] g=106, 635 evaluated, 634 expanded
[t=0.0941936s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0942569s, 29012 KB] g=122, 921 evaluated, 920 expanded
[t=0.0949502s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0949706s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.09498s, 29012 KB] g=128, 935 evaluated, 934 expanded
[t=0.104394s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.104471s, 29012 KB] g=148, 1124 evaluated, 1123 expanded
[t=0.10595s, 29012 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.105973s, 29012 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.105983s, 29012 KB] g=162, 1155 evaluated, 1154 expanded
[t=0.236871s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.236979s, 29296 KB] g=234, 3894 evaluated, 3893 expanded
[t=0.237689s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.237708s, 29296 KB] g=238, 3910 evaluated, 3909 expanded
[t=0.237886s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.237902s, 29296 KB] g=240, 3914 evaluated, 3913 expanded
[t=0.240151s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.240204s, 29296 KB] g=252, 3968 evaluated, 3967 expanded
[t=0.240558s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.240586s, 29296 KB] g=256, 3977 evaluated, 3976 expanded
[t=0.240706s, 29296 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.240717s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.240726s, 29296 KB] g=258, 3980 evaluated, 3979 expanded
[t=0.244111s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.24415s, 29296 KB] g=288, 4081 evaluated, 4080 expanded
[t=0.244432s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.244446s, 29296 KB] g=292, 4090 evaluated, 4089 expanded
[t=0.244557s, 29296 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.244574s, 29296 KB] g=294, 4093 evaluated, 4092 expanded
[t=0.245034s, 29432 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.245049s, 29432 KB] g=306, 4110 evaluated, 4109 expanded
[t=0.24515s, 29432 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.245162s, 29432 KB] g=310, 4114 evaluated, 4113 expanded
[t=0.245186s, 29432 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.245195s, 29432 KB] g=311, 4115 evaluated, 4114 expanded
[t=0.245215s, 29432 KB] Solution found!
[t=0.245248s, 29432 KB] Actual search time: 0.197167s
unstack b17 b26 (1)
put-down b17 (1)
unstack b26 b9 (1)
stack b26 b21 (1)
unstack b1 b12 (1)
put-down b1 (1)
unstack b20 b14 (1)
put-down b20 (1)
unstack b14 b19 (1)
put-down b14 (1)
unstack b19 b18 (1)
stack b19 b9 (1)
unstack b18 b25 (1)
stack b18 b20 (1)
unstack b25 b28 (1)
stack b25 b12 (1)
unstack b28 b6 (1)
put-down b28 (1)
unstack b19 b9 (1)
put-down b19 (1)
unstack b9 b8 (1)
put-down b9 (1)
unstack b8 b22 (1)
stack b8 b25 (1)
unstack b22 b30 (1)
put-down b22 (1)
unstack b30 b7 (1)
put-down b30 (1)
unstack b7 b29 (1)
put-down b7 (1)
unstack b29 b15 (1)
stack b29 b18 (1)
unstack b15 b13 (1)
stack b15 b28 (1)
unstack b13 b32 (1)
stack b13 b26 (1)
pick-up b9 (1)
stack b9 b22 (1)
pick-up b14 (1)
stack b14 b29 (1)
pick-up b1 (1)
stack b1 b14 (1)
pick-up b17 (1)
stack b17 b8 (1)
unstack b9 b22 (1)
put-down b9 (1)
pick-up b22 (1)
stack b22 b7 (1)
pick-up b9 (1)
stack b9 b22 (1)
pick-up b19 (1)
stack b19 b9 (1)
unstack b17 b8 (1)
put-down b17 (1)
unstack b8 b25 (1)
put-down b8 (1)
unstack b25 b12 (1)
put-down b25 (1)
unstack b12 b3 (1)
put-down b12 (1)
unstack b3 b10 (1)
put-down b3 (1)
unstack b10 b27 (1)
put-down b10 (1)
unstack b27 b11 (1)
stack b27 b17 (1)
unstack b11 b4 (1)
stack b11 b32 (1)
pick-up b12 (1)
stack b12 b3 (1)
unstack b4 b16 (1)
stack b4 b19 (1)
unstack b16 b5 (1)
stack b16 b10 (1)
pick-up b25 (1)
stack b25 b12 (1)
unstack b5 b2 (1)
stack b5 b6 (1)
unstack b2 b23 (1)
stack b2 b1 (1)
unstack b23 b31 (1)
stack b23 b15 (1)
pick-up b8 (1)
stack b8 b25 (1)
unstack b31 b24 (1)
put-down b31 (1)
pick-up b24 (1)
stack b24 b5 (1)
pick-up b31 (1)
stack b31 b24 (1)
unstack b27 b17 (1)
put-down b27 (1)
pick-up b17 (1)
stack b17 b8 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b23 b15 (1)
put-down b23 (1)
unstack b15 b28 (1)
put-down b15 (1)
pick-up b28 (1)
stack b28 b31 (1)
pick-up b15 (1)
stack b15 b28 (1)
pick-up b23 (1)
stack b23 b15 (1)
unstack b4 b19 (1)
put-down b4 (1)
unstack b19 b9 (1)
put-down b19 (1)
pick-up b4 (1)
stack b4 b19 (1)
unstack b9 b22 (1)
put-down b9 (1)
unstack b22 b7 (1)
put-down b22 (1)
pick-up b7 (1)
stack b7 b2 (1)
pick-up b22 (1)
stack b22 b7 (1)
pick-up b9 (1)
stack b9 b22 (1)
unstack b4 b19 (1)
put-down b4 (1)
pick-up b19 (1)
stack b19 b9 (1)
pick-up b4 (1)
stack b4 b19 (1)
unstack b27 b17 (1)
put-down b27 (1)
unstack b17 b8 (1)
put-down b17 (1)
unstack b8 b25 (1)
put-down b8 (1)
pick-up b17 (1)
stack b17 b8 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b25 b12 (1)
put-down b25 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b3 (1)
stack b3 b4 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b25 (1)
stack b25 b12 (1)
unstack b27 b17 (1)
put-down b27 (1)
unstack b17 b8 (1)
put-down b17 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b25 b12 (1)
put-down b25 (1)
pick-up b8 (1)
stack b8 b25 (1)
unstack b27 b17 (1)
put-down b27 (1)
pick-up b17 (1)
stack b17 b8 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b12 b3 (1)
put-down b12 (1)
unstack b3 b4 (1)
put-down b3 (1)
pick-up b12 (1)
stack b12 b3 (1)
unstack b4 b19 (1)
put-down b4 (1)
unstack b19 b9 (1)
put-down b19 (1)
pick-up b4 (1)
stack b4 b19 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b3 (1)
stack b3 b4 (1)
pick-up b12 (1)
stack b12 b3 (1)
unstack b27 b17 (1)
put-down b27 (1)
unstack b17 b8 (1)
put-down b17 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b8 b25 (1)
put-down b8 (1)
pick-up b25 (1)
stack b25 b12 (1)
pick-up b8 (1)
stack b8 b25 (1)
unstack b27 b17 (1)
put-down b27 (1)
pick-up b17 (1)
stack b17 b8 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b9 b22 (1)
put-down b9 (1)
unstack b22 b7 (1)
put-down b22 (1)
pick-up b9 (1)
stack b9 b22 (1)
unstack b7 b2 (1)
put-down b7 (1)
unstack b2 b1 (1)
put-down b2 (1)
pick-up b7 (1)
stack b7 b2 (1)
unstack b9 b22 (1)
put-down b9 (1)
pick-up b22 (1)
stack b22 b7 (1)
pick-up b9 (1)
stack b9 b22 (1)
unstack b1 b14 (1)
put-down b1 (1)
unstack b14 b29 (1)
put-down b14 (1)
pick-up b1 (1)
stack b1 b14 (1)
unstack b29 b18 (1)
put-down b29 (1)
unstack b18 b20 (1)
put-down b18 (1)
pick-up b20 (1)
stack b20 b23 (1)
pick-up b18 (1)
stack b18 b20 (1)
pick-up b29 (1)
stack b29 b18 (1)
unstack b1 b14 (1)
put-down b1 (1)
pick-up b14 (1)
stack b14 b29 (1)
pick-up b1 (1)
stack b1 b14 (1)
unstack b9 b22 (1)
put-down b9 (1)
unstack b22 b7 (1)
put-down b22 (1)
pick-up b9 (1)
stack b9 b22 (1)
unstack b7 b2 (1)
put-down b7 (1)
pick-up b2 (1)
stack b2 b1 (1)
pick-up b7 (1)
stack b7 b2 (1)
unstack b9 b22 (1)
put-down b9 (1)
pick-up b22 (1)
stack b22 b7 (1)
pick-up b9 (1)
stack b9 b22 (1)
unstack b27 b17 (1)
put-down b27 (1)
unstack b17 b8 (1)
put-down b17 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b8 b25 (1)
put-down b8 (1)
unstack b25 b12 (1)
put-down b25 (1)
pick-up b8 (1)
stack b8 b25 (1)
unstack b27 b17 (1)
put-down b27 (1)
pick-up b17 (1)
stack b17 b8 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b12 b3 (1)
put-down b12 (1)
unstack b3 b4 (1)
put-down b3 (1)
pick-up b12 (1)
stack b12 b3 (1)
unstack b4 b19 (1)
put-down b4 (1)
pick-up b19 (1)
stack b19 b9 (1)
pick-up b4 (1)
stack b4 b19 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b3 (1)
stack b3 b4 (1)
pick-up b12 (1)
stack b12 b3 (1)
unstack b27 b17 (1)
put-down b27 (1)
unstack b17 b8 (1)
put-down b17 (1)
pick-up b27 (1)
stack b27 b17 (1)
unstack b8 b25 (1)
put-down b8 (1)
pick-up b25 (1)
stack b25 b12 (1)
pick-up b8 (1)
stack b8 b25 (1)
unstack b27 b17 (1)
put-down b27 (1)
pick-up b17 (1)
stack b17 b8 (1)
pick-up b27 (1)
stack b27 b17 (1)
[t=0.245261s, 29432 KB] Plan length: 312 step(s).
[t=0.245261s, 29432 KB] Plan cost: 312
[t=0.245261s, 29432 KB] Expanded 4115 state(s).
[t=0.245261s, 29432 KB] Reopened 0 state(s).
[t=0.245261s, 29432 KB] Evaluated 4116 state(s).
[t=0.245261s, 29432 KB] Evaluations: 8232
[t=0.245261s, 29432 KB] Generated 44415 state(s).
[t=0.245261s, 29432 KB] Dead ends: 0 state(s).
[t=0.245261s, 29432 KB] Number of registered states: 4116
[t=0.245261s, 29432 KB] Int hash set load factor: 4116/8192 = 0.502441
[t=0.245261s, 29432 KB] Int hash set resizes: 13
[t=0.245261s, 29432 KB] Search time: 0.197217s
[t=0.245261s, 29432 KB] Total time: 0.245261s
Solution found.
Peak memory: 29432 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.49s
