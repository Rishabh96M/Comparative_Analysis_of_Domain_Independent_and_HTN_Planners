INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_25/bws_problem_25_48.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.012s wall-clock]
2052 relevant atoms
1375 auxiliary atoms
3427 final queue length
5982 total queue pushes
Completing instantiation... [0.030s CPU, 0.021s wall-clock]
Instantiating: [0.040s CPU, 0.034s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
26 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.001s wall-clock]
Translating task: [0.040s CPU, 0.031s wall-clock]
1850 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
50 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.019s wall-clock]
Reordering and filtering variables...
51 of 51 variables necessary.
26 of 51 mutex groups necessary.
1250 of 1250 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.008s wall-clock]
Translator variables: 51
Translator derived variables: 0
Translator facts: 702
Translator goal facts: 22
Translator mutex groups: 26
Translator total mutex groups size: 676
Translator operators: 1250
Translator axioms: 0
Translator task size: 10751
Translator peak memory: 38388 KB
Writing output... [0.000s CPU, 0.007s wall-clock]
Done! [0.110s CPU, 0.112s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.6527e-05s, 24488 KB] reading input...
[t=0.00374053s, 25632 KB] done reading input!
[t=0.00499352s, 26028 KB] Initializing landmark count heuristic...
[t=0.00503538s, 26028 KB] Generating landmark graph...
[t=0.00511434s, 26160 KB] Building a landmark graph with reasonable orders.
[t=0.00518752s, 26160 KB] Initializing Exploration...
[t=0.00555181s, 26532 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0210924s, 27060 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0212016s, 27060 KB] Landmarks generation time: 0.0160893s
[t=0.0212195s, 27060 KB] Discovered 114 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0212421s, 27060 KB] 518 edges
[t=0.021253s, 27060 KB] approx. reasonable orders
[t=0.0262585s, 27060 KB] approx. obedient reasonable orders
[t=0.0265091s, 27060 KB] Removed 9 reasonable or obedient reasonable orders
[t=0.026522s, 27060 KB] Landmarks generation time: 0.0214858s
[t=0.0265334s, 27060 KB] Discovered 114 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0265423s, 27060 KB] 625 edges
[t=0.0265511s, 27060 KB] Landmark graph generation time: 0.0215229s
[t=0.0265598s, 27060 KB] Landmark graph contains 114 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.026576s, 27060 KB] Landmark graph contains 625 orderings.
[t=0.0270303s, 27060 KB] Simplifying 4950 unary operators... done! [3750 unary operators]
[t=0.0282838s, 27192 KB] time to simplify: 0.00133659s
[t=0.0284446s, 27192 KB] Initializing additive heuristic...
[t=0.0284608s, 27192 KB] Initializing FF heuristic...
[t=0.0285133s, 27192 KB] Building successor generator...done!
[t=0.0287451s, 27192 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0287542s, 27192 KB] time for successor generation creation: 0.000197966s
[t=0.0287672s, 27192 KB] Variables: 51
[t=0.0287757s, 27192 KB] FactPairs: 702
[t=0.0287841s, 27192 KB] Bytes per state: 20
[t=0.0288705s, 27192 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0289043s, 27192 KB] 50 initial landmarks, 22 goal landmarks
[t=0.0289649s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0289746s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.028984s, 27192 KB] g=0, 1 evaluated, 0 expanded
[t=0.0289972s, 27192 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.029006s, 27192 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0292522s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.029262s, 27192 KB] g=2, 8 evaluated, 7 expanded
[t=0.029305s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0293148s, 27192 KB] g=2, 9 evaluated, 8 expanded
[t=0.029711s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0297211s, 27192 KB] g=4, 21 evaluated, 20 expanded
[t=0.0301492s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0301594s, 27192 KB] g=6, 34 evaluated, 33 expanded
[t=0.0306928s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0307051s, 27192 KB] g=8, 50 evaluated, 49 expanded
[t=0.0312401s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0312512s, 27192 KB] g=6, 66 evaluated, 65 expanded
[t=0.0313604s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0313703s, 27192 KB] g=10, 69 evaluated, 68 expanded
[t=0.0320181s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0320295s, 27192 KB] g=12, 89 evaluated, 88 expanded
[t=0.0327306s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0327478s, 27192 KB] g=14, 111 evaluated, 110 expanded
[t=0.0329237s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0329389s, 27192 KB] g=10, 116 evaluated, 115 expanded
[t=0.0334022s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0334246s, 27192 KB] g=16, 130 evaluated, 129 expanded
[t=0.0341855s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0341973s, 27192 KB] g=18, 154 evaluated, 153 expanded
[t=0.0349668s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0349805s, 27192 KB] g=20, 178 evaluated, 177 expanded
[t=0.0357268s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0357389s, 27192 KB] g=22, 202 evaluated, 201 expanded
[t=0.0357848s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0357948s, 27192 KB] g=14, 203 evaluated, 202 expanded
[t=0.0364187s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0364306s, 27192 KB] g=16, 223 evaluated, 222 expanded
[t=0.0367893s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0368022s, 27192 KB] g=24, 234 evaluated, 233 expanded
[t=0.0374905s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.037505s, 27192 KB] g=20, 256 evaluated, 255 expanded
[t=0.0377866s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0377977s, 27192 KB] g=26, 264 evaluated, 263 expanded
[t=0.038785s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0388065s, 27192 KB] g=28, 293 evaluated, 292 expanded
[t=0.0412936s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.041308s, 27192 KB] g=26, 373 evaluated, 372 expanded
[t=0.0416642s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0416751s, 27192 KB] g=30, 384 evaluated, 383 expanded
[t=0.0432259s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0432386s, 27192 KB] g=32, 433 evaluated, 432 expanded
[t=0.0443579s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0443689s, 27192 KB] g=32, 469 evaluated, 468 expanded
[t=0.0448854s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0448964s, 27192 KB] g=34, 485 evaluated, 484 expanded
[t=0.0458844s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0458953s, 27192 KB] g=38, 516 evaluated, 515 expanded
[t=0.046311s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.046321s, 27192 KB] g=40, 529 evaluated, 528 expanded
[t=0.0465195s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0465293s, 27192 KB] g=36, 535 evaluated, 534 expanded
[t=0.0469092s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0469196s, 27192 KB] g=42, 547 evaluated, 546 expanded
[t=0.0474883s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0474984s, 27192 KB] g=44, 565 evaluated, 564 expanded
[t=0.0509211s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0509359s, 27192 KB] g=50, 677 evaluated, 676 expanded
[t=0.0513996s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0514099s, 27192 KB] g=52, 692 evaluated, 691 expanded
[t=0.0519047s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0519147s, 27192 KB] g=54, 708 evaluated, 707 expanded
[t=0.0523463s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0523655s, 27192 KB] g=56, 722 evaluated, 721 expanded
[t=0.0528263s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0528374s, 27192 KB] g=58, 737 evaluated, 736 expanded
[t=0.0533327s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0533459s, 27192 KB] g=60, 753 evaluated, 752 expanded
[t=0.0537178s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0537384s, 27192 KB] g=62, 765 evaluated, 764 expanded
[t=0.0662275s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0662827s, 27192 KB] g=76, 1161 evaluated, 1160 expanded
[t=0.0699126s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0699402s, 27192 KB] g=84, 1281 evaluated, 1280 expanded
[t=0.0713129s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0713345s, 27192 KB] g=88, 1325 evaluated, 1324 expanded
[t=0.0716106s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0716275s, 27192 KB] g=90, 1334 evaluated, 1333 expanded
[t=0.0786348s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0786556s, 27192 KB] g=102, 1572 evaluated, 1571 expanded
[t=0.0793847s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0793956s, 27192 KB] g=106, 1596 evaluated, 1595 expanded
[t=0.0795859s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0795954s, 27192 KB] g=108, 1602 evaluated, 1601 expanded
[t=0.0934762s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.093516s, 27324 KB] g=126, 2071 evaluated, 2070 expanded
[t=0.0937349s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0937459s, 27324 KB] g=128, 2078 evaluated, 2077 expanded
[t=0.0955588s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0955733s, 27324 KB] g=136, 2140 evaluated, 2139 expanded
[t=0.0961657s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0961766s, 27324 KB] g=140, 2160 evaluated, 2159 expanded
[t=0.0963285s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0963393s, 27324 KB] g=142, 2165 evaluated, 2164 expanded
[t=0.102666s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.102768s, 27324 KB] g=172, 2386 evaluated, 2385 expanded
[t=0.10331s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.103322s, 27324 KB] g=176, 2406 evaluated, 2405 expanded
[t=0.103457s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.103468s, 27324 KB] g=178, 2411 evaluated, 2410 expanded
[t=0.104324s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.104335s, 27324 KB] g=190, 2446 evaluated, 2445 expanded
[t=0.104552s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.104563s, 27324 KB] g=194, 2455 evaluated, 2454 expanded
[t=0.104611s, 27324 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.104624s, 27324 KB] g=195, 2457 evaluated, 2456 expanded
[t=0.104672s, 27324 KB] Solution found!
[t=0.104693s, 27324 KB] Actual search time: 0.0757858s
unstack b1 b24 (1)
stack b1 b2 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b22 (1)
stack b15 b24 (1)
unstack b17 b14 (1)
put-down b17 (1)
unstack b14 b25 (1)
put-down b14 (1)
unstack b25 b3 (1)
stack b25 b22 (1)
unstack b3 b13 (1)
stack b3 b25 (1)
pick-up b14 (1)
stack b14 b13 (1)
unstack b4 b12 (1)
put-down b4 (1)
unstack b12 b21 (1)
stack b12 b17 (1)
unstack b1 b2 (1)
put-down b1 (1)
unstack b2 b8 (1)
stack b2 b10 (1)
pick-up b1 (1)
stack b1 b2 (1)
unstack b14 b13 (1)
put-down b14 (1)
unstack b13 b16 (1)
stack b13 b12 (1)
pick-up b14 (1)
stack b14 b13 (1)
unstack b16 b23 (1)
put-down b16 (1)
unstack b23 b7 (1)
put-down b23 (1)
unstack b7 b11 (1)
stack b7 b14 (1)
unstack b11 b5 (1)
stack b11 b8 (1)
pick-up b23 (1)
stack b23 b11 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b15 b24 (1)
put-down b15 (1)
unstack b24 b20 (1)
stack b24 b3 (1)
pick-up b15 (1)
stack b15 b24 (1)
unstack b20 b19 (1)
stack b20 b15 (1)
unstack b19 b6 (1)
stack b19 b16 (1)
unstack b6 b18 (1)
put-down b6 (1)
unstack b18 b9 (1)
put-down b18 (1)
pick-up b4 (1)
stack b4 b19 (1)
pick-up b9 (1)
stack b9 b4 (1)
unstack b1 b2 (1)
put-down b1 (1)
unstack b2 b10 (1)
put-down b2 (1)
pick-up b1 (1)
stack b1 b2 (1)
pick-up b10 (1)
stack b10 b7 (1)
unstack b1 b2 (1)
put-down b1 (1)
pick-up b2 (1)
stack b2 b10 (1)
pick-up b1 (1)
stack b1 b2 (1)
unstack b23 b11 (1)
put-down b23 (1)
unstack b11 b8 (1)
put-down b11 (1)
pick-up b23 (1)
stack b23 b11 (1)
pick-up b8 (1)
stack b8 b6 (1)
unstack b23 b11 (1)
put-down b23 (1)
pick-up b11 (1)
stack b11 b8 (1)
pick-up b23 (1)
stack b23 b11 (1)
unstack b9 b4 (1)
put-down b9 (1)
unstack b4 b19 (1)
put-down b4 (1)
pick-up b9 (1)
stack b9 b4 (1)
unstack b19 b16 (1)
put-down b19 (1)
pick-up b16 (1)
stack b16 b18 (1)
pick-up b19 (1)
stack b19 b16 (1)
unstack b9 b4 (1)
put-down b9 (1)
pick-up b4 (1)
stack b4 b19 (1)
pick-up b9 (1)
stack b9 b4 (1)
unstack b20 b15 (1)
put-down b20 (1)
unstack b15 b24 (1)
put-down b15 (1)
unstack b24 b3 (1)
put-down b24 (1)
pick-up b15 (1)
stack b15 b24 (1)
pick-up b20 (1)
stack b20 b15 (1)
unstack b3 b25 (1)
put-down b3 (1)
unstack b25 b22 (1)
put-down b25 (1)
pick-up b22 (1)
stack b22 b5 (1)
pick-up b25 (1)
stack b25 b22 (1)
pick-up b3 (1)
stack b3 b25 (1)
unstack b20 b15 (1)
put-down b20 (1)
unstack b15 b24 (1)
put-down b15 (1)
pick-up b20 (1)
stack b20 b15 (1)
pick-up b24 (1)
stack b24 b3 (1)
unstack b20 b15 (1)
put-down b20 (1)
pick-up b15 (1)
stack b15 b24 (1)
pick-up b20 (1)
stack b20 b15 (1)
unstack b1 b2 (1)
put-down b1 (1)
unstack b2 b10 (1)
put-down b2 (1)
pick-up b1 (1)
stack b1 b2 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b7 b14 (1)
put-down b7 (1)
pick-up b10 (1)
stack b10 b7 (1)
unstack b1 b2 (1)
put-down b1 (1)
pick-up b2 (1)
stack b2 b10 (1)
pick-up b1 (1)
stack b1 b2 (1)
unstack b14 b13 (1)
put-down b14 (1)
unstack b13 b12 (1)
put-down b13 (1)
pick-up b14 (1)
stack b14 b13 (1)
unstack b12 b17 (1)
put-down b12 (1)
pick-up b17 (1)
stack b17 b23 (1)
pick-up b12 (1)
stack b12 b17 (1)
unstack b14 b13 (1)
put-down b14 (1)
pick-up b13 (1)
stack b13 b12 (1)
pick-up b14 (1)
stack b14 b13 (1)
unstack b1 b2 (1)
put-down b1 (1)
unstack b2 b10 (1)
put-down b2 (1)
pick-up b1 (1)
stack b1 b2 (1)
unstack b10 b7 (1)
put-down b10 (1)
pick-up b7 (1)
stack b7 b14 (1)
pick-up b10 (1)
stack b10 b7 (1)
unstack b1 b2 (1)
put-down b1 (1)
pick-up b2 (1)
stack b2 b10 (1)
pick-up b1 (1)
stack b1 b2 (1)
[t=0.104703s, 27324 KB] Plan length: 196 step(s).
[t=0.104703s, 27324 KB] Plan cost: 196
[t=0.104703s, 27324 KB] Expanded 2458 state(s).
[t=0.104703s, 27324 KB] Reopened 0 state(s).
[t=0.104703s, 27324 KB] Evaluated 2459 state(s).
[t=0.104703s, 27324 KB] Evaluations: 4918
[t=0.104703s, 27324 KB] Generated 28483 state(s).
[t=0.104703s, 27324 KB] Dead ends: 0 state(s).
[t=0.104703s, 27324 KB] Number of registered states: 2459
[t=0.104703s, 27324 KB] Int hash set load factor: 2459/4096 = 0.600342
[t=0.104703s, 27324 KB] Int hash set resizes: 12
[t=0.104703s, 27324 KB] Search time: 0.0758332s
[t=0.104703s, 27324 KB] Total time: 0.104703s
Solution found.
Peak memory: 27324 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.27s
