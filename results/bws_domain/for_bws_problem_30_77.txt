INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_30/bws_problem_30_77.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.019s wall-clock]
2912 relevant atoms
1950 auxiliary atoms
4862 final queue length
8525 total queue pushes
Completing instantiation... [0.030s CPU, 0.030s wall-clock]
Instantiating: [0.050s CPU, 0.050s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.001s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
31 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.049s wall-clock]
2670 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
60 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.023s wall-clock]
Reordering and filtering variables...
61 of 61 variables necessary.
31 of 61 mutex groups necessary.
1800 of 1800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.012s wall-clock]
Translator variables: 61
Translator derived variables: 0
Translator facts: 992
Translator goal facts: 28
Translator mutex groups: 31
Translator total mutex groups size: 961
Translator operators: 1800
Translator axioms: 0
Translator task size: 15452
Translator peak memory: 41336 KB
Writing output... [0.000s CPU, 0.009s wall-clock]
Done! [0.150s CPU, 0.159s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9048e-05s, 24488 KB] reading input...
[t=0.00526094s, 26364 KB] done reading input!
[t=0.00620971s, 26760 KB] Initializing landmark count heuristic...
[t=0.0062481s, 26760 KB] Generating landmark graph...
[t=0.00634494s, 26892 KB] Building a landmark graph with reasonable orders.
[t=0.00643516s, 27024 KB] Initializing Exploration...
[t=0.00696503s, 27316 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0335214s, 28508 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0336483s, 28508 KB] Landmarks generation time: 0.0273114s
[t=0.0336731s, 28508 KB] Discovered 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0336968s, 28508 KB] 924 edges
[t=0.0337076s, 28508 KB] approx. reasonable orders
[t=0.0355271s, 28508 KB] approx. obedient reasonable orders
[t=0.0355941s, 28508 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0356038s, 28508 KB] Landmarks generation time: 0.0293532s
[t=0.0356137s, 28508 KB] Discovered 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0356225s, 28508 KB] 946 edges
[t=0.0356318s, 28508 KB] Landmark graph generation time: 0.0293906s
[t=0.0356405s, 28508 KB] Landmark graph contains 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0356485s, 28508 KB] Landmark graph contains 946 orderings.
[t=0.0363256s, 28536 KB] Simplifying 7140 unary operators... done! [5400 unary operators]
[t=0.0382788s, 28536 KB] time to simplify: 0.00197629s
[t=0.038407s, 28536 KB] Initializing additive heuristic...
[t=0.0384283s, 28536 KB] Initializing FF heuristic...
[t=0.0385008s, 28536 KB] Building successor generator...done!
[t=0.0388361s, 28536 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0388453s, 28536 KB] time for successor generation creation: 0.000294712s
[t=0.0388611s, 28536 KB] Variables: 61
[t=0.0388696s, 28536 KB] FactPairs: 992
[t=0.0388777s, 28536 KB] Bytes per state: 24
[t=0.0389809s, 28536 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0390161s, 28536 KB] 58 initial landmarks, 28 goal landmarks
[t=0.0390985s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 75
[t=0.0391083s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.039117s, 28536 KB] g=0, 1 evaluated, 0 expanded
[t=0.0391309s, 28536 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 75
[t=0.03914s, 28536 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0393945s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.039407s, 28536 KB] g=2, 6 evaluated, 5 expanded
[t=0.0395439s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0395542s, 28536 KB] g=2, 9 evaluated, 8 expanded
[t=0.0397684s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0397778s, 28536 KB] g=4, 14 evaluated, 13 expanded
[t=0.0398708s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0398797s, 28536 KB] g=6, 16 evaluated, 15 expanded
[t=0.0400556s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0400648s, 28536 KB] g=8, 20 evaluated, 19 expanded
[t=0.0401159s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0401249s, 28536 KB] g=8, 21 evaluated, 20 expanded
[t=0.0404199s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0404292s, 28536 KB] g=10, 28 evaluated, 27 expanded
[t=0.0406902s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0406997s, 28536 KB] g=12, 34 evaluated, 33 expanded
[t=0.0412081s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0412193s, 28536 KB] g=14, 46 evaluated, 45 expanded
[t=0.0416477s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0416575s, 28536 KB] g=16, 56 evaluated, 55 expanded
[t=0.0419228s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.041949s, 28536 KB] g=16, 62 evaluated, 61 expanded
[t=0.0422134s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0422233s, 28536 KB] g=18, 68 evaluated, 67 expanded
[t=0.0430663s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0430786s, 28536 KB] g=20, 88 evaluated, 87 expanded
[t=0.0441819s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0441949s, 28536 KB] g=21, 113 evaluated, 112 expanded
[t=0.0448596s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0448693s, 28536 KB] g=24, 129 evaluated, 128 expanded
[t=0.0456954s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0457098s, 28536 KB] g=26, 148 evaluated, 147 expanded
[t=0.0463051s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0463147s, 28536 KB] g=27, 162 evaluated, 161 expanded
[t=0.0464134s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0464223s, 28536 KB] g=28, 164 evaluated, 163 expanded
[t=0.0474265s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0474379s, 28536 KB] g=30, 187 evaluated, 186 expanded
[t=0.0488767s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0488867s, 28536 KB] g=32, 221 evaluated, 220 expanded
[t=0.0498935s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0499028s, 28536 KB] g=34, 246 evaluated, 245 expanded
[t=0.0507389s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0507523s, 28536 KB] g=36, 266 evaluated, 265 expanded
[t=0.0513694s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0513801s, 28536 KB] g=38, 280 evaluated, 279 expanded
[t=0.0521211s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0521312s, 28536 KB] g=36, 297 evaluated, 296 expanded
[t=0.0552885s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0553192s, 28536 KB] g=38, 372 evaluated, 371 expanded
[t=0.0583134s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0583342s, 28536 KB] g=44, 443 evaluated, 442 expanded
[t=0.0598801s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0598947s, 28536 KB] g=48, 479 evaluated, 478 expanded
[t=0.0611885s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0612098s, 28536 KB] g=48, 509 evaluated, 508 expanded
[t=0.0616332s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0616454s, 28536 KB] g=50, 518 evaluated, 517 expanded
[t=0.0617585s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0617802s, 28536 KB] g=50, 520 evaluated, 519 expanded
[t=0.0625325s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0625455s, 28536 KB] g=52, 536 evaluated, 535 expanded
[t=0.0629013s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0629269s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0629365s, 28536 KB] g=54, 544 evaluated, 543 expanded
[t=0.0633389s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0633489s, 28536 KB] g=56, 553 evaluated, 552 expanded
[t=0.0634065s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0634153s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0634231s, 28536 KB] g=56, 554 evaluated, 553 expanded
[t=0.0638116s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0638223s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0638308s, 28536 KB] g=58, 563 evaluated, 562 expanded
[t=0.0642027s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0642119s, 28536 KB] g=60, 571 evaluated, 570 expanded
[t=0.0652547s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0652646s, 28536 KB] g=62, 596 evaluated, 595 expanded
[t=0.0656032s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.065613s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0656208s, 28536 KB] g=64, 604 evaluated, 603 expanded
[t=0.066093s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0661022s, 28536 KB] g=67, 615 evaluated, 614 expanded
[t=0.0667037s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0667136s, 28536 KB] g=70, 629 evaluated, 628 expanded
[t=0.0671185s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0671348s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0671435s, 28536 KB] g=72, 638 evaluated, 637 expanded
[t=0.0675573s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0675685s, 28536 KB] g=74, 647 evaluated, 646 expanded
[t=0.0676208s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0676301s, 28536 KB] g=74, 648 evaluated, 647 expanded
[t=0.0682766s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0682859s, 28536 KB] g=76, 664 evaluated, 663 expanded
[t=0.0686504s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0686599s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0686678s, 28536 KB] g=78, 673 evaluated, 672 expanded
[t=0.0690841s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0690931s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0691011s, 28536 KB] g=80, 683 evaluated, 682 expanded
[t=0.0694887s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0694979s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0695061s, 28536 KB] g=82, 692 evaluated, 691 expanded
[t=0.0698599s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0698728s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0698819s, 28536 KB] g=84, 700 evaluated, 699 expanded
[t=0.0706301s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0706465s, 28536 KB] g=88, 717 evaluated, 716 expanded
[t=0.0709658s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0709763s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.070985s, 28536 KB] g=90, 724 evaluated, 723 expanded
[t=0.0721843s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0721959s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0722051s, 28536 KB] g=94, 752 evaluated, 751 expanded
[t=0.0725057s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0725192s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0725273s, 28536 KB] g=96, 759 evaluated, 758 expanded
[t=0.0778826s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0779803s, 28536 KB] g=104, 886 evaluated, 885 expanded
[t=0.0782085s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0782188s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0782267s, 28536 KB] g=106, 891 evaluated, 890 expanded
[t=0.0837122s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0837781s, 28536 KB] g=118, 1022 evaluated, 1021 expanded
[t=0.0848326s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0848633s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0848717s, 28536 KB] g=124, 1045 evaluated, 1044 expanded
[t=0.104347s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.10446s, 28536 KB] g=143, 1509 evaluated, 1508 expanded
[t=0.104523s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.104533s, 28536 KB] g=144, 1510 evaluated, 1509 expanded
[t=0.104755s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.104764s, 28536 KB] g=146, 1515 evaluated, 1514 expanded
[t=0.104945s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.104954s, 28536 KB] g=148, 1519 evaluated, 1518 expanded
[t=0.107786s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.107801s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.107809s, 28536 KB] g=162, 1588 evaluated, 1587 expanded
[t=0.117759s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.117791s, 28536 KB] g=184, 1834 evaluated, 1833 expanded
[t=0.11841s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.11842s, 28536 KB] g=188, 1850 evaluated, 1849 expanded
[t=0.118584s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.118593s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.118608s, 28536 KB] g=190, 1854 evaluated, 1853 expanded
[t=0.119678s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.119688s, 28536 KB] g=198, 1881 evaluated, 1880 expanded
[t=0.120048s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.120059s, 28536 KB] g=202, 1890 evaluated, 1889 expanded
[t=0.120188s, 28536 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.120198s, 28536 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.120206s, 28536 KB] g=204, 1893 evaluated, 1892 expanded
[t=0.382452s, 29708 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.382527s, 29708 KB] g=296, 8632 evaluated, 8631 expanded
[t=0.383125s, 29708 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.383143s, 29708 KB] g=300, 8648 evaluated, 8647 expanded
[t=0.383291s, 29708 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.383301s, 29708 KB] g=302, 8652 evaluated, 8651 expanded
[t=0.38503s, 29708 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.385043s, 29708 KB] g=314, 8706 evaluated, 8705 expanded
[t=0.38532s, 29708 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.38533s, 29708 KB] g=318, 8715 evaluated, 8714 expanded
[t=0.385424s, 29708 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.385434s, 29708 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.385443s, 29708 KB] g=320, 8718 evaluated, 8717 expanded
[t=0.391738s, 29840 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.39177s, 29840 KB] g=354, 8965 evaluated, 8964 expanded
[t=0.391987s, 29840 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.391998s, 29840 KB] g=358, 8974 evaluated, 8973 expanded
[t=0.392072s, 29840 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.392082s, 29840 KB] g=360, 8977 evaluated, 8976 expanded
[t=0.392843s, 29840 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.392855s, 29840 KB] g=376, 9014 evaluated, 9013 expanded
[t=0.393044s, 29840 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.393055s, 29840 KB] g=384, 9024 evaluated, 9023 expanded
[t=0.393132s, 29840 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.393143s, 29840 KB] g=388, 9028 evaluated, 9027 expanded
[t=0.393179s, 29840 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.393189s, 29840 KB] g=389, 9029 evaluated, 9028 expanded
[t=0.393206s, 29840 KB] Solution found!
[t=0.393234s, 29840 KB] Actual search time: 0.354216s
pick-up b5 (1)
stack b5 b21 (1)
unstack b13 b25 (1)
put-down b13 (1)
unstack b25 b28 (1)
put-down b25 (1)
unstack b28 b12 (1)
put-down b28 (1)
unstack b12 b2 (1)
put-down b12 (1)
unstack b2 b20 (1)
put-down b2 (1)
unstack b20 b19 (1)
stack b20 b25 (1)
unstack b19 b11 (1)
put-down b19 (1)
unstack b11 b4 (1)
put-down b11 (1)
unstack b4 b1 (1)
put-down b4 (1)
unstack b1 b7 (1)
put-down b1 (1)
unstack b7 b26 (1)
put-down b7 (1)
unstack b26 b24 (1)
put-down b26 (1)
unstack b24 b8 (1)
stack b24 b7 (1)
unstack b8 b15 (1)
stack b8 b20 (1)
pick-up b2 (1)
stack b2 b26 (1)
pick-up b12 (1)
stack b12 b11 (1)
pick-up b13 (1)
stack b13 b28 (1)
pick-up b4 (1)
stack b4 b1 (1)
unstack b15 b22 (1)
put-down b15 (1)
unstack b22 b27 (1)
stack b22 b19 (1)
pick-up b15 (1)
stack b15 b22 (1)
unstack b5 b21 (1)
put-down b5 (1)
unstack b21 b18 (1)
stack b21 b12 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b18 b9 (1)
put-down b18 (1)
unstack b9 b23 (1)
stack b9 b2 (1)
unstack b23 b30 (1)
stack b23 b15 (1)
pick-up b18 (1)
stack b18 b30 (1)
unstack b13 b28 (1)
put-down b13 (1)
pick-up b28 (1)
stack b28 b23 (1)
pick-up b13 (1)
stack b13 b28 (1)
unstack b18 b30 (1)
put-down b18 (1)
unstack b30 b10 (1)
put-down b30 (1)
unstack b10 b14 (1)
stack b10 b9 (1)
unstack b14 b3 (1)
stack b14 b13 (1)
pick-up b18 (1)
stack b18 b30 (1)
unstack b3 b17 (1)
put-down b3 (1)
unstack b17 b29 (1)
put-down b17 (1)
unstack b29 b6 (1)
stack b29 b4 (1)
pick-up b3 (1)
stack b3 b29 (1)
pick-up b6 (1)
stack b6 b5 (1)
unstack b24 b7 (1)
put-down b24 (1)
pick-up b7 (1)
stack b7 b6 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b18 b30 (1)
put-down b18 (1)
pick-up b30 (1)
stack b30 b17 (1)
pick-up b18 (1)
stack b18 b30 (1)
unstack b8 b20 (1)
put-down b8 (1)
unstack b20 b25 (1)
put-down b20 (1)
pick-up b25 (1)
stack b25 b3 (1)
pick-up b20 (1)
stack b20 b25 (1)
pick-up b8 (1)
stack b8 b20 (1)
unstack b10 b9 (1)
put-down b10 (1)
unstack b9 b2 (1)
put-down b9 (1)
pick-up b10 (1)
stack b10 b9 (1)
unstack b2 b26 (1)
put-down b2 (1)
pick-up b26 (1)
stack b26 b8 (1)
pick-up b2 (1)
stack b2 b26 (1)
unstack b10 b9 (1)
put-down b10 (1)
pick-up b9 (1)
stack b9 b2 (1)
pick-up b10 (1)
stack b10 b9 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b6 (1)
put-down b7 (1)
unstack b6 b5 (1)
put-down b6 (1)
pick-up b7 (1)
stack b7 b6 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b5 b21 (1)
put-down b5 (1)
unstack b21 b12 (1)
put-down b21 (1)
unstack b12 b11 (1)
put-down b12 (1)
pick-up b11 (1)
stack b11 b10 (1)
pick-up b12 (1)
stack b12 b11 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b6 (1)
put-down b7 (1)
pick-up b24 (1)
stack b24 b7 (1)
pick-up b6 (1)
stack b6 b5 (1)
unstack b24 b7 (1)
put-down b24 (1)
pick-up b7 (1)
stack b7 b6 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b14 b13 (1)
put-down b14 (1)
unstack b13 b28 (1)
put-down b13 (1)
unstack b28 b23 (1)
put-down b28 (1)
pick-up b13 (1)
stack b13 b28 (1)
pick-up b14 (1)
stack b14 b13 (1)
unstack b23 b15 (1)
put-down b23 (1)
unstack b15 b22 (1)
put-down b15 (1)
pick-up b23 (1)
stack b23 b15 (1)
unstack b22 b19 (1)
put-down b22 (1)
pick-up b19 (1)
stack b19 b18 (1)
pick-up b22 (1)
stack b22 b19 (1)
unstack b23 b15 (1)
put-down b23 (1)
pick-up b15 (1)
stack b15 b22 (1)
pick-up b23 (1)
stack b23 b15 (1)
unstack b14 b13 (1)
put-down b14 (1)
unstack b13 b28 (1)
put-down b13 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b28 (1)
stack b28 b23 (1)
unstack b14 b13 (1)
put-down b14 (1)
pick-up b13 (1)
stack b13 b28 (1)
pick-up b14 (1)
stack b14 b13 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b6 (1)
put-down b7 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b6 b5 (1)
put-down b6 (1)
unstack b5 b21 (1)
put-down b5 (1)
pick-up b6 (1)
stack b6 b5 (1)
unstack b24 b7 (1)
put-down b24 (1)
pick-up b7 (1)
stack b7 b6 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b21 b12 (1)
put-down b21 (1)
unstack b12 b11 (1)
put-down b12 (1)
pick-up b21 (1)
stack b21 b12 (1)
unstack b11 b10 (1)
put-down b11 (1)
unstack b10 b9 (1)
put-down b10 (1)
unstack b9 b2 (1)
put-down b9 (1)
pick-up b10 (1)
stack b10 b9 (1)
pick-up b11 (1)
stack b11 b10 (1)
unstack b21 b12 (1)
put-down b21 (1)
pick-up b12 (1)
stack b12 b11 (1)
pick-up b21 (1)
stack b21 b12 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b6 (1)
put-down b7 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b6 b5 (1)
put-down b6 (1)
pick-up b5 (1)
stack b5 b21 (1)
pick-up b6 (1)
stack b6 b5 (1)
unstack b24 b7 (1)
put-down b24 (1)
pick-up b7 (1)
stack b7 b6 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b2 b26 (1)
put-down b2 (1)
unstack b26 b8 (1)
put-down b26 (1)
pick-up b2 (1)
stack b2 b26 (1)
unstack b8 b20 (1)
put-down b8 (1)
unstack b20 b25 (1)
put-down b20 (1)
pick-up b8 (1)
stack b8 b20 (1)
unstack b2 b26 (1)
put-down b2 (1)
pick-up b26 (1)
stack b26 b8 (1)
pick-up b2 (1)
stack b2 b26 (1)
unstack b25 b3 (1)
put-down b25 (1)
unstack b3 b29 (1)
put-down b3 (1)
pick-up b25 (1)
stack b25 b3 (1)
unstack b29 b4 (1)
put-down b29 (1)
unstack b4 b1 (1)
put-down b4 (1)
pick-up b1 (1)
stack b1 b14 (1)
pick-up b4 (1)
stack b4 b1 (1)
pick-up b29 (1)
stack b29 b4 (1)
unstack b25 b3 (1)
put-down b25 (1)
pick-up b3 (1)
stack b3 b29 (1)
pick-up b25 (1)
stack b25 b3 (1)
unstack b2 b26 (1)
put-down b2 (1)
unstack b26 b8 (1)
put-down b26 (1)
pick-up b2 (1)
stack b2 b26 (1)
unstack b8 b20 (1)
put-down b8 (1)
pick-up b20 (1)
stack b20 b25 (1)
pick-up b8 (1)
stack b8 b20 (1)
unstack b2 b26 (1)
put-down b2 (1)
pick-up b26 (1)
stack b26 b8 (1)
pick-up b2 (1)
stack b2 b26 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b6 (1)
put-down b7 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b6 b5 (1)
put-down b6 (1)
unstack b5 b21 (1)
put-down b5 (1)
unstack b21 b12 (1)
put-down b21 (1)
pick-up b5 (1)
stack b5 b21 (1)
pick-up b6 (1)
stack b6 b5 (1)
unstack b24 b7 (1)
put-down b24 (1)
pick-up b7 (1)
stack b7 b6 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b12 b11 (1)
put-down b12 (1)
unstack b11 b10 (1)
put-down b11 (1)
pick-up b12 (1)
stack b12 b11 (1)
unstack b10 b9 (1)
put-down b10 (1)
pick-up b9 (1)
stack b9 b2 (1)
pick-up b10 (1)
stack b10 b9 (1)
unstack b12 b11 (1)
put-down b12 (1)
pick-up b11 (1)
stack b11 b10 (1)
pick-up b12 (1)
stack b12 b11 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b6 (1)
put-down b7 (1)
unstack b6 b5 (1)
put-down b6 (1)
pick-up b7 (1)
stack b7 b6 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b5 b21 (1)
put-down b5 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b6 (1)
put-down b7 (1)
pick-up b24 (1)
stack b24 b7 (1)
pick-up b6 (1)
stack b6 b5 (1)
unstack b24 b7 (1)
put-down b24 (1)
pick-up b7 (1)
stack b7 b6 (1)
pick-up b24 (1)
stack b24 b7 (1)
[t=0.393246s, 29840 KB] Plan length: 390 step(s).
[t=0.393246s, 29840 KB] Plan cost: 390
[t=0.393246s, 29840 KB] Expanded 9029 state(s).
[t=0.393246s, 29840 KB] Reopened 0 state(s).
[t=0.393246s, 29840 KB] Evaluated 9030 state(s).
[t=0.393246s, 29840 KB] Evaluations: 18060
[t=0.393246s, 29840 KB] Generated 71529 state(s).
[t=0.393246s, 29840 KB] Dead ends: 0 state(s).
[t=0.393246s, 29840 KB] Number of registered states: 9030
[t=0.393246s, 29840 KB] Int hash set load factor: 9030/16384 = 0.551147
[t=0.393246s, 29840 KB] Int hash set resizes: 14
[t=0.393246s, 29840 KB] Search time: 0.354265s
[t=0.393246s, 29840 KB] Total time: 0.393246s
Solution found.
Peak memory: 29840 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.60s
