INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_27/bws_problem_27_33.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.014s wall-clock]
2378 relevant atoms
1593 auxiliary atoms
3971 final queue length
6945 total queue pushes
Completing instantiation... [0.020s CPU, 0.025s wall-clock]
Instantiating: [0.040s CPU, 0.041s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
28 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.001s wall-clock]
Translating task: [0.050s CPU, 0.041s wall-clock]
2160 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
54 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.019s wall-clock]
Reordering and filtering variables...
55 of 55 variables necessary.
28 of 55 mutex groups necessary.
1458 of 1458 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.009s wall-clock]
Translator variables: 55
Translator derived variables: 0
Translator facts: 812
Translator goal facts: 22
Translator mutex groups: 28
Translator total mutex groups size: 784
Translator operators: 1458
Translator axioms: 0
Translator task size: 12527
Translator peak memory: 39412 KB
Writing output... [0.000s CPU, 0.008s wall-clock]
Done! [0.130s CPU, 0.132s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.2288e-05s, 24488 KB] reading input...
[t=0.00451572s, 25936 KB] done reading input!
[t=0.00576146s, 26332 KB] Initializing landmark count heuristic...
[t=0.00581057s, 26332 KB] Generating landmark graph...
[t=0.00590515s, 26332 KB] Building a landmark graph with reasonable orders.
[t=0.00599969s, 26464 KB] Initializing Exploration...
[t=0.00645177s, 26732 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0260688s, 27524 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0261661s, 27524 KB] Landmarks generation time: 0.0202636s
[t=0.0261879s, 27524 KB] Discovered 122 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0262054s, 27524 KB] 603 edges
[t=0.0262151s, 27524 KB] approx. reasonable orders
[t=0.0318084s, 27524 KB] approx. obedient reasonable orders
[t=0.0323855s, 27524 KB] Removed 8 reasonable or obedient reasonable orders
[t=0.0324012s, 27524 KB] Landmarks generation time: 0.0265899s
[t=0.0324124s, 27524 KB] Discovered 122 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0324205s, 27524 KB] 722 edges
[t=0.0324287s, 27524 KB] Landmark graph generation time: 0.0266255s
[t=0.0324375s, 27524 KB] Landmark graph contains 122 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0324455s, 27524 KB] Landmark graph contains 722 orderings.
[t=0.0329941s, 27548 KB] Simplifying 5778 unary operators... done! [4374 unary operators]
[t=0.034402s, 27548 KB] time to simplify: 0.00149683s
[t=0.0345765s, 27548 KB] Initializing additive heuristic...
[t=0.0345938s, 27548 KB] Initializing FF heuristic...
[t=0.0346526s, 27548 KB] Building successor generator...done!
[t=0.0349208s, 27548 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0349292s, 27548 KB] time for successor generation creation: 0.000233402s
[t=0.0349436s, 27548 KB] Variables: 55
[t=0.0349524s, 27548 KB] FactPairs: 812
[t=0.0349602s, 27548 KB] Bytes per state: 24
[t=0.0350742s, 27548 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.03511s, 27548 KB] 55 initial landmarks, 22 goal landmarks
[t=0.0351819s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0351921s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0352003s, 27548 KB] g=0, 1 evaluated, 0 expanded
[t=0.0352143s, 27548 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0352227s, 27548 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0353799s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0353933s, 27548 KB] g=1, 5 evaluated, 4 expanded
[t=0.0354745s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0354857s, 27548 KB] g=2, 7 evaluated, 6 expanded
[t=0.0357655s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0357772s, 27548 KB] g=3, 15 evaluated, 14 expanded
[t=0.0358562s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0358655s, 27548 KB] g=4, 17 evaluated, 16 expanded
[t=0.0361626s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0361774s, 27548 KB] g=5, 25 evaluated, 24 expanded
[t=0.0365988s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0366149s, 27548 KB] g=7, 37 evaluated, 36 expanded
[t=0.0369279s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0369423s, 27548 KB] g=10, 45 evaluated, 44 expanded
[t=0.0374349s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.037464s, 27548 KB] g=12, 59 evaluated, 58 expanded
[t=0.0379597s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0379735s, 27548 KB] g=14, 72 evaluated, 71 expanded
[t=0.038454s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.038467s, 27548 KB] g=16, 85 evaluated, 84 expanded
[t=0.0387853s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0388043s, 27548 KB] g=12, 94 evaluated, 93 expanded
[t=0.0390579s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0390689s, 27548 KB] g=18, 101 evaluated, 100 expanded
[t=0.0393185s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0393294s, 27548 KB] g=14, 108 evaluated, 107 expanded
[t=0.0398579s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0398767s, 27548 KB] g=20, 123 evaluated, 122 expanded
[t=0.0406495s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0406617s, 27548 KB] g=22, 145 evaluated, 144 expanded
[t=0.0416215s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0416382s, 27548 KB] g=24, 171 evaluated, 170 expanded
[t=0.0433116s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0433281s, 27548 KB] g=26, 216 evaluated, 215 expanded
[t=0.0438906s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0439318s, 27548 KB] g=27, 231 evaluated, 230 expanded
[t=0.0448962s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0449237s, 27548 KB] g=20, 253 evaluated, 252 expanded
[t=0.045404s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0454147s, 27548 KB] g=30, 266 evaluated, 265 expanded
[t=0.0473328s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0473493s, 27548 KB] g=32, 319 evaluated, 318 expanded
[t=0.0483232s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.048338s, 27548 KB] g=26, 346 evaluated, 345 expanded
[t=0.0484648s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0484748s, 27548 KB] g=34, 349 evaluated, 348 expanded
[t=0.0493442s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0493596s, 27548 KB] g=36, 372 evaluated, 371 expanded
[t=0.0495584s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0495708s, 27548 KB] g=36, 377 evaluated, 376 expanded
[t=0.050441s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0504594s, 27548 KB] g=38, 400 evaluated, 399 expanded
[t=0.0514982s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0515173s, 27548 KB] g=40, 428 evaluated, 427 expanded
[t=0.0525336s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0525494s, 27548 KB] g=42, 456 evaluated, 455 expanded
[t=0.0532959s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0533134s, 27548 KB] g=44, 477 evaluated, 476 expanded
[t=0.0535035s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0535155s, 27548 KB] g=44, 482 evaluated, 481 expanded
[t=0.0544631s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0544828s, 27548 KB] g=46, 508 evaluated, 507 expanded
[t=0.0553906s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.055402s, 27548 KB] g=48, 533 evaluated, 532 expanded
[t=0.0557247s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0557465s, 27548 KB] g=46, 542 evaluated, 541 expanded
[t=0.0563139s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0563268s, 27548 KB] g=50, 557 evaluated, 556 expanded
[t=0.057085s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0570977s, 27548 KB] g=52, 578 evaluated, 577 expanded
[t=0.0571432s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0571528s, 27548 KB] g=48, 579 evaluated, 578 expanded
[t=0.0578831s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0578955s, 27548 KB] g=54, 599 evaluated, 598 expanded
[t=0.0583808s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0583928s, 27548 KB] g=50, 612 evaluated, 611 expanded
[t=0.0585748s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.058584s, 27548 KB] g=56, 617 evaluated, 616 expanded
[t=0.0592226s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0592328s, 27548 KB] g=58, 636 evaluated, 635 expanded
[t=0.059657s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0596676s, 27548 KB] g=52, 648 evaluated, 647 expanded
[t=0.0612307s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0612446s, 27548 KB] g=54, 693 evaluated, 692 expanded
[t=0.0623805s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.062396s, 27548 KB] g=56, 725 evaluated, 724 expanded
[t=0.0631542s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0631647s, 27548 KB] g=64, 747 evaluated, 746 expanded
[t=0.0641388s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0641496s, 27548 KB] g=58, 775 evaluated, 774 expanded
[t=0.0654459s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0654567s, 27548 KB] g=68, 813 evaluated, 812 expanded
[t=0.065819s, 27548 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0658295s, 27548 KB] g=60, 823 evaluated, 822 expanded
[t=0.0658768s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.065886s, 27548 KB] g=70, 824 evaluated, 823 expanded
[t=0.0686819s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0687484s, 27548 KB] g=76, 894 evaluated, 893 expanded
[t=0.0810326s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0810854s, 27548 KB] g=90, 1252 evaluated, 1251 expanded
[t=0.0813967s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0814068s, 27548 KB] g=92, 1261 evaluated, 1260 expanded
[t=0.0817858s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0817968s, 27548 KB] g=94, 1272 evaluated, 1271 expanded
[t=0.0837859s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0837993s, 27548 KB] g=100, 1333 evaluated, 1332 expanded
[t=0.0866593s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0866921s, 27548 KB] g=110, 1415 evaluated, 1414 expanded
[t=0.0922277s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0922706s, 27548 KB] g=112, 1569 evaluated, 1568 expanded
[t=0.0933861s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0933987s, 27548 KB] g=116, 1605 evaluated, 1604 expanded
[t=0.0936582s, 27548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0936865s, 27548 KB] g=118, 1613 evaluated, 1612 expanded
[t=0.0954709s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0954895s, 27680 KB] g=126, 1669 evaluated, 1668 expanded
[t=0.0956856s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.095698s, 27680 KB] g=128, 1675 evaluated, 1674 expanded
[t=0.102167s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.102201s, 27680 KB] g=158, 1886 evaluated, 1885 expanded
[t=0.10245s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.102468s, 27680 KB] g=162, 1895 evaluated, 1894 expanded
[t=0.10259s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.1026s, 27680 KB] g=164, 1899 evaluated, 1898 expanded
[t=0.10329s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.1033s, 27680 KB] g=176, 1925 evaluated, 1924 expanded
[t=0.103479s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.103489s, 27680 KB] g=180, 1932 evaluated, 1931 expanded
[t=0.103509s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.103518s, 27680 KB] g=181, 1933 evaluated, 1932 expanded
[t=0.103535s, 27680 KB] Solution found!
[t=0.103548s, 27680 KB] Actual search time: 0.0684356s
unstack b24 b5 (1)
put-down b24 (1)
unstack b5 b11 (1)
put-down b5 (1)
unstack b11 b21 (1)
put-down b11 (1)
unstack b26 b17 (1)
put-down b26 (1)
unstack b17 b7 (1)
put-down b17 (1)
unstack b2 b1 (1)
put-down b2 (1)
unstack b21 b9 (1)
put-down b21 (1)
unstack b25 b19 (1)
put-down b25 (1)
unstack b9 b4 (1)
put-down b9 (1)
unstack b4 b14 (1)
put-down b4 (1)
unstack b14 b18 (1)
put-down b14 (1)
unstack b18 b27 (1)
put-down b18 (1)
unstack b27 b20 (1)
put-down b27 (1)
unstack b20 b3 (1)
put-down b20 (1)
unstack b3 b13 (1)
put-down b3 (1)
unstack b7 b12 (1)
put-down b7 (1)
unstack b12 b23 (1)
stack b12 b7 (1)
pick-up b20 (1)
stack b20 b2 (1)
unstack b1 b16 (1)
stack b1 b3 (1)
pick-up b11 (1)
stack b11 b12 (1)
pick-up b13 (1)
stack b13 b14 (1)
unstack b16 b10 (1)
stack b16 b19 (1)
unstack b10 b22 (1)
stack b10 b11 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b18 (1)
stack b18 b17 (1)
pick-up b21 (1)
stack b21 b23 (1)
pick-up b22 (1)
stack b22 b25 (1)
pick-up b26 (1)
stack b26 b10 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b1 b3 (1)
put-down b1 (1)
pick-up b3 (1)
stack b3 b21 (1)
pick-up b1 (1)
stack b1 b3 (1)
unstack b20 b2 (1)
put-down b20 (1)
pick-up b2 (1)
stack b2 b27 (1)
pick-up b20 (1)
stack b20 b2 (1)
unstack b22 b25 (1)
put-down b22 (1)
pick-up b25 (1)
stack b25 b4 (1)
pick-up b22 (1)
stack b22 b25 (1)
unstack b1 b3 (1)
put-down b1 (1)
unstack b3 b21 (1)
put-down b3 (1)
pick-up b1 (1)
stack b1 b3 (1)
unstack b21 b23 (1)
put-down b21 (1)
unstack b23 b6 (1)
stack b23 b18 (1)
unstack b6 b8 (1)
put-down b6 (1)
pick-up b21 (1)
stack b21 b23 (1)
unstack b8 b15 (1)
stack b8 b22 (1)
pick-up b15 (1)
stack b15 b5 (1)
unstack b1 b3 (1)
put-down b1 (1)
pick-up b3 (1)
stack b3 b21 (1)
pick-up b1 (1)
stack b1 b3 (1)
unstack b8 b22 (1)
put-down b8 (1)
unstack b22 b25 (1)
put-down b22 (1)
pick-up b8 (1)
stack b8 b22 (1)
unstack b25 b4 (1)
put-down b25 (1)
pick-up b4 (1)
stack b4 b6 (1)
pick-up b25 (1)
stack b25 b4 (1)
unstack b8 b22 (1)
put-down b8 (1)
pick-up b22 (1)
stack b22 b25 (1)
pick-up b8 (1)
stack b8 b22 (1)
unstack b9 b13 (1)
put-down b9 (1)
unstack b13 b14 (1)
put-down b13 (1)
pick-up b14 (1)
stack b14 b8 (1)
pick-up b13 (1)
stack b13 b14 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b1 b3 (1)
put-down b1 (1)
unstack b3 b21 (1)
put-down b3 (1)
pick-up b1 (1)
stack b1 b3 (1)
unstack b21 b23 (1)
put-down b21 (1)
unstack b23 b18 (1)
put-down b23 (1)
pick-up b21 (1)
stack b21 b23 (1)
unstack b1 b3 (1)
put-down b1 (1)
pick-up b3 (1)
stack b3 b21 (1)
pick-up b1 (1)
stack b1 b3 (1)
unstack b18 b17 (1)
put-down b18 (1)
unstack b17 b16 (1)
put-down b17 (1)
pick-up b18 (1)
stack b18 b17 (1)
unstack b16 b19 (1)
put-down b16 (1)
pick-up b19 (1)
stack b19 b9 (1)
pick-up b16 (1)
stack b16 b19 (1)
unstack b18 b17 (1)
put-down b18 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b18 (1)
stack b18 b17 (1)
unstack b1 b3 (1)
put-down b1 (1)
unstack b3 b21 (1)
put-down b3 (1)
pick-up b1 (1)
stack b1 b3 (1)
unstack b21 b23 (1)
put-down b21 (1)
pick-up b23 (1)
stack b23 b18 (1)
pick-up b21 (1)
stack b21 b23 (1)
unstack b1 b3 (1)
put-down b1 (1)
pick-up b3 (1)
stack b3 b21 (1)
pick-up b1 (1)
stack b1 b3 (1)
[t=0.103558s, 27680 KB] Plan length: 182 step(s).
[t=0.103558s, 27680 KB] Plan cost: 182
[t=0.103558s, 27680 KB] Expanded 1933 state(s).
[t=0.103558s, 27680 KB] Reopened 0 state(s).
[t=0.103558s, 27680 KB] Evaluated 1934 state(s).
[t=0.103558s, 27680 KB] Evaluations: 3868
[t=0.103558s, 27680 KB] Generated 28309 state(s).
[t=0.103558s, 27680 KB] Dead ends: 0 state(s).
[t=0.103558s, 27680 KB] Number of registered states: 1934
[t=0.103558s, 27680 KB] Int hash set load factor: 1934/2048 = 0.944336
[t=0.103558s, 27680 KB] Int hash set resizes: 11
[t=0.103558s, 27680 KB] Search time: 0.0684842s
[t=0.103558s, 27680 KB] Total time: 0.103558s
Solution found.
Peak memory: 27680 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.29s
