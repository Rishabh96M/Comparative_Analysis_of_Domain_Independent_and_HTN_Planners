INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_68.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4270 total queue pushes
Completing instantiation... [0.020s CPU, 0.017s wall-clock]
Instantiating: [0.030s CPU, 0.028s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.022s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.011s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.005s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 19
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7604
Translator peak memory: 36456 KB
Writing output... [0.000s CPU, 0.004s wall-clock]
Done! [0.080s CPU, 0.081s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=4.8111e-05s, 24488 KB] reading input...
[t=0.0030423s, 25268 KB] done reading input!
[t=0.00384459s, 25664 KB] Initializing landmark count heuristic...
[t=0.00387536s, 25664 KB] Generating landmark graph...
[t=0.00392831s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00398192s, 25664 KB] Initializing Exploration...
[t=0.00423125s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0139361s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0140197s, 26380 KB] Landmarks generation time: 0.0100922s
[t=0.0140338s, 26380 KB] Discovered 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0140662s, 26380 KB] 434 edges
[t=0.014077s, 26380 KB] approx. reasonable orders
[t=0.0171175s, 26380 KB] approx. obedient reasonable orders
[t=0.0174094s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0174239s, 26380 KB] Landmarks generation time: 0.0135467s
[t=0.0174337s, 26380 KB] Discovered 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0174416s, 26380 KB] 532 edges
[t=0.0174494s, 26380 KB] Landmark graph generation time: 0.0135806s
[t=0.0174572s, 26380 KB] Landmark graph contains 97 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0174649s, 26380 KB] Landmark graph contains 532 orderings.
[t=0.0177588s, 26380 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0185753s, 26380 KB] time to simplify: 0.000873155s
[t=0.0186861s, 26380 KB] Initializing additive heuristic...
[t=0.0186998s, 26380 KB] Initializing FF heuristic...
[t=0.0187503s, 26380 KB] Building successor generator...done!
[t=0.0189253s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0189335s, 26380 KB] time for successor generation creation: 0.000143457s
[t=0.0189449s, 26380 KB] Variables: 43
[t=0.018953s, 26380 KB] FactPairs: 506
[t=0.0189612s, 26380 KB] Bytes per state: 16
[t=0.0190422s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0190748s, 26380 KB] 43 initial landmarks, 19 goal landmarks
[t=0.0191227s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0191321s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.019141s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.0191551s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0191638s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0193249s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0193346s, 26380 KB] g=2, 7 evaluated, 6 expanded
[t=0.0196496s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0196601s, 26380 KB] g=4, 20 evaluated, 19 expanded
[t=0.0199267s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0199395s, 26380 KB] g=4, 31 evaluated, 30 expanded
[t=0.0202273s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0202385s, 26380 KB] g=6, 43 evaluated, 42 expanded
[t=0.0205338s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0205486s, 26380 KB] g=8, 55 evaluated, 54 expanded
[t=0.0206055s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.020615s, 26380 KB] g=8, 57 evaluated, 56 expanded
[t=0.0208336s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0208454s, 26380 KB] g=10, 66 evaluated, 65 expanded
[t=0.0210459s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0210608s, 26380 KB] g=10, 74 evaluated, 73 expanded
[t=0.0213514s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0213619s, 26380 KB] g=14, 86 evaluated, 85 expanded
[t=0.0215397s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0215492s, 26380 KB] g=12, 93 evaluated, 92 expanded
[t=0.0219872s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0219984s, 26380 KB] g=14, 111 evaluated, 110 expanded
[t=0.0221581s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0221748s, 26380 KB] g=18, 112 evaluated, 111 expanded
[t=0.0228593s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.022879s, 26380 KB] g=22, 142 evaluated, 141 expanded
[t=0.0272796s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0273254s, 26380 KB] g=18, 332 evaluated, 331 expanded
[t=0.0278718s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0278906s, 26380 KB] g=20, 354 evaluated, 353 expanded
[t=0.0283108s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.028326s, 26380 KB] g=30, 369 evaluated, 368 expanded
[t=0.0285538s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0285646s, 26380 KB] g=22, 378 evaluated, 377 expanded
[t=0.0287415s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0287521s, 26380 KB] g=32, 385 evaluated, 384 expanded
[t=0.0289284s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0289389s, 26380 KB] g=23, 392 evaluated, 391 expanded
[t=0.0291983s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0292089s, 26380 KB] g=34, 401 evaluated, 400 expanded
[t=0.0296027s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0296135s, 26380 KB] g=26, 417 evaluated, 416 expanded
[t=0.0299623s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0299723s, 26380 KB] g=36, 431 evaluated, 430 expanded
[t=0.0301419s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0301529s, 26380 KB] g=27, 437 evaluated, 436 expanded
[t=0.0307118s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.030721s, 26380 KB] g=40, 460 evaluated, 459 expanded
[t=0.0309158s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.030925s, 26380 KB] g=30, 468 evaluated, 467 expanded
[t=0.031107s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0311185s, 26380 KB] g=42, 475 evaluated, 474 expanded
[t=0.0314756s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0314851s, 26380 KB] g=44, 490 evaluated, 489 expanded
[t=0.0317991s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0318088s, 26380 KB] g=46, 503 evaluated, 502 expanded
[t=0.0318441s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0318531s, 26380 KB] g=32, 504 evaluated, 503 expanded
[t=0.0321741s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0321845s, 26380 KB] g=48, 516 evaluated, 515 expanded
[t=0.0324957s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0325058s, 26380 KB] g=50, 529 evaluated, 528 expanded
[t=0.0327518s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0327613s, 26380 KB] g=52, 539 evaluated, 538 expanded
[t=0.0334919s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0335019s, 26380 KB] g=34, 571 evaluated, 570 expanded
[t=0.034544s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0345597s, 26380 KB] g=36, 614 evaluated, 613 expanded
[t=0.035421s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0354324s, 26380 KB] g=38, 651 evaluated, 650 expanded
[t=0.036489s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0365002s, 26380 KB] g=40, 698 evaluated, 697 expanded
[t=0.0371381s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0371484s, 26380 KB] g=42, 726 evaluated, 725 expanded
[t=0.0379657s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.037976s, 26380 KB] g=66, 762 evaluated, 761 expanded
[t=0.0380132s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0380253s, 26380 KB] g=44, 763 evaluated, 762 expanded
[t=0.0386898s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0387031s, 26380 KB] g=46, 791 evaluated, 790 expanded
[t=0.0391091s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0391193s, 26380 KB] g=48, 808 evaluated, 807 expanded
[t=0.0394736s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.039486s, 26380 KB] g=50, 823 evaluated, 822 expanded
[t=0.0400106s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0400277s, 26380 KB] g=52, 845 evaluated, 844 expanded
[t=0.0404322s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0404508s, 26380 KB] g=54, 862 evaluated, 861 expanded
[t=0.0409282s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0409446s, 26380 KB] g=56, 881 evaluated, 880 expanded
[t=0.0412045s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0412141s, 26380 KB] g=58, 892 evaluated, 891 expanded
[t=0.0413095s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0413187s, 26380 KB] g=59, 896 evaluated, 895 expanded
[t=0.0414998s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0415097s, 26380 KB] g=60, 904 evaluated, 903 expanded
[t=0.0415486s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0415582s, 26380 KB] g=63, 905 evaluated, 904 expanded
[t=0.0416123s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0416218s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0416303s, 26380 KB] g=62, 907 evaluated, 906 expanded
[t=0.041661s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0416701s, 26380 KB] g=63, 908 evaluated, 907 expanded
[t=0.0417011s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0417097s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0417178s, 26380 KB] g=64, 909 evaluated, 908 expanded
[t=0.0664133s, 26520 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0664935s, 26520 KB] g=120, 2085 evaluated, 2084 expanded
[t=0.0665891s, 26520 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0665992s, 26520 KB] g=122, 2089 evaluated, 2088 expanded
[t=0.0676191s, 26520 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.06763s, 26520 KB] g=134, 2143 evaluated, 2142 expanded
[t=0.0677937s, 26520 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.067804s, 26520 KB] g=138, 2152 evaluated, 2151 expanded
[t=0.0678627s, 26520 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0678724s, 26520 KB] g=140, 2155 evaluated, 2154 expanded
[t=0.0683405s, 26520 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.068351s, 26520 KB] g=156, 2188 evaluated, 2187 expanded
[t=0.068482s, 26520 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0684906s, 26520 KB] g=164, 2199 evaluated, 2198 expanded
[t=0.0685064s, 26520 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0685164s, 26520 KB] g=165, 2200 evaluated, 2199 expanded
[t=0.0685308s, 26520 KB] Solution found!
[t=0.0685451s, 26520 KB] Actual search time: 0.0494677s
unstack b15 b18 (1)
put-down b15 (1)
unstack b21 b16 (1)
put-down b21 (1)
unstack b8 b6 (1)
put-down b8 (1)
unstack b9 b11 (1)
put-down b9 (1)
unstack b11 b17 (1)
put-down b11 (1)
unstack b17 b12 (1)
stack b17 b6 (1)
unstack b12 b1 (1)
put-down b12 (1)
unstack b17 b6 (1)
put-down b17 (1)
unstack b6 b19 (1)
put-down b6 (1)
unstack b19 b13 (1)
stack b19 b17 (1)
unstack b13 b2 (1)
put-down b13 (1)
unstack b2 b4 (1)
put-down b2 (1)
unstack b4 b5 (1)
stack b4 b11 (1)
unstack b5 b10 (1)
put-down b5 (1)
unstack b10 b7 (1)
put-down b10 (1)
unstack b7 b14 (1)
put-down b7 (1)
pick-up b14 (1)
stack b14 b19 (1)
pick-up b8 (1)
stack b8 b4 (1)
pick-up b18 (1)
stack b18 b8 (1)
pick-up b9 (1)
stack b9 b14 (1)
pick-up b12 (1)
stack b12 b9 (1)
pick-up b7 (1)
stack b7 b12 (1)
pick-up b21 (1)
stack b21 b7 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b1 b3 (1)
stack b1 b13 (1)
pick-up b15 (1)
stack b15 b1 (1)
pick-up b16 (1)
stack b16 b15 (1)
pick-up b20 (1)
stack b20 b16 (1)
pick-up b3 (1)
stack b3 b18 (1)
pick-up b5 (1)
stack b5 b20 (1)
pick-up b10 (1)
stack b10 b3 (1)
pick-up b2 (1)
stack b2 b10 (1)
unstack b5 b20 (1)
put-down b5 (1)
unstack b20 b16 (1)
put-down b20 (1)
pick-up b5 (1)
stack b5 b20 (1)
unstack b16 b15 (1)
put-down b16 (1)
unstack b15 b1 (1)
put-down b15 (1)
unstack b1 b13 (1)
put-down b1 (1)
pick-up b15 (1)
stack b15 b1 (1)
pick-up b16 (1)
stack b16 b15 (1)
unstack b5 b20 (1)
put-down b5 (1)
pick-up b20 (1)
stack b20 b16 (1)
pick-up b5 (1)
stack b5 b20 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b7 (1)
put-down b21 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b7 b12 (1)
put-down b7 (1)
unstack b12 b9 (1)
put-down b12 (1)
pick-up b7 (1)
stack b7 b12 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b7 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b9 b14 (1)
put-down b9 (1)
unstack b14 b19 (1)
put-down b14 (1)
pick-up b9 (1)
stack b9 b14 (1)
unstack b19 b17 (1)
put-down b19 (1)
pick-up b17 (1)
stack b17 b6 (1)
pick-up b19 (1)
stack b19 b17 (1)
unstack b9 b14 (1)
put-down b9 (1)
pick-up b14 (1)
stack b14 b19 (1)
pick-up b9 (1)
stack b9 b14 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b7 (1)
put-down b21 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b7 b12 (1)
put-down b7 (1)
pick-up b12 (1)
stack b12 b9 (1)
pick-up b7 (1)
stack b7 b12 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b7 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b5 b20 (1)
put-down b5 (1)
unstack b20 b16 (1)
put-down b20 (1)
unstack b16 b15 (1)
put-down b16 (1)
pick-up b20 (1)
stack b20 b16 (1)
pick-up b5 (1)
stack b5 b20 (1)
unstack b15 b1 (1)
put-down b15 (1)
pick-up b1 (1)
stack b1 b13 (1)
pick-up b15 (1)
stack b15 b1 (1)
unstack b5 b20 (1)
put-down b5 (1)
unstack b20 b16 (1)
put-down b20 (1)
pick-up b16 (1)
stack b16 b15 (1)
pick-up b20 (1)
stack b20 b16 (1)
pick-up b5 (1)
stack b5 b20 (1)
[t=0.0685545s, 26520 KB] Plan length: 166 step(s).
[t=0.0685545s, 26520 KB] Plan cost: 166
[t=0.0685545s, 26520 KB] Expanded 2200 state(s).
[t=0.0685545s, 26520 KB] Reopened 0 state(s).
[t=0.0685545s, 26520 KB] Evaluated 2201 state(s).
[t=0.0685545s, 26520 KB] Evaluations: 4402
[t=0.0685545s, 26520 KB] Generated 18489 state(s).
[t=0.0685545s, 26520 KB] Dead ends: 0 state(s).
[t=0.0685545s, 26520 KB] Number of registered states: 2201
[t=0.0685545s, 26520 KB] Int hash set load factor: 2201/4096 = 0.537354
[t=0.0685545s, 26520 KB] Int hash set resizes: 12
[t=0.0685545s, 26520 KB] Search time: 0.0495127s
[t=0.0685545s, 26520 KB] Total time: 0.0685545s
Solution found.
Peak memory: 26520 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.20s
