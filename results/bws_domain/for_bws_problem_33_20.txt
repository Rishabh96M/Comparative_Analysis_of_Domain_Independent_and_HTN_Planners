INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_33/bws_problem_33_20.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.023s wall-clock]
3500 relevant atoms
2343 auxiliary atoms
5843 final queue length
10271 total queue pushes
Completing instantiation... [0.050s CPU, 0.043s wall-clock]
Instantiating: [0.070s CPU, 0.068s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
34 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.012s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.062s wall-clock]
3234 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
66 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.027s wall-clock]
Reordering and filtering variables...
67 of 67 variables necessary.
34 of 67 mutex groups necessary.
2178 of 2178 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.015s wall-clock]
Translator variables: 67
Translator derived variables: 0
Translator facts: 1190
Translator goal facts: 27
Translator mutex groups: 34
Translator total mutex groups size: 1156
Translator operators: 2178
Translator axioms: 0
Translator task size: 18676
Translator peak memory: 43276 KB
Writing output... [0.010s CPU, 0.011s wall-clock]
Done! [0.200s CPU, 0.201s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.4911e-05s, 24488 KB] reading input...
[t=0.00668203s, 26928 KB] done reading input!
[t=0.00754377s, 27324 KB] Initializing landmark count heuristic...
[t=0.00757476s, 27324 KB] Generating landmark graph...
[t=0.00769217s, 27456 KB] Building a landmark graph with reasonable orders.
[t=0.00780567s, 27588 KB] Initializing Exploration...
[t=0.00845345s, 28188 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0423527s, 29112 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0424607s, 29112 KB] Landmarks generation time: 0.034775s
[t=0.0424826s, 29112 KB] Discovered 147 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0424993s, 29112 KB] 747 edges
[t=0.0425086s, 29112 KB] approx. reasonable orders
[t=0.052606s, 29112 KB] approx. obedient reasonable orders
[t=0.0528424s, 29112 KB] Removed 4 reasonable or obedient reasonable orders
[t=0.0528567s, 29112 KB] Landmarks generation time: 0.0452796s
[t=0.0528669s, 29112 KB] Discovered 147 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0528754s, 29112 KB] 866 edges
[t=0.0528837s, 29112 KB] Landmark graph generation time: 0.0453156s
[t=0.0528918s, 29112 KB] Landmark graph contains 147 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0528993s, 29112 KB] Landmark graph contains 866 orderings.
[t=0.0535414s, 29112 KB] Simplifying 8646 unary operators... done! [6534 unary operators]
[t=0.0558769s, 29112 KB] time to simplify: 0.00235643s
[t=0.0560206s, 29112 KB] Initializing additive heuristic...
[t=0.0560412s, 29112 KB] Initializing FF heuristic...
[t=0.0560953s, 29112 KB] Building successor generator...done!
[t=0.0565157s, 29276 KB] peak memory difference for successor generator creation: 164 KB
[t=0.0565268s, 29276 KB] time for successor generation creation: 0.000387887s
[t=0.0565409s, 29276 KB] Variables: 67
[t=0.0565486s, 29276 KB] FactPairs: 1190
[t=0.0565563s, 29276 KB] Bytes per state: 32
[t=0.0566384s, 29276 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0566705s, 29276 KB] 66 initial landmarks, 27 goal landmarks
[t=0.0567465s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 81
[t=0.0567556s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 59
[t=0.0567638s, 29276 KB] g=0, 1 evaluated, 0 expanded
[t=0.0567781s, 29276 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 81
[t=0.0567874s, 29276 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 59
[t=0.0570476s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 80
[t=0.0570572s, 29276 KB] g=1, 6 evaluated, 5 expanded
[t=0.0572602s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 58
[t=0.0572691s, 29276 KB] g=2, 10 evaluated, 9 expanded
[t=0.0574703s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 79
[t=0.057479s, 29276 KB] g=3, 14 evaluated, 13 expanded
[t=0.0579172s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 78
[t=0.0579264s, 29276 KB] g=5, 23 evaluated, 22 expanded
[t=0.0584626s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 77
[t=0.0584728s, 29276 KB] g=8, 34 evaluated, 33 expanded
[t=0.0591824s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 76
[t=0.0591921s, 29276 KB] g=10, 49 evaluated, 48 expanded
[t=0.0595414s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 57
[t=0.0595513s, 29276 KB] g=8, 56 evaluated, 55 expanded
[t=0.0597101s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 75
[t=0.0597192s, 29276 KB] g=11, 59 evaluated, 58 expanded
[t=0.0603325s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 56
[t=0.060343s, 29276 KB] g=10, 71 evaluated, 70 expanded
[t=0.0609992s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0610117s, 29276 KB] g=14, 84 evaluated, 83 expanded
[t=0.061419s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 55
[t=0.0614286s, 29276 KB] g=12, 92 evaluated, 91 expanded
[t=0.0621248s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.06214s, 29276 KB] g=14, 106 evaluated, 105 expanded
[t=0.0623018s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0623114s, 29276 KB] g=16, 109 evaluated, 108 expanded
[t=0.0629998s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0630158s, 29276 KB] g=17, 123 evaluated, 122 expanded
[t=0.0647s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0647408s, 29276 KB] g=20, 157 evaluated, 156 expanded
[t=0.0656641s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.065679s, 29276 KB] g=18, 176 evaluated, 175 expanded
[t=0.0663663s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0663782s, 29276 KB] g=20, 190 evaluated, 189 expanded
[t=0.0664389s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0664479s, 29276 KB] g=22, 191 evaluated, 190 expanded
[t=0.0675079s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0675248s, 29276 KB] g=23, 212 evaluated, 211 expanded
[t=0.0676369s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0676479s, 29276 KB] g=24, 214 evaluated, 213 expanded
[t=0.0690472s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0690655s, 29276 KB] g=26, 242 evaluated, 241 expanded
[t=0.0693738s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0693834s, 29276 KB] g=22, 248 evaluated, 247 expanded
[t=0.0703112s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0703254s, 29276 KB] g=24, 266 evaluated, 265 expanded
[t=0.0709344s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0709462s, 29276 KB] g=28, 278 evaluated, 277 expanded
[t=0.0727355s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.072754s, 29276 KB] g=28, 314 evaluated, 313 expanded
[t=0.0728163s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0728267s, 29276 KB] g=30, 315 evaluated, 314 expanded
[t=0.0743451s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0743582s, 29276 KB] g=32, 347 evaluated, 346 expanded
[t=0.0756148s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0756267s, 29276 KB] g=34, 373 evaluated, 372 expanded
[t=0.0792898s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0793087s, 29276 KB] g=34, 447 evaluated, 446 expanded
[t=0.0799211s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0799321s, 29276 KB] g=38, 460 evaluated, 459 expanded
[t=0.0815566s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0815742s, 29276 KB] g=40, 493 evaluated, 492 expanded
[t=0.0831696s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0831929s, 29276 KB] g=42, 525 evaluated, 524 expanded
[t=0.0847857s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0848036s, 29276 KB] g=44, 556 evaluated, 555 expanded
[t=0.0881501s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0881806s, 29276 KB] g=44, 621 evaluated, 620 expanded
[t=0.0895803s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0895972s, 29276 KB] g=48, 649 evaluated, 648 expanded
[t=0.0904311s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0904416s, 29276 KB] g=50, 665 evaluated, 664 expanded
[t=0.0915579s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0915795s, 29276 KB] g=54, 687 evaluated, 686 expanded
[t=0.0924769s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0924925s, 29276 KB] g=56, 704 evaluated, 703 expanded
[t=0.0934053s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0934149s, 29276 KB] g=58, 723 evaluated, 722 expanded
[t=0.0943475s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0943644s, 29276 KB] g=60, 742 evaluated, 741 expanded
[t=0.0999694s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.100013s, 29276 KB] g=66, 860 evaluated, 859 expanded
[t=0.108411s, 29276 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.108454s, 29276 KB] g=72, 1026 evaluated, 1025 expanded
[t=0.126584s, 29276 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.126642s, 29276 KB] g=48, 1397 evaluated, 1396 expanded
[t=0.179581s, 29408 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.179656s, 29408 KB] g=90, 2481 evaluated, 2480 expanded
[t=0.180159s, 29408 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.180176s, 29408 KB] g=92, 2490 evaluated, 2489 expanded
[t=0.180703s, 29408 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.180716s, 29408 KB] g=94, 2500 evaluated, 2499 expanded
[t=0.181203s, 29408 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.181215s, 29408 KB] g=96, 2510 evaluated, 2509 expanded
[t=0.184594s, 29540 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.184644s, 29540 KB] g=102, 2578 evaluated, 2577 expanded
[t=0.185396s, 29540 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.185452s, 29540 KB] g=104, 2586 evaluated, 2585 expanded
[t=0.185932s, 29540 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.185964s, 29540 KB] g=106, 2594 evaluated, 2593 expanded
[t=0.213661s, 29672 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.21373s, 29672 KB] g=118, 3168 evaluated, 3167 expanded
[t=0.217305s, 29672 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.217321s, 29672 KB] g=122, 3245 evaluated, 3244 expanded
[t=0.217897s, 29672 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.217908s, 29672 KB] g=124, 3257 evaluated, 3256 expanded
[t=0.237683s, 29936 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.237893s, 29936 KB] g=142, 3668 evaluated, 3667 expanded
[t=0.269114s, 30252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.269223s, 30252 KB] g=158, 4283 evaluated, 4282 expanded
[t=0.272863s, 30252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.272942s, 30252 KB] g=166, 4354 evaluated, 4353 expanded
[t=0.274153s, 30252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.274172s, 30252 KB] g=170, 4377 evaluated, 4376 expanded
[t=0.274438s, 30252 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.27445s, 30252 KB] g=172, 4382 evaluated, 4381 expanded
[t=0.283762s, 30384 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.283866s, 30384 KB] g=190, 4559 evaluated, 4558 expanded
[t=0.287015s, 30384 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.287038s, 30384 KB] g=200, 4624 evaluated, 4623 expanded
[t=0.360283s, 31048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.360383s, 31048 KB] g=226, 6165 evaluated, 6164 expanded
[t=0.362306s, 31048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.362323s, 31048 KB] g=234, 6207 evaluated, 6206 expanded
[t=0.362844s, 31048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.362856s, 31048 KB] g=238, 6218 evaluated, 6217 expanded
[t=0.36299s, 31048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.362999s, 31048 KB] g=240, 6221 evaluated, 6220 expanded
[t=0.367787s, 31048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.36783s, 31048 KB] g=262, 6334 evaluated, 6333 expanded
[t=0.368082s, 31048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.368093s, 31048 KB] g=264, 6340 evaluated, 6339 expanded
[t=0.369083s, 31048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.369108s, 31048 KB] g=272, 6363 evaluated, 6362 expanded
[t=0.369194s, 31048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.369206s, 31048 KB] g=273, 6365 evaluated, 6364 expanded
[t=0.369285s, 31048 KB] Solution found!
[t=0.36932s, 31048 KB] Actual search time: 0.312647s
unstack b7 b12 (1)
put-down b7 (1)
unstack b12 b22 (1)
put-down b12 (1)
unstack b29 b1 (1)
put-down b29 (1)
unstack b1 b11 (1)
stack b1 b17 (1)
unstack b11 b14 (1)
put-down b11 (1)
unstack b5 b33 (1)
stack b5 b14 (1)
unstack b33 b15 (1)
put-down b33 (1)
unstack b10 b3 (1)
put-down b10 (1)
unstack b3 b32 (1)
stack b3 b22 (1)
unstack b32 b31 (1)
stack b32 b5 (1)
pick-up b10 (1)
stack b10 b32 (1)
unstack b31 b13 (1)
stack b31 b24 (1)
unstack b13 b16 (1)
put-down b13 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b15 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b3 b22 (1)
put-down b3 (1)
unstack b22 b8 (1)
put-down b22 (1)
pick-up b3 (1)
stack b3 b22 (1)
unstack b8 b18 (1)
put-down b8 (1)
unstack b18 b25 (1)
put-down b18 (1)
pick-up b12 (1)
stack b12 b18 (1)
unstack b25 b28 (1)
stack b25 b1 (1)
pick-up b29 (1)
stack b29 b25 (1)
unstack b28 b30 (1)
put-down b28 (1)
unstack b30 b27 (1)
put-down b30 (1)
unstack b27 b21 (1)
stack b27 b7 (1)
unstack b21 b2 (1)
stack b21 b13 (1)
pick-up b8 (1)
stack b8 b30 (1)
unstack b21 b13 (1)
put-down b21 (1)
pick-up b13 (1)
stack b13 b2 (1)
pick-up b21 (1)
stack b21 b13 (1)
unstack b12 b18 (1)
put-down b12 (1)
pick-up b18 (1)
stack b18 b21 (1)
pick-up b12 (1)
stack b12 b18 (1)
unstack b16 b10 (1)
put-down b16 (1)
unstack b10 b32 (1)
put-down b10 (1)
unstack b32 b5 (1)
put-down b32 (1)
pick-up b10 (1)
stack b10 b32 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b5 b14 (1)
put-down b5 (1)
unstack b14 b20 (1)
put-down b14 (1)
unstack b20 b23 (1)
stack b20 b27 (1)
unstack b23 b4 (1)
stack b23 b33 (1)
unstack b4 b6 (1)
put-down b4 (1)
pick-up b28 (1)
stack b28 b6 (1)
pick-up b5 (1)
stack b5 b14 (1)
unstack b28 b6 (1)
put-down b28 (1)
unstack b6 b9 (1)
stack b6 b3 (1)
pick-up b28 (1)
stack b28 b6 (1)
unstack b9 b19 (1)
stack b9 b16 (1)
pick-up b19 (1)
stack b19 b11 (1)
unstack b28 b6 (1)
put-down b28 (1)
unstack b6 b3 (1)
put-down b6 (1)
pick-up b28 (1)
stack b28 b6 (1)
unstack b3 b22 (1)
put-down b3 (1)
pick-up b22 (1)
stack b22 b4 (1)
pick-up b3 (1)
stack b3 b22 (1)
unstack b28 b6 (1)
put-down b28 (1)
pick-up b6 (1)
stack b6 b3 (1)
pick-up b28 (1)
stack b28 b6 (1)
unstack b9 b16 (1)
put-down b9 (1)
unstack b16 b10 (1)
put-down b16 (1)
pick-up b9 (1)
stack b9 b16 (1)
unstack b10 b32 (1)
put-down b10 (1)
pick-up b32 (1)
stack b32 b5 (1)
pick-up b10 (1)
stack b10 b32 (1)
unstack b9 b16 (1)
put-down b9 (1)
pick-up b16 (1)
stack b16 b10 (1)
pick-up b9 (1)
stack b9 b16 (1)
unstack b12 b18 (1)
put-down b12 (1)
unstack b18 b21 (1)
put-down b18 (1)
unstack b21 b13 (1)
put-down b21 (1)
pick-up b18 (1)
stack b18 b21 (1)
pick-up b12 (1)
stack b12 b18 (1)
unstack b13 b2 (1)
put-down b13 (1)
pick-up b2 (1)
stack b2 b20 (1)
pick-up b13 (1)
stack b13 b2 (1)
unstack b12 b18 (1)
put-down b12 (1)
unstack b18 b21 (1)
put-down b18 (1)
pick-up b12 (1)
stack b12 b18 (1)
pick-up b21 (1)
stack b21 b13 (1)
unstack b12 b18 (1)
put-down b12 (1)
pick-up b18 (1)
stack b18 b21 (1)
pick-up b12 (1)
stack b12 b18 (1)
unstack b29 b25 (1)
put-down b29 (1)
unstack b25 b1 (1)
put-down b25 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b25 (1)
stack b25 b1 (1)
pick-up b29 (1)
stack b29 b25 (1)
unstack b17 b15 (1)
put-down b17 (1)
unstack b15 b26 (1)
stack b15 b9 (1)
pick-up b17 (1)
stack b17 b15 (1)
pick-up b26 (1)
stack b26 b19 (1)
unstack b17 b15 (1)
put-down b17 (1)
unstack b15 b9 (1)
put-down b15 (1)
unstack b9 b16 (1)
put-down b9 (1)
pick-up b15 (1)
stack b15 b9 (1)
pick-up b17 (1)
stack b17 b15 (1)
unstack b29 b25 (1)
put-down b29 (1)
unstack b25 b1 (1)
put-down b25 (1)
pick-up b1 (1)
stack b1 b17 (1)
pick-up b25 (1)
stack b25 b1 (1)
pick-up b29 (1)
stack b29 b25 (1)
unstack b16 b10 (1)
put-down b16 (1)
unstack b10 b32 (1)
put-down b10 (1)
unstack b32 b5 (1)
put-down b32 (1)
pick-up b10 (1)
stack b10 b32 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b5 b14 (1)
put-down b5 (1)
pick-up b14 (1)
stack b14 b26 (1)
pick-up b5 (1)
stack b5 b14 (1)
unstack b16 b10 (1)
put-down b16 (1)
unstack b10 b32 (1)
put-down b10 (1)
pick-up b16 (1)
stack b16 b10 (1)
pick-up b32 (1)
stack b32 b5 (1)
unstack b16 b10 (1)
put-down b16 (1)
pick-up b10 (1)
stack b10 b32 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b29 b25 (1)
put-down b29 (1)
unstack b25 b1 (1)
put-down b25 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b25 (1)
stack b25 b1 (1)
pick-up b29 (1)
stack b29 b25 (1)
unstack b17 b15 (1)
put-down b17 (1)
unstack b15 b9 (1)
put-down b15 (1)
pick-up b17 (1)
stack b17 b15 (1)
pick-up b9 (1)
stack b9 b16 (1)
unstack b17 b15 (1)
put-down b17 (1)
pick-up b15 (1)
stack b15 b9 (1)
pick-up b17 (1)
stack b17 b15 (1)
unstack b29 b25 (1)
put-down b29 (1)
unstack b25 b1 (1)
put-down b25 (1)
pick-up b1 (1)
stack b1 b17 (1)
pick-up b25 (1)
stack b25 b1 (1)
pick-up b29 (1)
stack b29 b25 (1)
[t=0.369332s, 31048 KB] Plan length: 274 step(s).
[t=0.369332s, 31048 KB] Plan cost: 274
[t=0.369332s, 31048 KB] Expanded 6366 state(s).
[t=0.369332s, 31048 KB] Reopened 0 state(s).
[t=0.369332s, 31048 KB] Evaluated 6367 state(s).
[t=0.369332s, 31048 KB] Evaluations: 12734
[t=0.369332s, 31048 KB] Generated 112375 state(s).
[t=0.369332s, 31048 KB] Dead ends: 0 state(s).
[t=0.369332s, 31048 KB] Number of registered states: 6367
[t=0.369332s, 31048 KB] Int hash set load factor: 6367/8192 = 0.777222
[t=0.369332s, 31048 KB] Int hash set resizes: 13
[t=0.369332s, 31048 KB] Search time: 0.312695s
[t=0.369332s, 31048 KB] Total time: 0.369332s
Solution found.
Peak memory: 31048 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.63s
