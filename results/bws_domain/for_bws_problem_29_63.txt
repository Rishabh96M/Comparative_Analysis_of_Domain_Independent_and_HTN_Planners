INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_29/bws_problem_29_63.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.019s wall-clock]
2728 relevant atoms
1827 auxiliary atoms
4555 final queue length
7986 total queue pushes
Completing instantiation... [0.030s CPU, 0.030s wall-clock]
Instantiating: [0.050s CPU, 0.050s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
30 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.050s wall-clock]
2494 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
58 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.022s wall-clock]
Reordering and filtering variables...
59 of 59 variables necessary.
30 of 59 mutex groups necessary.
1682 of 1682 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.012s wall-clock]
Translator variables: 59
Translator derived variables: 0
Translator facts: 930
Translator goal facts: 26
Translator mutex groups: 30
Translator total mutex groups size: 900
Translator operators: 1682
Translator axioms: 0
Translator task size: 14443
Translator peak memory: 40824 KB
Writing output... [0.010s CPU, 0.009s wall-clock]
Done! [0.160s CPU, 0.160s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9848e-05s, 24488 KB] reading input...
[t=0.00508817s, 26220 KB] done reading input!
[t=0.00712668s, 26616 KB] Initializing landmark count heuristic...
[t=0.00722235s, 26616 KB] Generating landmark graph...
[t=0.0074121s, 26748 KB] Building a landmark graph with reasonable orders.
[t=0.00754448s, 26748 KB] Initializing Exploration...
[t=0.00812396s, 27200 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0314905s, 27860 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.031617s, 27860 KB] Landmarks generation time: 0.0242101s
[t=0.0316412s, 27860 KB] Discovered 130 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0316582s, 27860 KB] 525 edges
[t=0.0316681s, 27860 KB] approx. reasonable orders
[t=0.0394518s, 27860 KB] approx. obedient reasonable orders
[t=0.0398805s, 27860 KB] Removed 1 reasonable or obedient reasonable orders
[t=0.039893s, 27860 KB] Landmarks generation time: 0.0326662s
[t=0.0399029s, 27860 KB] Discovered 130 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0399271s, 27860 KB] 640 edges
[t=0.0399352s, 27860 KB] Landmark graph generation time: 0.0327199s
[t=0.0399435s, 27860 KB] Landmark graph contains 130 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0399511s, 27860 KB] Landmark graph contains 640 orderings.
[t=0.0405021s, 27884 KB] Simplifying 6670 unary operators... done! [5046 unary operators]
[t=0.0420995s, 28016 KB] time to simplify: 0.00170212s
[t=0.0423012s, 28016 KB] Initializing additive heuristic...
[t=0.0423191s, 28016 KB] Initializing FF heuristic...
[t=0.0423747s, 28016 KB] Building successor generator...done!
[t=0.0426689s, 28016 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0426791s, 28016 KB] time for successor generation creation: 0.000255327s
[t=0.0427053s, 28016 KB] Variables: 59
[t=0.0427146s, 28016 KB] FactPairs: 930
[t=0.0427228s, 28016 KB] Bytes per state: 24
[t=0.0428184s, 28016 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.042852s, 28016 KB] 58 initial landmarks, 26 goal landmarks
[t=0.0429417s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0429513s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0429599s, 28016 KB] g=0, 1 evaluated, 0 expanded
[t=0.0429764s, 28016 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0429853s, 28016 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0434032s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0434175s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0434297s, 28016 KB] g=2, 11 evaluated, 10 expanded
[t=0.0438836s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0438959s, 28016 KB] g=4, 22 evaluated, 21 expanded
[t=0.0441078s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0441174s, 28016 KB] g=4, 27 evaluated, 26 expanded
[t=0.044611s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0446222s, 28016 KB] g=6, 39 evaluated, 38 expanded
[t=0.0449456s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0449574s, 28016 KB] g=6, 47 evaluated, 46 expanded
[t=0.045087s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0450996s, 28016 KB] g=7, 50 evaluated, 49 expanded
[t=0.0459699s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0459856s, 28016 KB] g=8, 71 evaluated, 70 expanded
[t=0.0461928s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0462023s, 28016 KB] g=10, 76 evaluated, 75 expanded
[t=0.0464476s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0464573s, 28016 KB] g=11, 82 evaluated, 81 expanded
[t=0.0477136s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0477247s, 28016 KB] g=14, 114 evaluated, 113 expanded
[t=0.0490595s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0491345s, 28016 KB] g=12, 144 evaluated, 143 expanded
[t=0.049236s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0492472s, 28016 KB] g=16, 146 evaluated, 145 expanded
[t=0.0499559s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0499689s, 28016 KB] g=14, 163 evaluated, 162 expanded
[t=0.0506132s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.050654s, 28016 KB] g=18, 179 evaluated, 178 expanded
[t=0.0524974s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0526178s, 28016 KB] g=20, 210 evaluated, 209 expanded
[t=0.0531436s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0531699s, 28016 KB] g=18, 221 evaluated, 220 expanded
[t=0.0541292s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0541427s, 28016 KB] g=22, 244 evaluated, 243 expanded
[t=0.0553239s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0553349s, 28016 KB] g=24, 273 evaluated, 272 expanded
[t=0.0555867s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0555981s, 28016 KB] g=24, 279 evaluated, 278 expanded
[t=0.0570082s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0570194s, 28016 KB] g=26, 315 evaluated, 314 expanded
[t=0.057111s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0571204s, 28016 KB] g=28, 317 evaluated, 316 expanded
[t=0.0576758s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.057687s, 28016 KB] g=27, 331 evaluated, 330 expanded
[t=0.0612658s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0612782s, 28016 KB] g=30, 423 evaluated, 422 expanded
[t=0.0628716s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0628866s, 28016 KB] g=32, 465 evaluated, 464 expanded
[t=0.063127s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0631409s, 28016 KB] g=32, 470 evaluated, 469 expanded
[t=0.064661s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0646714s, 28016 KB] g=34, 508 evaluated, 507 expanded
[t=0.0648035s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0648132s, 28016 KB] g=34, 511 evaluated, 510 expanded
[t=0.0666847s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0666975s, 28016 KB] g=36, 558 evaluated, 557 expanded
[t=0.0690975s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0691078s, 28016 KB] g=40, 621 evaluated, 620 expanded
[t=0.069271s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0692809s, 28016 KB] g=38, 625 evaluated, 624 expanded
[t=0.0705845s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.070597s, 28016 KB] g=44, 658 evaluated, 657 expanded
[t=0.0712471s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0712595s, 28016 KB] g=46, 674 evaluated, 673 expanded
[t=0.0718643s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0718952s, 28016 KB] g=48, 689 evaluated, 688 expanded
[t=0.0723902s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0724044s, 28016 KB] g=40, 701 evaluated, 700 expanded
[t=0.0725834s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0725946s, 28016 KB] g=50, 705 evaluated, 704 expanded
[t=0.0734037s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0734204s, 28016 KB] g=52, 725 evaluated, 724 expanded
[t=0.0783554s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0783769s, 28016 KB] g=56, 850 evaluated, 849 expanded
[t=0.0790975s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0791093s, 28016 KB] g=58, 868 evaluated, 867 expanded
[t=0.103202s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.103272s, 28016 KB] g=72, 1476 evaluated, 1475 expanded
[t=0.117115s, 28148 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.117172s, 28148 KB] g=82, 1834 evaluated, 1833 expanded
[t=0.14666s, 28416 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.146749s, 28416 KB] g=90, 2575 evaluated, 2574 expanded
[t=0.147328s, 28416 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.147343s, 28416 KB] g=92, 2589 evaluated, 2588 expanded
[t=0.147907s, 28416 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.147922s, 28416 KB] g=94, 2603 evaluated, 2602 expanded
[t=0.148597s, 28416 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.148634s, 28416 KB] g=96, 2616 evaluated, 2615 expanded
[t=0.151613s, 28416 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.15163s, 28416 KB] g=100, 2693 evaluated, 2692 expanded
[t=0.152059s, 28548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.152074s, 28548 KB] g=102, 2704 evaluated, 2703 expanded
[t=0.15441s, 28548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.154426s, 28548 KB] g=108, 2766 evaluated, 2765 expanded
[t=0.158616s, 28548 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.15865s, 28548 KB] g=118, 2876 evaluated, 2875 expanded
[t=0.185368s, 28812 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.185431s, 28812 KB] g=140, 3575 evaluated, 3574 expanded
[t=0.186805s, 28812 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.18682s, 28812 KB] g=144, 3611 evaluated, 3610 expanded
[t=0.187153s, 28812 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.187165s, 28812 KB] g=146, 3619 evaluated, 3618 expanded
[t=0.189283s, 28812 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.18931s, 28812 KB] g=154, 3676 evaluated, 3675 expanded
[t=0.190111s, 28812 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.190134s, 28812 KB] g=158, 3697 evaluated, 3696 expanded
[t=0.190324s, 28812 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.190338s, 28812 KB] g=160, 3702 evaluated, 3701 expanded
[t=0.20403s, 29112 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.204134s, 29112 KB] g=194, 4111 evaluated, 4110 expanded
[t=0.204715s, 29112 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.204776s, 29112 KB] g=198, 4125 evaluated, 4124 expanded
[t=0.20493s, 29112 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.204946s, 29112 KB] g=200, 4129 evaluated, 4128 expanded
[t=0.206867s, 29112 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.206905s, 29112 KB] g=216, 4187 evaluated, 4186 expanded
[t=0.207258s, 29112 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.20727s, 29112 KB] g=224, 4201 evaluated, 4200 expanded
[t=0.207332s, 29112 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.207354s, 29112 KB] g=225, 4203 evaluated, 4202 expanded
[t=0.207374s, 29112 KB] Solution found!
[t=0.207403s, 29112 KB] Actual search time: 0.164549s
unstack b4 b6 (1)
put-down b4 (1)
unstack b27 b13 (1)
stack b27 b1 (1)
unstack b14 b12 (1)
stack b14 b13 (1)
pick-up b28 (1)
stack b28 b15 (1)
unstack b12 b26 (1)
put-down b12 (1)
unstack b26 b5 (1)
stack b26 b14 (1)
pick-up b12 (1)
stack b12 b5 (1)
unstack b3 b22 (1)
put-down b3 (1)
pick-up b6 (1)
stack b6 b22 (1)
unstack b21 b11 (1)
put-down b21 (1)
unstack b11 b18 (1)
put-down b11 (1)
unstack b18 b23 (1)
put-down b18 (1)
unstack b23 b9 (1)
put-down b23 (1)
unstack b9 b8 (1)
put-down b9 (1)
pick-up b11 (1)
stack b11 b9 (1)
pick-up b8 (1)
stack b8 b27 (1)
pick-up b23 (1)
stack b23 b8 (1)
unstack b12 b5 (1)
put-down b12 (1)
unstack b5 b19 (1)
stack b5 b21 (1)
pick-up b12 (1)
stack b12 b5 (1)
unstack b19 b29 (1)
put-down b19 (1)
unstack b29 b20 (1)
stack b29 b12 (1)
unstack b20 b24 (1)
stack b20 b4 (1)
unstack b24 b17 (1)
stack b24 b3 (1)
unstack b17 b16 (1)
stack b17 b24 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b28 b15 (1)
put-down b28 (1)
pick-up b15 (1)
stack b15 b20 (1)
pick-up b28 (1)
stack b28 b15 (1)
unstack b17 b24 (1)
put-down b17 (1)
unstack b24 b3 (1)
put-down b24 (1)
pick-up b17 (1)
stack b17 b24 (1)
pick-up b3 (1)
stack b3 b29 (1)
unstack b17 b24 (1)
put-down b17 (1)
pick-up b24 (1)
stack b24 b3 (1)
pick-up b17 (1)
stack b17 b24 (1)
unstack b23 b8 (1)
put-down b23 (1)
unstack b8 b27 (1)
put-down b8 (1)
pick-up b23 (1)
stack b23 b8 (1)
unstack b27 b1 (1)
put-down b27 (1)
unstack b1 b7 (1)
stack b1 b16 (1)
pick-up b19 (1)
stack b19 b7 (1)
pick-up b27 (1)
stack b27 b1 (1)
unstack b19 b7 (1)
put-down b19 (1)
unstack b7 b2 (1)
stack b7 b6 (1)
pick-up b19 (1)
stack b19 b7 (1)
unstack b2 b25 (1)
stack b2 b28 (1)
pick-up b25 (1)
stack b25 b18 (1)
unstack b11 b9 (1)
put-down b11 (1)
pick-up b9 (1)
stack b9 b2 (1)
pick-up b11 (1)
stack b11 b9 (1)
unstack b23 b8 (1)
put-down b23 (1)
pick-up b8 (1)
stack b8 b27 (1)
pick-up b23 (1)
stack b23 b8 (1)
unstack b26 b14 (1)
put-down b26 (1)
unstack b14 b13 (1)
put-down b14 (1)
pick-up b13 (1)
stack b13 b23 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b26 (1)
stack b26 b14 (1)
unstack b17 b24 (1)
put-down b17 (1)
unstack b24 b3 (1)
put-down b24 (1)
unstack b3 b29 (1)
put-down b3 (1)
pick-up b24 (1)
stack b24 b3 (1)
pick-up b17 (1)
stack b17 b24 (1)
unstack b29 b12 (1)
put-down b29 (1)
unstack b12 b5 (1)
put-down b12 (1)
pick-up b29 (1)
stack b29 b12 (1)
unstack b5 b21 (1)
put-down b5 (1)
pick-up b21 (1)
stack b21 b19 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b29 b12 (1)
put-down b29 (1)
pick-up b12 (1)
stack b12 b5 (1)
pick-up b29 (1)
stack b29 b12 (1)
unstack b17 b24 (1)
put-down b17 (1)
unstack b24 b3 (1)
put-down b24 (1)
pick-up b17 (1)
stack b17 b24 (1)
pick-up b3 (1)
stack b3 b29 (1)
unstack b17 b24 (1)
put-down b17 (1)
pick-up b24 (1)
stack b24 b3 (1)
pick-up b17 (1)
stack b17 b24 (1)
unstack b26 b14 (1)
put-down b26 (1)
unstack b14 b13 (1)
put-down b14 (1)
pick-up b26 (1)
stack b26 b14 (1)
unstack b13 b23 (1)
put-down b13 (1)
unstack b23 b8 (1)
put-down b23 (1)
unstack b8 b27 (1)
put-down b8 (1)
pick-up b23 (1)
stack b23 b8 (1)
pick-up b13 (1)
stack b13 b23 (1)
unstack b26 b14 (1)
put-down b26 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b26 (1)
stack b26 b14 (1)
unstack b27 b1 (1)
put-down b27 (1)
unstack b1 b16 (1)
put-down b1 (1)
pick-up b27 (1)
stack b27 b1 (1)
unstack b16 b10 (1)
put-down b16 (1)
pick-up b10 (1)
stack b10 b25 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b27 b1 (1)
put-down b27 (1)
pick-up b1 (1)
stack b1 b16 (1)
pick-up b27 (1)
stack b27 b1 (1)
unstack b26 b14 (1)
put-down b26 (1)
unstack b14 b13 (1)
put-down b14 (1)
unstack b13 b23 (1)
put-down b13 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b26 (1)
stack b26 b14 (1)
unstack b23 b8 (1)
put-down b23 (1)
pick-up b8 (1)
stack b8 b27 (1)
pick-up b23 (1)
stack b23 b8 (1)
unstack b26 b14 (1)
put-down b26 (1)
unstack b14 b13 (1)
put-down b14 (1)
pick-up b13 (1)
stack b13 b23 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b26 (1)
stack b26 b14 (1)
[t=0.207413s, 29112 KB] Plan length: 226 step(s).
[t=0.207413s, 29112 KB] Plan cost: 226
[t=0.207413s, 29112 KB] Expanded 4203 state(s).
[t=0.207413s, 29112 KB] Reopened 0 state(s).
[t=0.207413s, 29112 KB] Evaluated 4204 state(s).
[t=0.207413s, 29112 KB] Evaluations: 8408
[t=0.207413s, 29112 KB] Generated 67303 state(s).
[t=0.207413s, 29112 KB] Dead ends: 0 state(s).
[t=0.207413s, 29112 KB] Number of registered states: 4204
[t=0.207413s, 29112 KB] Int hash set load factor: 4204/8192 = 0.513184
[t=0.207413s, 29112 KB] Int hash set resizes: 13
[t=0.207413s, 29112 KB] Search time: 0.164595s
[t=0.207413s, 29112 KB] Total time: 0.207413s
Solution found.
Peak memory: 29112 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.42s
