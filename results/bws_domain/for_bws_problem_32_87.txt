INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_32/bws_problem_32_87.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.020s wall-clock]
3298 relevant atoms
2208 auxiliary atoms
5506 final queue length
9673 total queue pushes
Completing instantiation... [0.050s CPU, 0.045s wall-clock]
Instantiating: [0.070s CPU, 0.067s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
33 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.003s wall-clock]
Translating task: [0.060s CPU, 0.057s wall-clock]
3040 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
64 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.027s wall-clock]
Reordering and filtering variables...
65 of 65 variables necessary.
33 of 65 mutex groups necessary.
2048 of 2048 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.013s wall-clock]
Translator variables: 65
Translator derived variables: 0
Translator facts: 1122
Translator goal facts: 27
Translator mutex groups: 33
Translator total mutex groups size: 1089
Translator operators: 2048
Translator axioms: 0
Translator task size: 17567
Translator peak memory: 42628 KB
Writing output... [0.010s CPU, 0.011s wall-clock]
Done! [0.200s CPU, 0.196s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.7999e-05s, 24488 KB] reading input...
[t=0.00621526s, 26784 KB] done reading input!
[t=0.0074054s, 27180 KB] Initializing landmark count heuristic...
[t=0.007463s, 27180 KB] Generating landmark graph...
[t=0.00758569s, 27312 KB] Building a landmark graph with reasonable orders.
[t=0.00769861s, 27312 KB] Initializing Exploration...
[t=0.00829394s, 27768 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0382417s, 28692 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.038419s, 28692 KB] Landmarks generation time: 0.0308477s
[t=0.0384486s, 28692 KB] Discovered 142 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0384778s, 28692 KB] 601 edges
[t=0.0384927s, 28692 KB] approx. reasonable orders
[t=0.0488471s, 28692 KB] approx. obedient reasonable orders
[t=0.049443s, 28692 KB] Removed 7 reasonable or obedient reasonable orders
[t=0.049458s, 28692 KB] Landmarks generation time: 0.0419954s
[t=0.0494742s, 28692 KB] Discovered 142 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.049484s, 28692 KB] 726 edges
[t=0.0494922s, 28692 KB] Landmark graph generation time: 0.0420359s
[t=0.0495005s, 28692 KB] Landmark graph contains 142 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0495083s, 28692 KB] Landmark graph contains 726 orderings.
[t=0.050212s, 28724 KB] Simplifying 8128 unary operators... done! [6144 unary operators]
[t=0.0522407s, 28856 KB] time to simplify: 0.00204445s
[t=0.0523663s, 28856 KB] Initializing additive heuristic...
[t=0.0523849s, 28856 KB] Initializing FF heuristic...
[t=0.0524373s, 28856 KB] Building successor generator...done!
[t=0.0527725s, 28856 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0527873s, 28856 KB] time for successor generation creation: 0.000308169s
[t=0.0528026s, 28856 KB] Variables: 65
[t=0.0528108s, 28856 KB] FactPairs: 1122
[t=0.0528186s, 28856 KB] Bytes per state: 32
[t=0.0529245s, 28856 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0529639s, 28856 KB] 63 initial landmarks, 27 goal landmarks
[t=0.0530733s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 79
[t=0.0530828s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 57
[t=0.0530915s, 28856 KB] g=0, 1 evaluated, 0 expanded
[t=0.0531064s, 28856 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 79
[t=0.0531148s, 28856 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 57
[t=0.0532916s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 78
[t=0.0533007s, 28856 KB] g=1, 4 evaluated, 3 expanded
[t=0.0533574s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 56
[t=0.0533658s, 28856 KB] g=2, 5 evaluated, 4 expanded
[t=0.0538743s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 55
[t=0.0538835s, 28856 KB] g=4, 16 evaluated, 15 expanded
[t=0.0540308s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 77
[t=0.0540395s, 28856 KB] g=3, 19 evaluated, 18 expanded
[t=0.0545719s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 75
[t=0.054582s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.05459s, 28856 KB] g=6, 30 evaluated, 29 expanded
[t=0.0547389s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0547482s, 28856 KB] g=7, 33 evaluated, 32 expanded
[t=0.0554313s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.055441s, 28856 KB] g=9, 47 evaluated, 46 expanded
[t=0.0562809s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0562909s, 28856 KB] g=12, 65 evaluated, 64 expanded
[t=0.0572609s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0572732s, 28856 KB] g=14, 85 evaluated, 84 expanded
[t=0.0578034s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0578165s, 28856 KB] g=10, 96 evaluated, 95 expanded
[t=0.0581842s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0582052s, 28856 KB] g=16, 103 evaluated, 102 expanded
[t=0.0586405s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0586691s, 28856 KB] g=12, 112 evaluated, 111 expanded
[t=0.0593192s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.059335s, 28856 KB] g=18, 125 evaluated, 124 expanded
[t=0.0596042s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0596167s, 28856 KB] g=14, 130 evaluated, 129 expanded
[t=0.0604331s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0604516s, 28856 KB] g=16, 147 evaluated, 146 expanded
[t=0.0605085s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0605187s, 28856 KB] g=20, 148 evaluated, 147 expanded
[t=0.0618878s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0619018s, 28856 KB] g=22, 176 evaluated, 175 expanded
[t=0.0620616s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0620739s, 28856 KB] g=20, 179 evaluated, 178 expanded
[t=0.0634096s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0634219s, 28856 KB] g=24, 206 evaluated, 205 expanded
[t=0.0649359s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0649469s, 28856 KB] g=26, 238 evaluated, 237 expanded
[t=0.0658192s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0658296s, 28856 KB] g=27, 256 evaluated, 255 expanded
[t=0.0663513s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0663621s, 28856 KB] g=28, 266 evaluated, 265 expanded
[t=0.0674944s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0675047s, 28856 KB] g=30, 290 evaluated, 289 expanded
[t=0.0677881s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0677972s, 28856 KB] g=30, 296 evaluated, 295 expanded
[t=0.0687453s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0687557s, 28856 KB] g=32, 316 evaluated, 315 expanded
[t=0.0695401s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0695532s, 28856 KB] g=32, 332 evaluated, 331 expanded
[t=0.0701012s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0701189s, 28856 KB] g=34, 342 evaluated, 341 expanded
[t=0.0712715s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0712964s, 28856 KB] g=34, 365 evaluated, 364 expanded
[t=0.0718301s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0718424s, 28856 KB] g=35, 376 evaluated, 375 expanded
[t=0.0719483s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0719576s, 28856 KB] g=36, 378 evaluated, 377 expanded
[t=0.0738899s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.073911s, 28856 KB] g=38, 419 evaluated, 418 expanded
[t=0.0759926s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0760256s, 28856 KB] g=38, 465 evaluated, 464 expanded
[t=0.0770816s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0770976s, 28856 KB] g=40, 486 evaluated, 485 expanded
[t=0.0781821s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0781977s, 28856 KB] g=40, 507 evaluated, 506 expanded
[t=0.0782592s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0782694s, 28856 KB] g=42, 508 evaluated, 507 expanded
[t=0.0818274s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0818412s, 28856 KB] g=42, 583 evaluated, 582 expanded
[t=0.0841718s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0841892s, 28856 KB] g=44, 632 evaluated, 631 expanded
[t=0.084671s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.084682s, 28856 KB] g=48, 642 evaluated, 641 expanded
[t=0.0856489s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0856624s, 28856 KB] g=50, 662 evaluated, 661 expanded
[t=0.0869152s, 28856 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0869287s, 28856 KB] g=46, 686 evaluated, 685 expanded
[t=0.0872174s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0872277s, 28856 KB] g=52, 692 evaluated, 691 expanded
[t=0.104892s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.104991s, 28856 KB] g=62, 1069 evaluated, 1068 expanded
[t=0.128906s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.129016s, 28856 KB] g=76, 1557 evaluated, 1556 expanded
[t=0.130232s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.130245s, 28856 KB] g=80, 1582 evaluated, 1581 expanded
[t=0.130846s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.130856s, 28856 KB] g=82, 1595 evaluated, 1594 expanded
[t=0.131369s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.131379s, 28856 KB] g=84, 1606 evaluated, 1605 expanded
[t=0.133659s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.133675s, 28856 KB] g=90, 1653 evaluated, 1652 expanded
[t=0.140806s, 28856 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.140831s, 28856 KB] g=104, 1801 evaluated, 1800 expanded
[t=0.153212s, 28996 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.153288s, 28996 KB] g=122, 2064 evaluated, 2063 expanded
[t=0.168351s, 29128 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.168438s, 29128 KB] g=138, 2385 evaluated, 2384 expanded
[t=0.171812s, 29128 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.171829s, 29128 KB] g=146, 2458 evaluated, 2457 expanded
[t=0.17213s, 29128 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.172145s, 29128 KB] g=146, 2464 evaluated, 2463 expanded
[t=0.172453s, 29128 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.172473s, 29128 KB] g=148, 2470 evaluated, 2469 expanded
[t=0.306874s, 30200 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.306985s, 30200 KB] g=54, 5266 evaluated, 5265 expanded
[t=0.334348s, 30464 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.334414s, 30464 KB] g=210, 5846 evaluated, 5845 expanded
[t=0.336185s, 30464 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.336199s, 30464 KB] g=214, 5888 evaluated, 5887 expanded
[t=0.336501s, 30464 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.336513s, 30464 KB] g=216, 5895 evaluated, 5894 expanded
[t=0.338049s, 30464 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.33807s, 30464 KB] g=220, 5926 evaluated, 5925 expanded
[t=0.338458s, 30464 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.338472s, 30464 KB] g=222, 5934 evaluated, 5933 expanded
[t=0.343258s, 30464 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.343299s, 30464 KB] g=234, 6042 evaluated, 6041 expanded
[t=0.344224s, 30464 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.34424s, 30464 KB] g=238, 6064 evaluated, 6063 expanded
[t=0.344498s, 30464 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.344508s, 30464 KB] g=240, 6070 evaluated, 6069 expanded
[t=0.349822s, 30596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.34986s, 30596 KB] g=262, 6209 evaluated, 6208 expanded
[t=0.350087s, 30596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.350098s, 30596 KB] g=264, 6215 evaluated, 6214 expanded
[t=0.350915s, 30596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.350936s, 30596 KB] g=272, 6239 evaluated, 6238 expanded
[t=0.351006s, 30596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.351017s, 30596 KB] g=273, 6241 evaluated, 6240 expanded
[t=0.351037s, 30596 KB] Solution found!
[t=0.351065s, 30596 KB] Actual search time: 0.298102s
unstack b2 b19 (1)
stack b2 b28 (1)
unstack b19 b24 (1)
put-down b19 (1)
unstack b24 b12 (1)
stack b24 b15 (1)
unstack b12 b29 (1)
put-down b12 (1)
unstack b29 b21 (1)
stack b29 b6 (1)
unstack b21 b7 (1)
stack b21 b12 (1)
unstack b9 b25 (1)
stack b9 b21 (1)
unstack b4 b31 (1)
stack b4 b25 (1)
unstack b31 b20 (1)
put-down b31 (1)
unstack b20 b1 (1)
put-down b20 (1)
unstack b1 b27 (1)
put-down b1 (1)
unstack b27 b5 (1)
put-down b27 (1)
unstack b5 b16 (1)
put-down b5 (1)
unstack b16 b10 (1)
put-down b16 (1)
unstack b10 b30 (1)
stack b10 b24 (1)
unstack b30 b8 (1)
stack b30 b20 (1)
pick-up b5 (1)
stack b5 b8 (1)
unstack b2 b28 (1)
put-down b2 (1)
unstack b28 b18 (1)
stack b28 b30 (1)
pick-up b14 (1)
stack b14 b18 (1)
pick-up b2 (1)
stack b2 b28 (1)
unstack b14 b18 (1)
put-down b14 (1)
unstack b18 b3 (1)
stack b18 b29 (1)
pick-up b14 (1)
stack b14 b18 (1)
pick-up b3 (1)
stack b3 b4 (1)
pick-up b27 (1)
stack b27 b3 (1)
unstack b9 b21 (1)
put-down b9 (1)
unstack b21 b12 (1)
put-down b21 (1)
pick-up b12 (1)
stack b12 b1 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b9 (1)
stack b9 b21 (1)
unstack b14 b18 (1)
put-down b14 (1)
unstack b18 b29 (1)
put-down b18 (1)
pick-up b14 (1)
stack b14 b18 (1)
unstack b29 b6 (1)
put-down b29 (1)
unstack b6 b17 (1)
stack b6 b27 (1)
unstack b17 b23 (1)
stack b17 b14 (1)
pick-up b29 (1)
stack b29 b6 (1)
unstack b23 b22 (1)
put-down b23 (1)
unstack b22 b13 (1)
stack b22 b19 (1)
unstack b13 b26 (1)
stack b13 b7 (1)
pick-up b23 (1)
stack b23 b13 (1)
unstack b5 b8 (1)
put-down b5 (1)
pick-up b8 (1)
stack b8 b23 (1)
pick-up b5 (1)
stack b5 b8 (1)
unstack b17 b14 (1)
put-down b17 (1)
unstack b14 b18 (1)
put-down b14 (1)
pick-up b17 (1)
stack b17 b14 (1)
pick-up b18 (1)
stack b18 b29 (1)
unstack b17 b14 (1)
put-down b17 (1)
pick-up b14 (1)
stack b14 b18 (1)
pick-up b17 (1)
stack b17 b14 (1)
unstack b9 b21 (1)
put-down b9 (1)
unstack b21 b12 (1)
put-down b21 (1)
pick-up b9 (1)
stack b9 b21 (1)
unstack b12 b1 (1)
put-down b12 (1)
pick-up b1 (1)
stack b1 b17 (1)
pick-up b12 (1)
stack b12 b1 (1)
unstack b9 b21 (1)
put-down b9 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b9 (1)
stack b9 b21 (1)
unstack b5 b8 (1)
put-down b5 (1)
unstack b8 b23 (1)
put-down b8 (1)
unstack b23 b13 (1)
put-down b23 (1)
pick-up b8 (1)
stack b8 b23 (1)
pick-up b5 (1)
stack b5 b8 (1)
unstack b13 b7 (1)
put-down b13 (1)
pick-up b7 (1)
stack b7 b26 (1)
pick-up b13 (1)
stack b13 b7 (1)
unstack b5 b8 (1)
put-down b5 (1)
unstack b8 b23 (1)
put-down b8 (1)
pick-up b23 (1)
stack b23 b13 (1)
pick-up b8 (1)
stack b8 b23 (1)
pick-up b5 (1)
stack b5 b8 (1)
unstack b9 b21 (1)
put-down b9 (1)
unstack b21 b12 (1)
put-down b21 (1)
unstack b12 b1 (1)
put-down b12 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b9 (1)
stack b9 b21 (1)
unstack b1 b17 (1)
put-down b1 (1)
unstack b17 b14 (1)
put-down b17 (1)
unstack b14 b18 (1)
put-down b14 (1)
pick-up b17 (1)
stack b17 b14 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b9 b21 (1)
put-down b9 (1)
unstack b21 b12 (1)
put-down b21 (1)
pick-up b12 (1)
stack b12 b1 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b9 (1)
stack b9 b21 (1)
unstack b18 b29 (1)
put-down b18 (1)
unstack b29 b6 (1)
put-down b29 (1)
pick-up b18 (1)
stack b18 b29 (1)
unstack b6 b27 (1)
put-down b6 (1)
unstack b27 b3 (1)
put-down b27 (1)
pick-up b6 (1)
stack b6 b27 (1)
unstack b18 b29 (1)
put-down b18 (1)
pick-up b29 (1)
stack b29 b6 (1)
pick-up b18 (1)
stack b18 b29 (1)
unstack b3 b4 (1)
put-down b3 (1)
unstack b4 b25 (1)
put-down b4 (1)
pick-up b3 (1)
stack b3 b4 (1)
unstack b25 b11 (1)
put-down b25 (1)
unstack b11 b32 (1)
stack b11 b5 (1)
pick-up b25 (1)
stack b25 b32 (1)
pick-up b31 (1)
stack b31 b11 (1)
unstack b25 b32 (1)
put-down b25 (1)
pick-up b32 (1)
stack b32 b16 (1)
pick-up b25 (1)
stack b25 b32 (1)
unstack b3 b4 (1)
put-down b3 (1)
pick-up b4 (1)
stack b4 b25 (1)
pick-up b3 (1)
stack b3 b4 (1)
unstack b18 b29 (1)
put-down b18 (1)
unstack b29 b6 (1)
put-down b29 (1)
pick-up b18 (1)
stack b18 b29 (1)
unstack b6 b27 (1)
put-down b6 (1)
pick-up b27 (1)
stack b27 b3 (1)
pick-up b6 (1)
stack b6 b27 (1)
unstack b18 b29 (1)
put-down b18 (1)
pick-up b29 (1)
stack b29 b6 (1)
pick-up b18 (1)
stack b18 b29 (1)
unstack b9 b21 (1)
put-down b9 (1)
unstack b21 b12 (1)
put-down b21 (1)
unstack b12 b1 (1)
put-down b12 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b9 (1)
stack b9 b21 (1)
unstack b1 b17 (1)
put-down b1 (1)
unstack b17 b14 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b17 (1)
pick-up b14 (1)
stack b14 b18 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b14 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b9 b21 (1)
put-down b9 (1)
unstack b21 b12 (1)
put-down b21 (1)
pick-up b12 (1)
stack b12 b1 (1)
pick-up b21 (1)
stack b21 b12 (1)
pick-up b9 (1)
stack b9 b21 (1)
[t=0.351078s, 30596 KB] Plan length: 274 step(s).
[t=0.351078s, 30596 KB] Plan cost: 274
[t=0.351078s, 30596 KB] Expanded 6241 state(s).
[t=0.351078s, 30596 KB] Reopened 0 state(s).
[t=0.351078s, 30596 KB] Evaluated 6242 state(s).
[t=0.351078s, 30596 KB] Evaluations: 12484
[t=0.351078s, 30596 KB] Generated 102566 state(s).
[t=0.351078s, 30596 KB] Dead ends: 0 state(s).
[t=0.351078s, 30596 KB] Number of registered states: 6242
[t=0.351078s, 30596 KB] Int hash set load factor: 6242/8192 = 0.761963
[t=0.351078s, 30596 KB] Int hash set resizes: 13
[t=0.351078s, 30596 KB] Search time: 0.298154s
[t=0.351078s, 30596 KB] Total time: 0.351078s
Solution found.
Peak memory: 30596 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.60s
