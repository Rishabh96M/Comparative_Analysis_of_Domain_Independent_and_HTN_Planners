INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_26/bws_problem_26_16.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.014s wall-clock]
2212 relevant atoms
1482 auxiliary atoms
3694 final queue length
6455 total queue pushes
Completing instantiation... [0.030s CPU, 0.023s wall-clock]
Instantiating: [0.040s CPU, 0.039s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
27 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.010s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.030s CPU, 0.035s wall-clock]
2002 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
52 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.021s wall-clock]
Reordering and filtering variables...
53 of 53 variables necessary.
27 of 53 mutex groups necessary.
1352 of 1352 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.009s wall-clock]
Translator variables: 53
Translator derived variables: 0
Translator facts: 756
Translator goal facts: 21
Translator mutex groups: 27
Translator total mutex groups size: 729
Translator operators: 1352
Translator axioms: 0
Translator task size: 11621
Translator peak memory: 38900 KB
Writing output... [0.010s CPU, 0.007s wall-clock]
Done! [0.120s CPU, 0.126s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.3121e-05s, 24488 KB] reading input...
[t=0.00408428s, 25744 KB] done reading input!
[t=0.00494874s, 26140 KB] Initializing landmark count heuristic...
[t=0.00498074s, 26140 KB] Generating landmark graph...
[t=0.00505993s, 26272 KB] Building a landmark graph with reasonable orders.
[t=0.00513516s, 26272 KB] Initializing Exploration...
[t=0.00552622s, 26680 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0218705s, 27208 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0219543s, 27208 KB] Landmarks generation time: 0.0168951s
[t=0.0219682s, 27208 KB] Discovered 113 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0219845s, 27208 KB] 444 edges
[t=0.0219945s, 27208 KB] approx. reasonable orders
[t=0.0228984s, 27208 KB] approx. obedient reasonable orders
[t=0.0229315s, 27208 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0229412s, 27208 KB] Landmarks generation time: 0.0179578s
[t=0.0229508s, 27208 KB] Discovered 113 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0229601s, 27208 KB] 458 edges
[t=0.0229998s, 27208 KB] Landmark graph generation time: 0.0180289s
[t=0.0230121s, 27208 KB] Landmark graph contains 113 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0230206s, 27208 KB] Landmark graph contains 458 orderings.
[t=0.0234964s, 27208 KB] Simplifying 5356 unary operators... done! [4056 unary operators]
[t=0.0247408s, 27340 KB] time to simplify: 0.00132743s
[t=0.0249069s, 27340 KB] Initializing additive heuristic...
[t=0.0249227s, 27340 KB] Initializing FF heuristic...
[t=0.0249745s, 27340 KB] Building successor generator...done!
[t=0.0252264s, 27340 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0252351s, 27340 KB] time for successor generation creation: 0.000223863s
[t=0.0252481s, 27340 KB] Variables: 53
[t=0.0252565s, 27340 KB] FactPairs: 756
[t=0.0252649s, 27340 KB] Bytes per state: 20
[t=0.025348s, 27340 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0253806s, 27340 KB] 52 initial landmarks, 21 goal landmarks
[t=0.0254403s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.02545s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0254587s, 27340 KB] g=0, 1 evaluated, 0 expanded
[t=0.0254724s, 27340 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0254812s, 27340 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0257375s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.025747s, 27340 KB] g=2, 8 evaluated, 7 expanded
[t=0.0265175s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0265285s, 27340 KB] g=4, 31 evaluated, 30 expanded
[t=0.0267405s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0267522s, 27340 KB] g=6, 37 evaluated, 36 expanded
[t=0.027283s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0272945s, 27340 KB] g=8, 52 evaluated, 51 expanded
[t=0.0273372s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0273461s, 27340 KB] g=8, 53 evaluated, 52 expanded
[t=0.027819s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0278293s, 27340 KB] g=10, 67 evaluated, 66 expanded
[t=0.0280015s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0280115s, 27340 KB] g=10, 72 evaluated, 71 expanded
[t=0.028627s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0286383s, 27340 KB] g=12, 91 evaluated, 90 expanded
[t=0.029355s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0293679s, 27340 KB] g=14, 113 evaluated, 112 expanded
[t=0.0299536s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0299635s, 27340 KB] g=14, 131 evaluated, 130 expanded
[t=0.0301038s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0301252s, 27340 KB] g=16, 135 evaluated, 134 expanded
[t=0.0309577s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0309704s, 27340 KB] g=18, 159 evaluated, 158 expanded
[t=0.031847s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0318613s, 27340 KB] g=20, 186 evaluated, 185 expanded
[t=0.0319059s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.031915s, 27340 KB] g=18, 187 evaluated, 186 expanded
[t=0.03261s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0326195s, 27340 KB] g=20, 209 evaluated, 208 expanded
[t=0.0329137s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0329227s, 27340 KB] g=22, 218 evaluated, 217 expanded
[t=0.0329656s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0329743s, 27340 KB] g=22, 219 evaluated, 218 expanded
[t=0.0335125s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0335286s, 27340 KB] g=22, 236 evaluated, 235 expanded
[t=0.0338212s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0338344s, 27340 KB] g=24, 245 evaluated, 244 expanded
[t=0.0338792s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0338881s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0338969s, 27340 KB] g=24, 246 evaluated, 245 expanded
[t=0.0341578s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0341698s, 27340 KB] g=26, 254 evaluated, 253 expanded
[t=0.0342138s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0342224s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0342312s, 27340 KB] g=26, 255 evaluated, 254 expanded
[t=0.0346424s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0346639s, 27340 KB] g=28, 263 evaluated, 262 expanded
[t=0.0355655s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0355769s, 27340 KB] g=31, 290 evaluated, 289 expanded
[t=0.0362983s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.036311s, 27340 KB] g=34, 312 evaluated, 311 expanded
[t=0.036784s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0367948s, 27340 KB] g=36, 326 evaluated, 325 expanded
[t=0.037989s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0379995s, 27340 KB] g=38, 364 evaluated, 363 expanded
[t=0.0382333s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0382424s, 27340 KB] g=38, 371 evaluated, 370 expanded
[t=0.038774s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0387848s, 27340 KB] g=40, 386 evaluated, 385 expanded
[t=0.0388325s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0388425s, 27340 KB] g=40, 387 evaluated, 386 expanded
[t=0.0394254s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0394415s, 27340 KB] g=42, 405 evaluated, 404 expanded
[t=0.0397379s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0397475s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0397559s, 27340 KB] g=44, 414 evaluated, 413 expanded
[t=0.0400177s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0400265s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0400343s, 27340 KB] g=46, 422 evaluated, 421 expanded
[t=0.0432146s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0432351s, 27340 KB] g=54, 519 evaluated, 518 expanded
[t=0.043627s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0436376s, 27340 KB] g=56, 531 evaluated, 530 expanded
[t=0.0439305s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0439413s, 27340 KB] g=57, 540 evaluated, 539 expanded
[t=0.0439869s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0439968s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.044005s, 27340 KB] g=58, 541 evaluated, 540 expanded
[t=0.0443098s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0443289s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0443379s, 27340 KB] g=60, 550 evaluated, 549 expanded
[t=0.04466s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0446884s, 27340 KB] g=62, 560 evaluated, 559 expanded
[t=0.0447343s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0447503s, 27340 KB] g=62, 561 evaluated, 560 expanded
[t=0.0452505s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.045279s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0452869s, 27340 KB] g=64, 577 evaluated, 576 expanded
[t=0.045512s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0455226s, 27340 KB] g=66, 584 evaluated, 583 expanded
[t=0.0457787s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0457891s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0457973s, 27340 KB] g=68, 592 evaluated, 591 expanded
[t=0.0460607s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0460697s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0460778s, 27340 KB] g=70, 600 evaluated, 599 expanded
[t=0.0463817s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0463931s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0464024s, 27340 KB] g=72, 609 evaluated, 608 expanded
[t=0.046677s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0466908s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0466998s, 27340 KB] g=74, 617 evaluated, 616 expanded
[t=0.046951s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.046964s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0469723s, 27340 KB] g=76, 624 evaluated, 623 expanded
[t=0.0478655s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0478774s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0478859s, 27340 KB] g=80, 653 evaluated, 652 expanded
[t=0.0480805s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0480893s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0480971s, 27340 KB] g=82, 659 evaluated, 658 expanded
[t=0.0488774s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0488882s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0488963s, 27340 KB] g=86, 684 evaluated, 683 expanded
[t=0.0490558s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0490656s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0490739s, 27340 KB] g=88, 689 evaluated, 688 expanded
[t=0.0496397s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0496508s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0496597s, 27340 KB] g=94, 708 evaluated, 707 expanded
[t=0.0503861s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0504047s, 27340 KB] g=104, 731 evaluated, 730 expanded
[t=0.0505631s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0505765s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0505851s, 27340 KB] g=106, 735 evaluated, 734 expanded
[t=0.0509354s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0509529s, 27340 KB] g=110, 744 evaluated, 743 expanded
[t=0.0510507s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0510608s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.051069s, 27340 KB] g=112, 747 evaluated, 746 expanded
[t=0.0531373s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0531609s, 27340 KB] g=134, 830 evaluated, 829 expanded
[t=0.0533617s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0533751s, 27340 KB] g=138, 839 evaluated, 838 expanded
[t=0.0534479s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0534579s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0534667s, 27340 KB] g=140, 842 evaluated, 841 expanded
[t=0.0536679s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0536778s, 27340 KB] g=148, 853 evaluated, 852 expanded
[t=0.0537038s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0537134s, 27340 KB] g=148, 854 evaluated, 853 expanded
[t=0.0537324s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0537421s, 27340 KB] g=149, 855 evaluated, 854 expanded
[t=0.0537604s, 27340 KB] Solution found!
[t=0.0537866s, 27340 KB] Actual search time: 0.0284049s
unstack b14 b17 (1)
put-down b14 (1)
unstack b15 b8 (1)
put-down b15 (1)
unstack b17 b10 (1)
put-down b17 (1)
unstack b10 b5 (1)
stack b10 b15 (1)
pick-up b14 (1)
stack b14 b8 (1)
unstack b19 b23 (1)
put-down b19 (1)
unstack b23 b2 (1)
put-down b23 (1)
unstack b5 b9 (1)
put-down b5 (1)
unstack b9 b24 (1)
put-down b9 (1)
unstack b24 b3 (1)
stack b24 b7 (1)
unstack b3 b4 (1)
stack b3 b13 (1)
pick-up b2 (1)
stack b2 b3 (1)
pick-up b4 (1)
stack b4 b9 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b24 b7 (1)
put-down b24 (1)
unstack b7 b1 (1)
put-down b7 (1)
unstack b1 b11 (1)
put-down b1 (1)
unstack b11 b21 (1)
put-down b11 (1)
pick-up b15 (1)
stack b15 b11 (1)
pick-up b10 (1)
stack b10 b15 (1)
pick-up b19 (1)
stack b19 b21 (1)
pick-up b1 (1)
stack b1 b19 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b2 b3 (1)
put-down b2 (1)
unstack b3 b13 (1)
put-down b3 (1)
unstack b13 b16 (1)
put-down b13 (1)
unstack b16 b12 (1)
stack b16 b10 (1)
unstack b12 b6 (1)
stack b12 b1 (1)
unstack b6 b18 (1)
stack b6 b17 (1)
unstack b18 b25 (1)
put-down b18 (1)
pick-up b13 (1)
stack b13 b16 (1)
pick-up b2 (1)
stack b2 b3 (1)
unstack b25 b26 (1)
put-down b25 (1)
unstack b26 b22 (1)
stack b26 b14 (1)
unstack b22 b20 (1)
put-down b22 (1)
pick-up b20 (1)
stack b20 b4 (1)
pick-up b25 (1)
stack b25 b20 (1)
pick-up b5 (1)
stack b5 b26 (1)
unstack b24 b7 (1)
put-down b24 (1)
pick-up b7 (1)
stack b7 b18 (1)
pick-up b24 (1)
stack b24 b7 (1)
unstack b6 b17 (1)
put-down b6 (1)
pick-up b17 (1)
stack b17 b25 (1)
pick-up b6 (1)
stack b6 b17 (1)
unstack b2 b3 (1)
put-down b2 (1)
pick-up b3 (1)
stack b3 b13 (1)
pick-up b2 (1)
stack b2 b3 (1)
unstack b5 b26 (1)
put-down b5 (1)
unstack b26 b14 (1)
put-down b26 (1)
pick-up b5 (1)
stack b5 b26 (1)
unstack b14 b8 (1)
put-down b14 (1)
pick-up b8 (1)
stack b8 b12 (1)
pick-up b14 (1)
stack b14 b8 (1)
unstack b5 b26 (1)
put-down b5 (1)
pick-up b26 (1)
stack b26 b14 (1)
pick-up b5 (1)
stack b5 b26 (1)
unstack b2 b3 (1)
put-down b2 (1)
unstack b3 b13 (1)
put-down b3 (1)
unstack b13 b16 (1)
put-down b13 (1)
pick-up b3 (1)
stack b3 b13 (1)
pick-up b2 (1)
stack b2 b3 (1)
unstack b16 b10 (1)
put-down b16 (1)
unstack b10 b15 (1)
put-down b10 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b15 b11 (1)
put-down b15 (1)
pick-up b11 (1)
stack b11 b5 (1)
pick-up b15 (1)
stack b15 b11 (1)
unstack b16 b10 (1)
put-down b16 (1)
pick-up b10 (1)
stack b10 b15 (1)
pick-up b16 (1)
stack b16 b10 (1)
unstack b2 b3 (1)
put-down b2 (1)
unstack b3 b13 (1)
put-down b3 (1)
pick-up b13 (1)
stack b13 b16 (1)
pick-up b3 (1)
stack b3 b13 (1)
pick-up b2 (1)
stack b2 b3 (1)
[t=0.0537999s, 27340 KB] Plan length: 150 step(s).
[t=0.0537999s, 27340 KB] Plan cost: 150
[t=0.0537999s, 27340 KB] Expanded 855 state(s).
[t=0.0537999s, 27340 KB] Reopened 0 state(s).
[t=0.0537999s, 27340 KB] Evaluated 856 state(s).
[t=0.0537999s, 27340 KB] Evaluations: 1712
[t=0.0537999s, 27340 KB] Generated 9154 state(s).
[t=0.0537999s, 27340 KB] Dead ends: 0 state(s).
[t=0.0537999s, 27340 KB] Number of registered states: 856
[t=0.0537999s, 27340 KB] Int hash set load factor: 856/1024 = 0.835938
[t=0.0537999s, 27340 KB] Int hash set resizes: 10
[t=0.0537999s, 27340 KB] Search time: 0.0284523s
[t=0.0537999s, 27340 KB] Total time: 0.0537999s
Solution found.
Peak memory: 27340 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.23s
