INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_61.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.000s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4268 total queue pushes
Completing instantiation... [0.020s CPU, 0.015s wall-clock]
Instantiating: [0.020s CPU, 0.025s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.010s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.022s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.010s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.005s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 17
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7602
Translator peak memory: 36452 KB
Writing output... [0.000s CPU, 0.008s wall-clock]
Done! [0.080s CPU, 0.080s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.3792e-05s, 24488 KB] reading input...
[t=0.00246142s, 25268 KB] done reading input!
[t=0.00352004s, 25664 KB] Initializing landmark count heuristic...
[t=0.00358285s, 25664 KB] Generating landmark graph...
[t=0.00364263s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00370414s, 25664 KB] Initializing Exploration...
[t=0.00399612s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.01402s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.014102s, 26380 KB] Landmarks generation time: 0.010458s
[t=0.0141166s, 26380 KB] Discovered 93 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0141341s, 26380 KB] 478 edges
[t=0.0141442s, 26380 KB] approx. reasonable orders
[t=0.0148041s, 26380 KB] approx. obedient reasonable orders
[t=0.0148355s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0148448s, 26380 KB] Landmarks generation time: 0.0112592s
[t=0.0148549s, 26380 KB] Discovered 93 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0148629s, 26380 KB] 490 edges
[t=0.014871s, 26380 KB] Landmark graph generation time: 0.0112956s
[t=0.0148796s, 26380 KB] Landmark graph contains 93 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0148873s, 26380 KB] Landmark graph contains 490 orderings.
[t=0.0151864s, 26380 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0159875s, 26380 KB] time to simplify: 0.00085771s
[t=0.0160967s, 26380 KB] Initializing additive heuristic...
[t=0.0161108s, 26380 KB] Initializing FF heuristic...
[t=0.0161584s, 26380 KB] Building successor generator...done!
[t=0.0163395s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0163481s, 26380 KB] time for successor generation creation: 0.000149851s
[t=0.0163601s, 26380 KB] Variables: 43
[t=0.0163683s, 26380 KB] FactPairs: 506
[t=0.0163762s, 26380 KB] Bytes per state: 16
[t=0.0164641s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0164968s, 26380 KB] 43 initial landmarks, 17 goal landmarks
[t=0.0165449s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.016554s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0165625s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.0165755s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0165838s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0166682s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0166771s, 26380 KB] g=1, 4 evaluated, 3 expanded
[t=0.0168437s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0168524s, 26380 KB] g=3, 11 evaluated, 10 expanded
[t=0.0170171s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0170268s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0170348s, 26380 KB] g=6, 18 evaluated, 17 expanded
[t=0.0171557s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0171644s, 26380 KB] g=8, 23 evaluated, 22 expanded
[t=0.0173049s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0173136s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0173213s, 26380 KB] g=10, 29 evaluated, 28 expanded
[t=0.0174841s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0174935s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0175012s, 26380 KB] g=12, 36 evaluated, 35 expanded
[t=0.0176433s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0176523s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0176605s, 26380 KB] g=14, 42 evaluated, 41 expanded
[t=0.0178426s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0178533s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.017866s, 26380 KB] g=16, 49 evaluated, 48 expanded
[t=0.0180618s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0180739s, 26380 KB] g=18, 56 evaluated, 55 expanded
[t=0.0181343s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0181436s, 26380 KB] g=18, 58 evaluated, 57 expanded
[t=0.0184374s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0184474s, 26380 KB] g=20, 70 evaluated, 69 expanded
[t=0.018821s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.018832s, 26380 KB] g=24, 85 evaluated, 84 expanded
[t=0.0190187s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0190301s, 26380 KB] g=25, 92 evaluated, 91 expanded
[t=0.0190638s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0190726s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0190815s, 26380 KB] g=26, 93 evaluated, 92 expanded
[t=0.0192597s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0192707s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0192792s, 26380 KB] g=28, 100 evaluated, 99 expanded
[t=0.0194574s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0194844s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0194926s, 26380 KB] g=30, 107 evaluated, 106 expanded
[t=0.0196487s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.019658s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0196665s, 26380 KB] g=32, 113 evaluated, 112 expanded
[t=0.0198418s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0198524s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0198605s, 26380 KB] g=34, 120 evaluated, 119 expanded
[t=0.0202387s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0202484s, 26380 KB] g=37, 136 evaluated, 135 expanded
[t=0.0202815s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0202909s, 26380 KB] g=38, 137 evaluated, 136 expanded
[t=0.0204358s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0204452s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0204533s, 26380 KB] g=40, 143 evaluated, 142 expanded
[t=0.0206147s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0206239s, 26380 KB] g=42, 150 evaluated, 149 expanded
[t=0.0206802s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0206888s, 26380 KB] g=42, 152 evaluated, 151 expanded
[t=0.0209199s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0209295s, 26380 KB] g=44, 162 evaluated, 161 expanded
[t=0.0211234s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0211398s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0211486s, 26380 KB] g=46, 170 evaluated, 169 expanded
[t=0.021225s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.021235s, 26380 KB] g=47, 173 evaluated, 172 expanded
[t=0.0212672s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0212773s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0212853s, 26380 KB] g=48, 174 evaluated, 173 expanded
[t=0.0214037s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0214144s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.021423s, 26380 KB] g=50, 179 evaluated, 178 expanded
[t=0.0218034s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0218165s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0218244s, 26380 KB] g=54, 196 evaluated, 195 expanded
[t=0.0219442s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.021955s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0219634s, 26380 KB] g=56, 201 evaluated, 200 expanded
[t=0.0235209s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0235406s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0235494s, 26380 KB] g=70, 271 evaluated, 270 expanded
[t=0.0240236s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0240367s, 26380 KB] g=82, 291 evaluated, 290 expanded
[t=0.0241954s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0242057s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0242137s, 26380 KB] g=88, 298 evaluated, 297 expanded
[t=0.0332136s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0333774s, 26380 KB] g=122, 704 evaluated, 703 expanded
[t=0.0335855s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0335952s, 26380 KB] g=126, 713 evaluated, 712 expanded
[t=0.0336667s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0336758s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0336838s, 26380 KB] g=128, 716 evaluated, 715 expanded
[t=0.0349664s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0349787s, 26380 KB] g=146, 783 evaluated, 782 expanded
[t=0.0350359s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0350459s, 26380 KB] g=148, 786 evaluated, 785 expanded
[t=0.0352168s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0352262s, 26380 KB] g=156, 798 evaluated, 797 expanded
[t=0.0352434s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.035252s, 26380 KB] g=157, 799 evaluated, 798 expanded
[t=0.0352663s, 26380 KB] Solution found!
[t=0.0352791s, 26380 KB] Actual search time: 0.0187799s
unstack b10 b5 (1)
put-down b10 (1)
unstack b2 b8 (1)
put-down b2 (1)
unstack b5 b20 (1)
stack b5 b8 (1)
unstack b20 b11 (1)
put-down b20 (1)
unstack b11 b7 (1)
put-down b11 (1)
unstack b7 b4 (1)
stack b7 b10 (1)
unstack b4 b21 (1)
stack b4 b11 (1)
unstack b21 b17 (1)
put-down b21 (1)
unstack b17 b16 (1)
put-down b17 (1)
pick-up b19 (1)
stack b19 b17 (1)
unstack b16 b1 (1)
put-down b16 (1)
unstack b1 b9 (1)
put-down b1 (1)
unstack b9 b3 (1)
stack b9 b20 (1)
pick-up b16 (1)
stack b16 b1 (1)
unstack b3 b12 (1)
stack b3 b7 (1)
unstack b12 b6 (1)
stack b12 b4 (1)
pick-up b6 (1)
stack b6 b21 (1)
unstack b5 b8 (1)
put-down b5 (1)
unstack b8 b13 (1)
stack b8 b3 (1)
unstack b13 b18 (1)
put-down b13 (1)
unstack b18 b14 (1)
put-down b18 (1)
unstack b14 b15 (1)
stack b14 b19 (1)
pick-up b15 (1)
stack b15 b5 (1)
pick-up b2 (1)
stack b2 b14 (1)
pick-up b18 (1)
stack b18 b15 (1)
unstack b9 b20 (1)
put-down b9 (1)
pick-up b20 (1)
stack b20 b12 (1)
pick-up b9 (1)
stack b9 b20 (1)
unstack b18 b15 (1)
put-down b18 (1)
unstack b15 b5 (1)
put-down b15 (1)
pick-up b18 (1)
stack b18 b15 (1)
pick-up b5 (1)
stack b5 b8 (1)
unstack b18 b15 (1)
put-down b18 (1)
pick-up b15 (1)
stack b15 b5 (1)
pick-up b18 (1)
stack b18 b15 (1)
unstack b2 b14 (1)
put-down b2 (1)
unstack b14 b19 (1)
put-down b14 (1)
pick-up b2 (1)
stack b2 b14 (1)
unstack b19 b17 (1)
put-down b19 (1)
pick-up b17 (1)
stack b17 b18 (1)
unstack b2 b14 (1)
put-down b2 (1)
pick-up b14 (1)
stack b14 b19 (1)
pick-up b2 (1)
stack b2 b14 (1)
unstack b17 b18 (1)
put-down b17 (1)
unstack b18 b15 (1)
put-down b18 (1)
unstack b15 b5 (1)
put-down b15 (1)
pick-up b18 (1)
stack b18 b15 (1)
pick-up b17 (1)
stack b17 b18 (1)
unstack b2 b14 (1)
put-down b2 (1)
unstack b14 b19 (1)
put-down b14 (1)
pick-up b19 (1)
stack b19 b17 (1)
pick-up b14 (1)
stack b14 b19 (1)
pick-up b2 (1)
stack b2 b14 (1)
unstack b5 b8 (1)
put-down b5 (1)
unstack b8 b3 (1)
put-down b8 (1)
pick-up b5 (1)
stack b5 b8 (1)
unstack b3 b7 (1)
put-down b3 (1)
unstack b7 b10 (1)
put-down b7 (1)
pick-up b10 (1)
stack b10 b13 (1)
pick-up b7 (1)
stack b7 b10 (1)
pick-up b3 (1)
stack b3 b7 (1)
unstack b5 b8 (1)
put-down b5 (1)
pick-up b8 (1)
stack b8 b3 (1)
pick-up b5 (1)
stack b5 b8 (1)
unstack b2 b14 (1)
put-down b2 (1)
unstack b14 b19 (1)
put-down b14 (1)
unstack b19 b17 (1)
put-down b19 (1)
pick-up b14 (1)
stack b14 b19 (1)
pick-up b2 (1)
stack b2 b14 (1)
unstack b17 b18 (1)
put-down b17 (1)
unstack b18 b15 (1)
put-down b18 (1)
pick-up b15 (1)
stack b15 b5 (1)
pick-up b18 (1)
stack b18 b15 (1)
pick-up b17 (1)
stack b17 b18 (1)
unstack b2 b14 (1)
put-down b2 (1)
unstack b14 b19 (1)
put-down b14 (1)
pick-up b19 (1)
stack b19 b17 (1)
pick-up b14 (1)
stack b14 b19 (1)
pick-up b2 (1)
stack b2 b14 (1)
[t=0.0352886s, 26380 KB] Plan length: 158 step(s).
[t=0.0352886s, 26380 KB] Plan cost: 158
[t=0.0352886s, 26380 KB] Expanded 799 state(s).
[t=0.0352886s, 26380 KB] Reopened 0 state(s).
[t=0.0352886s, 26380 KB] Evaluated 800 state(s).
[t=0.0352886s, 26380 KB] Evaluations: 1600
[t=0.0352886s, 26380 KB] Generated 6935 state(s).
[t=0.0352886s, 26380 KB] Dead ends: 0 state(s).
[t=0.0352886s, 26380 KB] Number of registered states: 800
[t=0.0352886s, 26380 KB] Int hash set load factor: 800/1024 = 0.78125
[t=0.0352886s, 26380 KB] Int hash set resizes: 10
[t=0.0352886s, 26380 KB] Search time: 0.0188248s
[t=0.0352886s, 26380 KB] Total time: 0.0352886s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.16s
