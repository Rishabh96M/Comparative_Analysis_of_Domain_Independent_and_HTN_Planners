INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_25/bws_problem_25_15.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.012s wall-clock]
2052 relevant atoms
1375 auxiliary atoms
3427 final queue length
5983 total queue pushes
Completing instantiation... [0.020s CPU, 0.022s wall-clock]
Instantiating: [0.030s CPU, 0.036s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
26 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.030s CPU, 0.033s wall-clock]
1850 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
50 propositions removed
Detecting unreachable propositions: [0.030s CPU, 0.022s wall-clock]
Reordering and filtering variables...
51 of 51 variables necessary.
26 of 51 mutex groups necessary.
1250 of 1250 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.008s wall-clock]
Translator variables: 51
Translator derived variables: 0
Translator facts: 702
Translator goal facts: 23
Translator mutex groups: 26
Translator total mutex groups size: 676
Translator operators: 1250
Translator axioms: 0
Translator task size: 10752
Translator peak memory: 38384 KB
Writing output... [0.000s CPU, 0.007s wall-clock]
Done! [0.110s CPU, 0.120s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9937e-05s, 24488 KB] reading input...
[t=0.00363349s, 25632 KB] done reading input!
[t=0.00454445s, 26028 KB] Initializing landmark count heuristic...
[t=0.00458519s, 26028 KB] Generating landmark graph...
[t=0.00469473s, 26160 KB] Building a landmark graph with reasonable orders.
[t=0.00480169s, 26160 KB] Initializing Exploration...
[t=0.00522343s, 26532 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0195344s, 27060 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0196142s, 27060 KB] Landmarks generation time: 0.0149128s
[t=0.0196293s, 27060 KB] Discovered 112 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0196458s, 27060 KB] 470 edges
[t=0.0196548s, 27060 KB] approx. reasonable orders
[t=0.0208926s, 27060 KB] approx. obedient reasonable orders
[t=0.0209281s, 27060 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0209383s, 27060 KB] Landmarks generation time: 0.016343s
[t=0.0209477s, 27060 KB] Discovered 112 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0209555s, 27060 KB] 488 edges
[t=0.0209636s, 27060 KB] Landmark graph generation time: 0.016385s
[t=0.0209716s, 27060 KB] Landmark graph contains 112 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0209792s, 27060 KB] Landmark graph contains 488 orderings.
[t=0.0213614s, 27060 KB] Simplifying 4950 unary operators... done! [3750 unary operators]
[t=0.0224957s, 27192 KB] time to simplify: 0.00121106s
[t=0.0226478s, 27192 KB] Initializing additive heuristic...
[t=0.0226637s, 27192 KB] Initializing FF heuristic...
[t=0.0227146s, 27192 KB] Building successor generator...done!
[t=0.02294s, 27192 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0229487s, 27192 KB] time for successor generation creation: 0.000190414s
[t=0.022966s, 27192 KB] Variables: 51
[t=0.0229754s, 27192 KB] FactPairs: 702
[t=0.0229833s, 27192 KB] Bytes per state: 20
[t=0.0230976s, 27192 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0231351s, 27192 KB] 51 initial landmarks, 23 goal landmarks
[t=0.0231942s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0232039s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0232126s, 27192 KB] g=0, 1 evaluated, 0 expanded
[t=0.0232266s, 27192 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0232359s, 27192 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0233782s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0233876s, 27192 KB] g=1, 5 evaluated, 4 expanded
[t=0.0235937s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0236046s, 27192 KB] g=2, 11 evaluated, 10 expanded
[t=0.0237653s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0237741s, 27192 KB] g=3, 16 evaluated, 15 expanded
[t=0.0240247s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0240338s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0240417s, 27192 KB] g=4, 24 evaluated, 23 expanded
[t=0.0240803s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0240886s, 27192 KB] g=5, 25 evaluated, 24 expanded
[t=0.0244114s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0244207s, 27192 KB] g=8, 36 evaluated, 35 expanded
[t=0.0247187s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0247288s, 27192 KB] g=10, 46 evaluated, 45 expanded
[t=0.0250617s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0250728s, 27192 KB] g=12, 57 evaluated, 56 expanded
[t=0.0256095s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0256215s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0256301s, 27192 KB] g=14, 73 evaluated, 72 expanded
[t=0.0259524s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0259655s, 27192 KB] g=16, 84 evaluated, 83 expanded
[t=0.0260344s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0260435s, 27192 KB] g=16, 86 evaluated, 85 expanded
[t=0.0265864s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0265962s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0266041s, 27192 KB] g=18, 105 evaluated, 104 expanded
[t=0.0269128s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0269217s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0269297s, 27192 KB] g=20, 115 evaluated, 114 expanded
[t=0.0273126s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0273588s, 27192 KB] g=22, 125 evaluated, 124 expanded
[t=0.0274451s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0274626s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.027475s, 27192 KB] g=22, 126 evaluated, 125 expanded
[t=0.0280956s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0281517s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0281635s, 27192 KB] g=24, 137 evaluated, 136 expanded
[t=0.0284852s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0284954s, 27192 KB] g=26, 147 evaluated, 146 expanded
[t=0.0285345s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0285432s, 27192 KB] g=26, 148 evaluated, 147 expanded
[t=0.0290599s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0290698s, 27192 KB] g=28, 166 evaluated, 165 expanded
[t=0.0291952s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0292047s, 27192 KB] g=28, 170 evaluated, 169 expanded
[t=0.0295544s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0295654s, 27192 KB] g=30, 182 evaluated, 181 expanded
[t=0.029857s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.029869s, 27192 KB] g=30, 192 evaluated, 191 expanded
[t=0.0301116s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0301233s, 27192 KB] g=32, 200 evaluated, 199 expanded
[t=0.0305257s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0305444s, 27192 KB] g=34, 213 evaluated, 212 expanded
[t=0.0305907s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0306043s, 27192 KB] g=32, 214 evaluated, 213 expanded
[t=0.030676s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0306891s, 27192 KB] g=33, 216 evaluated, 215 expanded
[t=0.0307608s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0307701s, 27192 KB] g=34, 218 evaluated, 217 expanded
[t=0.0314649s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0314801s, 27192 KB] g=36, 239 evaluated, 238 expanded
[t=0.0316954s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0317261s, 27192 KB] g=38, 246 evaluated, 245 expanded
[t=0.0321694s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0321812s, 27192 KB] g=38, 260 evaluated, 259 expanded
[t=0.0331178s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0331296s, 27192 KB] g=40, 291 evaluated, 290 expanded
[t=0.0333644s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0333731s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0333809s, 27192 KB] g=42, 299 evaluated, 298 expanded
[t=0.0336143s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0336234s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.033631s, 27192 KB] g=44, 307 evaluated, 306 expanded
[t=0.03453s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0345413s, 27192 KB] g=50, 339 evaluated, 338 expanded
[t=0.0349544s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.034976s, 27192 KB] g=52, 353 evaluated, 352 expanded
[t=0.0351545s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0351634s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0351712s, 27192 KB] g=54, 359 evaluated, 358 expanded
[t=0.0366567s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0366673s, 27192 KB] g=60, 412 evaluated, 411 expanded
[t=0.036842s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.036851s, 27192 KB] g=62, 418 evaluated, 417 expanded
[t=0.0369955s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0370039s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0370115s, 27192 KB] g=64, 423 evaluated, 422 expanded
[t=0.0382083s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0382176s, 27192 KB] g=72, 465 evaluated, 464 expanded
[t=0.0384158s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0384251s, 27192 KB] g=74, 472 evaluated, 471 expanded
[t=0.0385682s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0385766s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0385843s, 27192 KB] g=76, 477 evaluated, 476 expanded
[t=0.0393301s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0393422s, 27192 KB] g=76, 502 evaluated, 501 expanded
[t=0.0394806s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0394893s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0394975s, 27192 KB] g=78, 507 evaluated, 506 expanded
[t=0.0415147s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.041526s, 27192 KB] g=90, 585 evaluated, 584 expanded
[t=0.0416169s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0416282s, 27192 KB] g=91, 588 evaluated, 587 expanded
[t=0.0416653s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0416737s, 27192 KB] g=92, 589 evaluated, 588 expanded
[t=0.041798s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.041807s, 27192 KB] g=94, 593 evaluated, 592 expanded
[t=0.0422118s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0422217s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0422323s, 27192 KB] g=100, 607 evaluated, 606 expanded
[t=0.0449196s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.044932s, 27192 KB] g=114, 702 evaluated, 701 expanded
[t=0.0450453s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0450542s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0450619s, 27192 KB] g=116, 706 evaluated, 705 expanded
[t=0.0453033s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.045312s, 27192 KB] g=120, 715 evaluated, 714 expanded
[t=0.0453984s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0454068s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0454144s, 27192 KB] g=122, 718 evaluated, 717 expanded
[t=0.061099s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0611436s, 27192 KB] g=164, 1357 evaluated, 1356 expanded
[t=0.0617932s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0618031s, 27192 KB] g=172, 1389 evaluated, 1388 expanded
[t=0.0618686s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0618776s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0618855s, 27192 KB] g=174, 1392 evaluated, 1391 expanded
[t=0.0625336s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0625432s, 27192 KB] g=190, 1431 evaluated, 1430 expanded
[t=0.0626844s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0626932s, 27192 KB] g=198, 1441 evaluated, 1440 expanded
[t=0.0627505s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0627588s, 27192 KB] g=202, 1445 evaluated, 1444 expanded
[t=0.0627752s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0627837s, 27192 KB] g=203, 1446 evaluated, 1445 expanded
[t=0.062798s, 27192 KB] Solution found!
[t=0.0628116s, 27192 KB] Actual search time: 0.0396728s
unstack b8 b3 (1)
put-down b8 (1)
unstack b10 b25 (1)
stack b10 b15 (1)
unstack b21 b20 (1)
put-down b21 (1)
unstack b20 b4 (1)
put-down b20 (1)
unstack b3 b18 (1)
put-down b3 (1)
unstack b18 b2 (1)
put-down b18 (1)
unstack b2 b11 (1)
stack b2 b8 (1)
unstack b11 b22 (1)
stack b11 b6 (1)
unstack b22 b13 (1)
stack b22 b20 (1)
unstack b13 b24 (1)
stack b13 b10 (1)
unstack b24 b16 (1)
stack b24 b2 (1)
unstack b16 b12 (1)
stack b16 b11 (1)
unstack b4 b14 (1)
put-down b4 (1)
unstack b14 b23 (1)
stack b14 b16 (1)
unstack b5 b9 (1)
stack b5 b4 (1)
unstack b9 b1 (1)
put-down b9 (1)
unstack b1 b17 (1)
stack b1 b14 (1)
pick-up b21 (1)
stack b21 b17 (1)
pick-up b18 (1)
stack b18 b12 (1)
pick-up b23 (1)
stack b23 b18 (1)
pick-up b25 (1)
stack b25 b24 (1)
pick-up b3 (1)
stack b3 b22 (1)
unstack b21 b17 (1)
put-down b21 (1)
unstack b17 b19 (1)
put-down b17 (1)
pick-up b19 (1)
stack b19 b5 (1)
pick-up b17 (1)
stack b17 b19 (1)
pick-up b21 (1)
stack b21 b17 (1)
unstack b23 b18 (1)
put-down b23 (1)
unstack b18 b12 (1)
put-down b18 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b18 (1)
stack b18 b12 (1)
pick-up b23 (1)
stack b23 b18 (1)
unstack b13 b10 (1)
put-down b13 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b7 (1)
put-down b15 (1)
pick-up b7 (1)
stack b7 b25 (1)
pick-up b15 (1)
stack b15 b7 (1)
pick-up b10 (1)
stack b10 b15 (1)
pick-up b13 (1)
stack b13 b10 (1)
unstack b1 b14 (1)
put-down b1 (1)
unstack b14 b16 (1)
put-down b14 (1)
pick-up b1 (1)
stack b1 b14 (1)
unstack b16 b11 (1)
put-down b16 (1)
unstack b11 b6 (1)
put-down b11 (1)
pick-up b6 (1)
stack b6 b23 (1)
pick-up b11 (1)
stack b11 b6 (1)
pick-up b16 (1)
stack b16 b11 (1)
unstack b1 b14 (1)
put-down b1 (1)
pick-up b14 (1)
stack b14 b16 (1)
pick-up b1 (1)
stack b1 b14 (1)
unstack b21 b17 (1)
put-down b21 (1)
unstack b17 b19 (1)
put-down b17 (1)
pick-up b21 (1)
stack b21 b17 (1)
unstack b19 b5 (1)
put-down b19 (1)
unstack b5 b4 (1)
put-down b5 (1)
pick-up b4 (1)
stack b4 b9 (1)
pick-up b5 (1)
stack b5 b4 (1)
pick-up b19 (1)
stack b19 b5 (1)
unstack b21 b17 (1)
put-down b21 (1)
pick-up b17 (1)
stack b17 b19 (1)
pick-up b21 (1)
stack b21 b17 (1)
unstack b1 b14 (1)
put-down b1 (1)
unstack b14 b16 (1)
put-down b14 (1)
pick-up b1 (1)
stack b1 b14 (1)
unstack b16 b11 (1)
put-down b16 (1)
unstack b11 b6 (1)
put-down b11 (1)
unstack b6 b23 (1)
put-down b6 (1)
pick-up b11 (1)
stack b11 b6 (1)
pick-up b16 (1)
stack b16 b11 (1)
unstack b1 b14 (1)
put-down b1 (1)
pick-up b14 (1)
stack b14 b16 (1)
pick-up b1 (1)
stack b1 b14 (1)
unstack b23 b18 (1)
put-down b23 (1)
unstack b18 b12 (1)
put-down b18 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b18 (1)
stack b18 b12 (1)
pick-up b23 (1)
stack b23 b18 (1)
unstack b3 b22 (1)
put-down b3 (1)
unstack b22 b20 (1)
put-down b22 (1)
pick-up b20 (1)
stack b20 b13 (1)
pick-up b22 (1)
stack b22 b20 (1)
pick-up b3 (1)
stack b3 b22 (1)
unstack b23 b18 (1)
put-down b23 (1)
unstack b18 b12 (1)
put-down b18 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b18 (1)
stack b18 b12 (1)
pick-up b23 (1)
stack b23 b18 (1)
unstack b1 b14 (1)
put-down b1 (1)
unstack b14 b16 (1)
put-down b14 (1)
unstack b16 b11 (1)
put-down b16 (1)
pick-up b14 (1)
stack b14 b16 (1)
pick-up b1 (1)
stack b1 b14 (1)
unstack b11 b6 (1)
put-down b11 (1)
pick-up b6 (1)
stack b6 b23 (1)
pick-up b11 (1)
stack b11 b6 (1)
unstack b1 b14 (1)
put-down b1 (1)
unstack b14 b16 (1)
put-down b14 (1)
pick-up b1 (1)
stack b1 b14 (1)
pick-up b16 (1)
stack b16 b11 (1)
unstack b1 b14 (1)
put-down b1 (1)
pick-up b14 (1)
stack b14 b16 (1)
pick-up b1 (1)
stack b1 b14 (1)
[t=0.0628207s, 27192 KB] Plan length: 204 step(s).
[t=0.0628207s, 27192 KB] Plan cost: 204
[t=0.0628207s, 27192 KB] Expanded 1446 state(s).
[t=0.0628207s, 27192 KB] Reopened 0 state(s).
[t=0.0628207s, 27192 KB] Evaluated 1447 state(s).
[t=0.0628207s, 27192 KB] Evaluations: 2894
[t=0.0628207s, 27192 KB] Generated 11293 state(s).
[t=0.0628207s, 27192 KB] Dead ends: 0 state(s).
[t=0.0628207s, 27192 KB] Number of registered states: 1447
[t=0.0628207s, 27192 KB] Int hash set load factor: 1447/2048 = 0.706543
[t=0.0628207s, 27192 KB] Int hash set resizes: 11
[t=0.0628207s, 27192 KB] Search time: 0.0397235s
[t=0.0628207s, 27192 KB] Total time: 0.0628207s
Solution found.
Peak memory: 27192 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.23s
