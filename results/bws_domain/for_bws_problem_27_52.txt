INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_27/bws_problem_27_52.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.014s wall-clock]
2378 relevant atoms
1593 auxiliary atoms
3971 final queue length
6943 total queue pushes
Completing instantiation... [0.030s CPU, 0.025s wall-clock]
Instantiating: [0.040s CPU, 0.041s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
28 uncovered facts
Choosing groups: [0.010s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.040s CPU, 0.042s wall-clock]
2160 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
54 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.020s wall-clock]
Reordering and filtering variables...
55 of 55 variables necessary.
28 of 55 mutex groups necessary.
1458 of 1458 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.010s wall-clock]
Translator variables: 55
Translator derived variables: 0
Translator facts: 812
Translator goal facts: 20
Translator mutex groups: 28
Translator total mutex groups size: 784
Translator operators: 1458
Translator axioms: 0
Translator task size: 12525
Translator peak memory: 39668 KB
Writing output... [0.010s CPU, 0.008s wall-clock]
Done! [0.130s CPU, 0.135s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.3325e-05s, 24488 KB] reading input...
[t=0.00435615s, 25936 KB] done reading input!
[t=0.00571012s, 26332 KB] Initializing landmark count heuristic...
[t=0.0057596s, 26332 KB] Generating landmark graph...
[t=0.00589139s, 26332 KB] Building a landmark graph with reasonable orders.
[t=0.00603173s, 26464 KB] Initializing Exploration...
[t=0.00687585s, 26732 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0268758s, 27656 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0269738s, 27656 KB] Landmarks generation time: 0.0210783s
[t=0.0269956s, 27656 KB] Discovered 118 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.027012s, 27656 KB] 754 edges
[t=0.0270218s, 27656 KB] approx. reasonable orders
[t=0.0289976s, 27656 KB] approx. obedient reasonable orders
[t=0.0290562s, 27656 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0290676s, 27656 KB] Landmarks generation time: 0.0233066s
[t=0.0290787s, 27656 KB] Discovered 118 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0290938s, 27656 KB] 775 edges
[t=0.0291025s, 27656 KB] Landmark graph generation time: 0.0233501s
[t=0.0291114s, 27656 KB] Landmark graph contains 118 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0291195s, 27656 KB] Landmark graph contains 775 orderings.
[t=0.02961s, 27680 KB] Simplifying 5778 unary operators... done! [4374 unary operators]
[t=0.0310363s, 27680 KB] time to simplify: 0.00144519s
[t=0.0311423s, 27680 KB] Initializing additive heuristic...
[t=0.0311613s, 27680 KB] Initializing FF heuristic...
[t=0.0312173s, 27680 KB] Building successor generator...done!
[t=0.0315163s, 27680 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0315251s, 27680 KB] time for successor generation creation: 0.000261464s
[t=0.0315384s, 27680 KB] Variables: 55
[t=0.0315467s, 27680 KB] FactPairs: 812
[t=0.0315552s, 27680 KB] Bytes per state: 24
[t=0.0316634s, 27680 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0316966s, 27680 KB] 55 initial landmarks, 20 goal landmarks
[t=0.0317698s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0317795s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.031788s, 27680 KB] g=0, 1 evaluated, 0 expanded
[t=0.0318012s, 27680 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0318099s, 27680 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0319344s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0319438s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0319519s, 27680 KB] g=2, 4 evaluated, 3 expanded
[t=0.0320657s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0320751s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0320835s, 27680 KB] g=4, 7 evaluated, 6 expanded
[t=0.032196s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0322048s, 27680 KB] g=6, 10 evaluated, 9 expanded
[t=0.032249s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0322577s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0322658s, 27680 KB] g=6, 11 evaluated, 10 expanded
[t=0.0323102s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0323189s, 27680 KB] g=7, 12 evaluated, 11 expanded
[t=0.0325026s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0325118s, 27680 KB] g=10, 17 evaluated, 16 expanded
[t=0.0327256s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0327354s, 27680 KB] g=12, 23 evaluated, 22 expanded
[t=0.0329469s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0329587s, 27680 KB] g=14, 29 evaluated, 28 expanded
[t=0.0332709s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.033299s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.033309s, 27680 KB] g=16, 38 evaluated, 37 expanded
[t=0.0335545s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0335674s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0335755s, 27680 KB] g=18, 45 evaluated, 44 expanded
[t=0.0338323s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0338474s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0338569s, 27680 KB] g=20, 52 evaluated, 51 expanded
[t=0.0341118s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0341233s, 27680 KB] g=22, 59 evaluated, 58 expanded
[t=0.0342076s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0342181s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0342277s, 27680 KB] g=22, 61 evaluated, 60 expanded
[t=0.0343794s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0343893s, 27680 KB] g=23, 65 evaluated, 64 expanded
[t=0.0345817s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0345934s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0346016s, 27680 KB] g=24, 70 evaluated, 69 expanded
[t=0.0347561s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0347653s, 27680 KB] g=25, 74 evaluated, 73 expanded
[t=0.0350111s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0350207s, 27680 KB] g=27, 81 evaluated, 80 expanded
[t=0.0354172s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0354441s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0354547s, 27680 KB] g=30, 89 evaluated, 88 expanded
[t=0.0357751s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0357899s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.035799s, 27680 KB] g=32, 97 evaluated, 96 expanded
[t=0.0360861s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0360963s, 27680 KB] g=34, 105 evaluated, 104 expanded
[t=0.0361767s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0361863s, 27680 KB] g=34, 107 evaluated, 106 expanded
[t=0.0366161s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0366277s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0366357s, 27680 KB] g=36, 119 evaluated, 118 expanded
[t=0.0368874s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0368979s, 27680 KB] g=39, 126 evaluated, 125 expanded
[t=0.0373607s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0373722s, 27680 KB] g=42, 139 evaluated, 138 expanded
[t=0.037582s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0376026s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0376129s, 27680 KB] g=44, 145 evaluated, 144 expanded
[t=0.0379909s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0380071s, 27680 KB] g=48, 156 evaluated, 155 expanded
[t=0.0382505s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0382628s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.038271s, 27680 KB] g=50, 163 evaluated, 162 expanded
[t=0.0385927s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0386323s, 27680 KB] g=53, 172 evaluated, 171 expanded
[t=0.0392901s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0393102s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0393198s, 27680 KB] g=56, 187 evaluated, 186 expanded
[t=0.0396851s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0396993s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0397084s, 27680 KB] g=58, 195 evaluated, 194 expanded
[t=0.0399986s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0400098s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0400183s, 27680 KB] g=60, 203 evaluated, 202 expanded
[t=0.040138s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0401511s, 27680 KB] g=61, 206 evaluated, 205 expanded
[t=0.0401982s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.040207s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0402149s, 27680 KB] g=62, 207 evaluated, 206 expanded
[t=0.0404553s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0404642s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0404721s, 27680 KB] g=64, 214 evaluated, 213 expanded
[t=0.0407337s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0407433s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0407514s, 27680 KB] g=66, 222 evaluated, 221 expanded
[t=0.0409773s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0409873s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0409956s, 27680 KB] g=68, 229 evaluated, 228 expanded
[t=0.0411926s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0412018s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0412099s, 27680 KB] g=70, 235 evaluated, 234 expanded
[t=0.0413976s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0414068s, 27680 KB] g=73, 241 evaluated, 240 expanded
[t=0.0414438s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0414525s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0414606s, 27680 KB] g=74, 242 evaluated, 241 expanded
[t=0.0416311s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0416401s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0416479s, 27680 KB] g=76, 248 evaluated, 247 expanded
[t=0.0417765s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0417851s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0417928s, 27680 KB] g=78, 253 evaluated, 252 expanded
[t=0.0418799s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0418885s, 27680 KB] g=78, 256 evaluated, 255 expanded
[t=0.0419653s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0419738s, 27680 KB] g=79, 258 evaluated, 257 expanded
[t=0.0420126s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0420211s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0420288s, 27680 KB] g=80, 259 evaluated, 258 expanded
[t=0.0421827s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0421911s, 27680 KB] g=84, 264 evaluated, 263 expanded
[t=0.0422833s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0422917s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0422994s, 27680 KB] g=86, 267 evaluated, 266 expanded
[t=0.0427032s, 27680 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0427144s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0427226s, 27680 KB] g=98, 283 evaluated, 282 expanded
[t=0.0428062s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.042815s, 27680 KB] g=102, 287 evaluated, 286 expanded
[t=0.0428355s, 27680 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.042844s, 27680 KB] g=103, 288 evaluated, 287 expanded
[t=0.0428603s, 27680 KB] Solution found!
[t=0.0428711s, 27680 KB] Actual search time: 0.0111713s
unstack b2 b21 (1)
put-down b2 (1)
unstack b21 b9 (1)
put-down b21 (1)
unstack b9 b15 (1)
stack b9 b2 (1)
unstack b15 b27 (1)
put-down b15 (1)
unstack b22 b6 (1)
put-down b22 (1)
unstack b27 b26 (1)
put-down b27 (1)
unstack b6 b24 (1)
put-down b6 (1)
unstack b24 b18 (1)
put-down b24 (1)
unstack b26 b16 (1)
put-down b26 (1)
unstack b16 b10 (1)
stack b16 b26 (1)
unstack b18 b3 (1)
stack b18 b10 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b3 b8 (1)
put-down b3 (1)
unstack b8 b11 (1)
put-down b8 (1)
unstack b11 b13 (1)
stack b11 b22 (1)
unstack b13 b12 (1)
stack b13 b21 (1)
pick-up b27 (1)
stack b27 b12 (1)
pick-up b6 (1)
stack b6 b11 (1)
unstack b18 b10 (1)
put-down b18 (1)
unstack b10 b25 (1)
put-down b10 (1)
pick-up b15 (1)
stack b15 b25 (1)
pick-up b18 (1)
stack b18 b10 (1)
unstack b15 b25 (1)
put-down b15 (1)
unstack b25 b4 (1)
put-down b25 (1)
pick-up b15 (1)
stack b15 b25 (1)
unstack b27 b12 (1)
put-down b27 (1)
unstack b12 b7 (1)
put-down b12 (1)
unstack b7 b19 (1)
stack b7 b13 (1)
unstack b19 b1 (1)
put-down b19 (1)
unstack b1 b23 (1)
stack b1 b9 (1)
unstack b23 b20 (1)
stack b23 b27 (1)
unstack b20 b17 (1)
put-down b20 (1)
pick-up b12 (1)
stack b12 b20 (1)
pick-up b4 (1)
stack b4 b1 (1)
pick-up b8 (1)
stack b8 b7 (1)
unstack b17 b14 (1)
put-down b17 (1)
unstack b14 b5 (1)
stack b14 b6 (1)
pick-up b17 (1)
stack b17 b14 (1)
pick-up b5 (1)
stack b5 b18 (1)
pick-up b3 (1)
stack b3 b5 (1)
unstack b23 b27 (1)
put-down b23 (1)
pick-up b27 (1)
stack b27 b12 (1)
pick-up b23 (1)
stack b23 b27 (1)
unstack b3 b5 (1)
put-down b3 (1)
unstack b5 b18 (1)
put-down b5 (1)
pick-up b3 (1)
stack b3 b5 (1)
unstack b18 b10 (1)
put-down b18 (1)
pick-up b10 (1)
stack b10 b4 (1)
pick-up b18 (1)
stack b18 b10 (1)
unstack b3 b5 (1)
put-down b3 (1)
pick-up b5 (1)
stack b5 b18 (1)
pick-up b3 (1)
stack b3 b5 (1)
[t=0.0428806s, 27680 KB] Plan length: 104 step(s).
[t=0.0428806s, 27680 KB] Plan cost: 104
[t=0.0428806s, 27680 KB] Expanded 288 state(s).
[t=0.0428806s, 27680 KB] Reopened 0 state(s).
[t=0.0428806s, 27680 KB] Evaluated 289 state(s).
[t=0.0428806s, 27680 KB] Evaluations: 578
[t=0.0428806s, 27680 KB] Generated 3002 state(s).
[t=0.0428806s, 27680 KB] Dead ends: 0 state(s).
[t=0.0428806s, 27680 KB] Number of registered states: 289
[t=0.0428806s, 27680 KB] Int hash set load factor: 289/512 = 0.564453
[t=0.0428806s, 27680 KB] Int hash set resizes: 9
[t=0.0428806s, 27680 KB] Search time: 0.011218s
[t=0.0428806s, 27680 KB] Total time: 0.0428806s
Solution found.
Peak memory: 27680 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.23s
