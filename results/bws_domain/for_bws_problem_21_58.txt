INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_21/bws_problem_21_58.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.009s wall-clock]
1472 relevant atoms
987 auxiliary atoms
2459 final queue length
4268 total queue pushes
Completing instantiation... [0.020s CPU, 0.015s wall-clock]
Instantiating: [0.030s CPU, 0.026s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
22 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.010s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.022s wall-clock]
1302 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
42 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.010s wall-clock]
Reordering and filtering variables...
43 of 43 variables necessary.
22 of 43 mutex groups necessary.
882 of 882 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 43
Translator derived variables: 0
Translator facts: 506
Translator goal facts: 19
Translator mutex groups: 22
Translator total mutex groups size: 484
Translator operators: 882
Translator axioms: 0
Translator task size: 7604
Translator peak memory: 36452 KB
Writing output... [0.000s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.079s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.444e-05s, 24488 KB] reading input...
[t=0.00285814s, 25268 KB] done reading input!
[t=0.00391189s, 25664 KB] Initializing landmark count heuristic...
[t=0.00396996s, 25664 KB] Generating landmark graph...
[t=0.00410173s, 25664 KB] Building a landmark graph with reasonable orders.
[t=0.00423239s, 25664 KB] Initializing Exploration...
[t=0.00482909s, 25852 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0147593s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0149547s, 26380 KB] Landmarks generation time: 0.0108455s
[t=0.0149716s, 26380 KB] Discovered 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0149996s, 26380 KB] 519 edges
[t=0.0150113s, 26380 KB] approx. reasonable orders
[t=0.0152563s, 26380 KB] approx. obedient reasonable orders
[t=0.0152942s, 26380 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.015304s, 26380 KB] Landmarks generation time: 0.0113275s
[t=0.0153149s, 26380 KB] Discovered 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0153241s, 26380 KB] 523 edges
[t=0.0153333s, 26380 KB] Landmark graph generation time: 0.0113722s
[t=0.0153429s, 26380 KB] Landmark graph contains 95 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0153516s, 26380 KB] Landmark graph contains 523 orderings.
[t=0.0157162s, 26380 KB] Simplifying 3486 unary operators... done! [2646 unary operators]
[t=0.0165613s, 26380 KB] time to simplify: 0.00090751s
[t=0.0166788s, 26380 KB] Initializing additive heuristic...
[t=0.0166953s, 26380 KB] Initializing FF heuristic...
[t=0.0167607s, 26380 KB] Building successor generator...done!
[t=0.016956s, 26380 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0169653s, 26380 KB] time for successor generation creation: 0.000160137s
[t=0.0169784s, 26380 KB] Variables: 43
[t=0.0169869s, 26380 KB] FactPairs: 506
[t=0.0171141s, 26380 KB] Bytes per state: 16
[t=0.0172675s, 26380 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0173046s, 26380 KB] 43 initial landmarks, 19 goal landmarks
[t=0.0173593s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0173696s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0173785s, 26380 KB] g=0, 1 evaluated, 0 expanded
[t=0.017392s, 26380 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.017401s, 26380 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0175396s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0175514s, 26380 KB] g=2, 6 evaluated, 5 expanded
[t=0.0176086s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0176179s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0176261s, 26380 KB] g=2, 8 evaluated, 7 expanded
[t=0.0178424s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0178524s, 26380 KB] g=5, 17 evaluated, 16 expanded
[t=0.0180682s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0180834s, 26380 KB] g=8, 26 evaluated, 25 expanded
[t=0.0182425s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0182525s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0182623s, 26380 KB] g=10, 32 evaluated, 31 expanded
[t=0.0184167s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0184264s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0184353s, 26380 KB] g=12, 38 evaluated, 37 expanded
[t=0.0185597s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0185695s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.018578s, 26380 KB] g=14, 43 evaluated, 42 expanded
[t=0.018778s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0187878s, 26380 KB] g=17, 51 evaluated, 50 expanded
[t=0.0191129s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0191242s, 26380 KB] g=20, 64 evaluated, 63 expanded
[t=0.0193399s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0193513s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0193596s, 26380 KB] g=22, 72 evaluated, 71 expanded
[t=0.0195544s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0195636s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0195723s, 26380 KB] g=24, 80 evaluated, 79 expanded
[t=0.019721s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0197462s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0197552s, 26380 KB] g=26, 86 evaluated, 85 expanded
[t=0.020075s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.020085s, 26380 KB] g=29, 98 evaluated, 97 expanded
[t=0.0201197s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0201285s, 26380 KB] g=30, 99 evaluated, 98 expanded
[t=0.0202954s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.020305s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0203136s, 26380 KB] g=32, 106 evaluated, 105 expanded
[t=0.020461s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0204708s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0204794s, 26380 KB] g=34, 112 evaluated, 111 expanded
[t=0.020627s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0206364s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0206448s, 26380 KB] g=36, 118 evaluated, 117 expanded
[t=0.02079s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0207988s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0208067s, 26380 KB] g=38, 124 evaluated, 123 expanded
[t=0.0211908s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0212022s, 26380 KB] g=42, 140 evaluated, 139 expanded
[t=0.0213239s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0213332s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0213413s, 26380 KB] g=44, 145 evaluated, 144 expanded
[t=0.0216787s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0216885s, 26380 KB] g=48, 160 evaluated, 159 expanded
[t=0.0217853s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0217943s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0218029s, 26380 KB] g=50, 164 evaluated, 163 expanded
[t=0.0220531s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0220627s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0220703s, 26380 KB] g=54, 175 evaluated, 174 expanded
[t=0.0221701s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0221795s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0221878s, 26380 KB] g=56, 179 evaluated, 178 expanded
[t=0.0299441s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0299683s, 26380 KB] g=90, 521 evaluated, 520 expanded
[t=0.0300042s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0300142s, 26380 KB] g=91, 522 evaluated, 521 expanded
[t=0.0300502s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0300606s, 26380 KB] g=92, 523 evaluated, 522 expanded
[t=0.0302557s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.030276s, 26380 KB] g=94, 531 evaluated, 530 expanded
[t=0.030443s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0304545s, 26380 KB] g=96, 538 evaluated, 537 expanded
[t=0.0306028s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.030617s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0306279s, 26380 KB] g=98, 544 evaluated, 543 expanded
[t=0.0308454s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0308643s, 26380 KB] g=101, 553 evaluated, 552 expanded
[t=0.0308995s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.03091s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0309197s, 26380 KB] g=102, 554 evaluated, 553 expanded
[t=0.031067s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0310822s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0310917s, 26380 KB] g=104, 560 evaluated, 559 expanded
[t=0.0317202s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0317403s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0317513s, 26380 KB] g=110, 589 evaluated, 588 expanded
[t=0.0336952s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0337328s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0337426s, 26380 KB] g=128, 678 evaluated, 677 expanded
[t=0.0352276s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0352571s, 26380 KB] g=142, 745 evaluated, 744 expanded
[t=0.0353577s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0353684s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0353768s, 26380 KB] g=144, 749 evaluated, 748 expanded
[t=0.0355877s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0355975s, 26380 KB] g=148, 758 evaluated, 757 expanded
[t=0.0356794s, 26380 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0356887s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0356976s, 26380 KB] g=150, 761 evaluated, 760 expanded
[t=0.0413317s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0413589s, 26380 KB] g=184, 1041 evaluated, 1040 expanded
[t=0.0415313s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0415419s, 26380 KB] g=188, 1050 evaluated, 1049 expanded
[t=0.0416024s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0416116s, 26380 KB] g=190, 1053 evaluated, 1052 expanded
[t=0.0421115s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0421225s, 26380 KB] g=206, 1087 evaluated, 1086 expanded
[t=0.0422535s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0422629s, 26380 KB] g=214, 1097 evaluated, 1096 expanded
[t=0.0423155s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0423247s, 26380 KB] g=218, 1101 evaluated, 1100 expanded
[t=0.0423416s, 26380 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0423505s, 26380 KB] g=219, 1102 evaluated, 1101 expanded
[t=0.0423649s, 26380 KB] Solution found!
[t=0.042378s, 26380 KB] Actual search time: 0.0250701s
unstack b2 b20 (1)
put-down b2 (1)
unstack b20 b13 (1)
put-down b20 (1)
unstack b13 b16 (1)
put-down b13 (1)
unstack b16 b5 (1)
stack b16 b18 (1)
unstack b5 b21 (1)
stack b5 b20 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b7 b8 (1)
stack b7 b2 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b9 (1)
put-down b21 (1)
unstack b9 b10 (1)
put-down b9 (1)
unstack b10 b4 (1)
put-down b10 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b4 b11 (1)
stack b4 b5 (1)
unstack b11 b6 (1)
put-down b11 (1)
unstack b6 b17 (1)
stack b6 b16 (1)
pick-up b11 (1)
stack b11 b6 (1)
unstack b17 b15 (1)
stack b17 b4 (1)
unstack b15 b3 (1)
stack b15 b8 (1)
pick-up b3 (1)
stack b3 b11 (1)
unstack b15 b8 (1)
put-down b15 (1)
pick-up b8 (1)
stack b8 b3 (1)
pick-up b15 (1)
stack b15 b8 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b15 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b7 b2 (1)
put-down b7 (1)
pick-up b2 (1)
stack b2 b9 (1)
pick-up b7 (1)
stack b7 b2 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b15 (1)
put-down b21 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b15 b8 (1)
put-down b15 (1)
unstack b8 b3 (1)
put-down b8 (1)
pick-up b15 (1)
stack b15 b8 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b15 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b3 b11 (1)
put-down b3 (1)
unstack b11 b6 (1)
put-down b11 (1)
pick-up b3 (1)
stack b3 b11 (1)
unstack b6 b16 (1)
put-down b6 (1)
unstack b16 b18 (1)
put-down b16 (1)
unstack b18 b12 (1)
put-down b18 (1)
unstack b12 b14 (1)
put-down b12 (1)
unstack b14 b1 (1)
stack b14 b10 (1)
unstack b1 b19 (1)
stack b1 b17 (1)
pick-up b12 (1)
stack b12 b19 (1)
pick-up b16 (1)
stack b16 b18 (1)
pick-up b6 (1)
stack b6 b16 (1)
unstack b12 b19 (1)
put-down b12 (1)
pick-up b19 (1)
stack b19 b7 (1)
pick-up b12 (1)
stack b12 b19 (1)
unstack b3 b11 (1)
put-down b3 (1)
pick-up b11 (1)
stack b11 b6 (1)
pick-up b3 (1)
stack b3 b11 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b15 (1)
put-down b21 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b15 b8 (1)
put-down b15 (1)
pick-up b8 (1)
stack b8 b3 (1)
pick-up b15 (1)
stack b15 b8 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b15 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b1 b17 (1)
put-down b1 (1)
unstack b17 b4 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b4 b5 (1)
put-down b4 (1)
unstack b5 b20 (1)
put-down b5 (1)
pick-up b20 (1)
stack b20 b14 (1)
pick-up b5 (1)
stack b5 b20 (1)
pick-up b4 (1)
stack b4 b5 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b4 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b15 (1)
put-down b21 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b15 b8 (1)
put-down b15 (1)
unstack b8 b3 (1)
put-down b8 (1)
unstack b3 b11 (1)
put-down b3 (1)
pick-up b8 (1)
stack b8 b3 (1)
pick-up b15 (1)
stack b15 b8 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b15 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b11 b6 (1)
put-down b11 (1)
unstack b6 b16 (1)
put-down b6 (1)
pick-up b11 (1)
stack b11 b6 (1)
unstack b16 b18 (1)
put-down b16 (1)
pick-up b18 (1)
stack b18 b12 (1)
pick-up b16 (1)
stack b16 b18 (1)
unstack b11 b6 (1)
put-down b11 (1)
pick-up b6 (1)
stack b6 b16 (1)
pick-up b11 (1)
stack b11 b6 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b15 (1)
put-down b21 (1)
unstack b15 b8 (1)
put-down b15 (1)
pick-up b21 (1)
stack b21 b15 (1)
pick-up b13 (1)
stack b13 b21 (1)
unstack b8 b3 (1)
put-down b8 (1)
pick-up b3 (1)
stack b3 b11 (1)
pick-up b8 (1)
stack b8 b3 (1)
unstack b13 b21 (1)
put-down b13 (1)
unstack b21 b15 (1)
put-down b21 (1)
pick-up b13 (1)
stack b13 b21 (1)
pick-up b15 (1)
stack b15 b8 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b21 (1)
stack b21 b15 (1)
pick-up b13 (1)
stack b13 b21 (1)
[t=0.0423874s, 26380 KB] Plan length: 220 step(s).
[t=0.0423874s, 26380 KB] Plan cost: 220
[t=0.0423874s, 26380 KB] Expanded 1102 state(s).
[t=0.0423874s, 26380 KB] Reopened 0 state(s).
[t=0.0423874s, 26380 KB] Evaluated 1103 state(s).
[t=0.0423874s, 26380 KB] Evaluations: 2206
[t=0.0423874s, 26380 KB] Generated 7642 state(s).
[t=0.0423874s, 26380 KB] Dead ends: 0 state(s).
[t=0.0423874s, 26380 KB] Number of registered states: 1103
[t=0.0423874s, 26380 KB] Int hash set load factor: 1103/2048 = 0.538574
[t=0.0423874s, 26380 KB] Int hash set resizes: 11
[t=0.0423874s, 26380 KB] Search time: 0.0251206s
[t=0.0423874s, 26380 KB] Total time: 0.0423874s
Solution found.
Peak memory: 26380 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.17s
