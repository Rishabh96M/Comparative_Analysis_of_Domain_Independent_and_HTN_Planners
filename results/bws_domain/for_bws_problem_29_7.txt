INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_29/bws_problem_29_7.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.017s wall-clock]
2728 relevant atoms
1827 auxiliary atoms
4555 final queue length
7982 total queue pushes
Completing instantiation... [0.030s CPU, 0.029s wall-clock]
Instantiating: [0.050s CPU, 0.049s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
30 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.001s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.004s wall-clock]
Translating task: [0.050s CPU, 0.050s wall-clock]
2494 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
58 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.020s wall-clock]
Reordering and filtering variables...
59 of 59 variables necessary.
30 of 59 mutex groups necessary.
1682 of 1682 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.010s wall-clock]
Translator variables: 59
Translator derived variables: 0
Translator facts: 930
Translator goal facts: 25
Translator mutex groups: 30
Translator total mutex groups size: 900
Translator operators: 1682
Translator axioms: 0
Translator task size: 14442
Translator peak memory: 40824 KB
Writing output... [0.010s CPU, 0.008s wall-clock]
Done! [0.150s CPU, 0.154s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.7778e-05s, 24488 KB] reading input...
[t=0.00510684s, 26220 KB] done reading input!
[t=0.00623611s, 26616 KB] Initializing landmark count heuristic...
[t=0.0062927s, 26616 KB] Generating landmark graph...
[t=0.00639293s, 26748 KB] Building a landmark graph with reasonable orders.
[t=0.00649193s, 26748 KB] Initializing Exploration...
[t=0.0070002s, 27200 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0346855s, 27860 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0348513s, 27860 KB] Landmarks generation time: 0.0284821s
[t=0.0349094s, 27860 KB] Discovered 129 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0349398s, 27860 KB] 557 edges
[t=0.0349585s, 27860 KB] approx. reasonable orders
[t=0.0381778s, 27860 KB] approx. obedient reasonable orders
[t=0.0382761s, 27860 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0382895s, 27860 KB] Landmarks generation time: 0.0319971s
[t=0.0383019s, 27860 KB] Discovered 129 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0383122s, 27860 KB] 576 edges
[t=0.0383227s, 27860 KB] Landmark graph generation time: 0.0320386s
[t=0.0383333s, 27860 KB] Landmark graph contains 129 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.038343s, 27860 KB] Landmark graph contains 576 orderings.
[t=0.0390106s, 27884 KB] Simplifying 6670 unary operators... done! [5046 unary operators]
[t=0.0411328s, 28016 KB] time to simplify: 0.00223746s
[t=0.0413413s, 28016 KB] Initializing additive heuristic...
[t=0.0413609s, 28016 KB] Initializing FF heuristic...
[t=0.0414204s, 28016 KB] Building successor generator...done!
[t=0.0417109s, 28016 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0417201s, 28016 KB] time for successor generation creation: 0.000261831s
[t=0.0417339s, 28016 KB] Variables: 59
[t=0.0417423s, 28016 KB] FactPairs: 930
[t=0.0417505s, 28016 KB] Bytes per state: 24
[t=0.0418514s, 28016 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0418843s, 28016 KB] 59 initial landmarks, 25 goal landmarks
[t=0.041952s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0419613s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0419728s, 28016 KB] g=0, 1 evaluated, 0 expanded
[t=0.0419933s, 28016 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0420014s, 28016 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0424329s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.042448s, 28016 KB] g=2, 8 evaluated, 7 expanded
[t=0.0435147s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0435284s, 28016 KB] g=4, 27 evaluated, 26 expanded
[t=0.0438833s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0438969s, 28016 KB] g=6, 33 evaluated, 32 expanded
[t=0.0447166s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0447304s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0447432s, 28016 KB] g=8, 47 evaluated, 46 expanded
[t=0.0452299s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0452444s, 28016 KB] g=10, 55 evaluated, 54 expanded
[t=0.045317s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.04533s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0453422s, 28016 KB] g=10, 56 evaluated, 55 expanded
[t=0.0457449s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0457584s, 28016 KB] g=12, 63 evaluated, 62 expanded
[t=0.0458903s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0459028s, 28016 KB] g=12, 65 evaluated, 64 expanded
[t=0.0465789s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0465969s, 28016 KB] g=14, 77 evaluated, 76 expanded
[t=0.0474396s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0474824s, 28016 KB] g=15, 88 evaluated, 87 expanded
[t=0.0476691s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0476938s, 28016 KB] g=16, 90 evaluated, 89 expanded
[t=0.0499011s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0499756s, 28016 KB] g=18, 107 evaluated, 106 expanded
[t=0.0500786s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0500895s, 28016 KB] g=18, 109 evaluated, 108 expanded
[t=0.0507211s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.050731s, 28016 KB] g=20, 124 evaluated, 123 expanded
[t=0.0512186s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0512305s, 28016 KB] g=22, 136 evaluated, 135 expanded
[t=0.0513188s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0513279s, 28016 KB] g=20, 138 evaluated, 137 expanded
[t=0.0521968s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0522319s, 28016 KB] g=22, 158 evaluated, 157 expanded
[t=0.0528665s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0528864s, 28016 KB] g=26, 172 evaluated, 171 expanded
[t=0.0532612s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.053271s, 28016 KB] g=24, 181 evaluated, 180 expanded
[t=0.0537493s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0537609s, 28016 KB] g=28, 193 evaluated, 192 expanded
[t=0.0541975s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.054208s, 28016 KB] g=26, 204 evaluated, 203 expanded
[t=0.0549074s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0549168s, 28016 KB] g=28, 222 evaluated, 221 expanded
[t=0.0558956s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0559125s, 28016 KB] g=30, 246 evaluated, 245 expanded
[t=0.0573968s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0574176s, 28016 KB] g=32, 281 evaluated, 280 expanded
[t=0.0590517s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0590751s, 28016 KB] g=34, 311 evaluated, 310 expanded
[t=0.06041s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0604343s, 28016 KB] g=36, 333 evaluated, 332 expanded
[t=0.0609347s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0609511s, 28016 KB] g=36, 341 evaluated, 340 expanded
[t=0.0620424s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0620565s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0620694s, 28016 KB] g=38, 360 evaluated, 359 expanded
[t=0.062592s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0626058s, 28016 KB] g=40, 369 evaluated, 368 expanded
[t=0.0636929s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0637346s, 28016 KB] g=42, 392 evaluated, 391 expanded
[t=0.0651647s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0652026s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.065221s, 28016 KB] g=44, 412 evaluated, 411 expanded
[t=0.0665395s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.066569s, 28016 KB] g=46, 423 evaluated, 422 expanded
[t=0.0672041s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0672304s, 28016 KB] g=48, 432 evaluated, 431 expanded
[t=0.0681495s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0681812s, 28016 KB] g=50, 441 evaluated, 440 expanded
[t=0.0697056s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.06977s, 28016 KB] g=54, 473 evaluated, 472 expanded
[t=0.0698988s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0699092s, 28016 KB] g=53, 476 evaluated, 475 expanded
[t=0.0700162s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0700268s, 28016 KB] g=54, 478 evaluated, 477 expanded
[t=0.0701364s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0701473s, 28016 KB] g=55, 480 evaluated, 479 expanded
[t=0.0702935s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0703232s, 28016 KB] g=56, 481 evaluated, 480 expanded
[t=0.0717145s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0717696s, 28016 KB] g=58, 495 evaluated, 494 expanded
[t=0.0723305s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0723723s, 28016 KB] g=58, 498 evaluated, 497 expanded
[t=0.0729985s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0730233s, 28016 KB] g=60, 510 evaluated, 509 expanded
[t=0.0735842s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0735957s, 28016 KB] g=60, 523 evaluated, 522 expanded
[t=0.0737316s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0737413s, 28016 KB] g=62, 526 evaluated, 525 expanded
[t=0.0743691s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0743797s, 28016 KB] g=64, 542 evaluated, 541 expanded
[t=0.0749324s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.074947s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0749596s, 28016 KB] g=66, 553 evaluated, 552 expanded
[t=0.0754335s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0754465s, 28016 KB] g=68, 561 evaluated, 560 expanded
[t=0.0761504s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0761639s, 28016 KB] g=70, 573 evaluated, 572 expanded
[t=0.0765958s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0766097s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.076623s, 28016 KB] g=72, 580 evaluated, 579 expanded
[t=0.0789837s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0790118s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0790248s, 28016 KB] g=76, 621 evaluated, 620 expanded
[t=0.0794371s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0794574s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.079471s, 28016 KB] g=78, 628 evaluated, 627 expanded
[t=0.0810524s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0810753s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0810839s, 28016 KB] g=82, 664 evaluated, 663 expanded
[t=0.0813235s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0813324s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0813411s, 28016 KB] g=84, 670 evaluated, 669 expanded
[t=0.0826103s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0826202s, 28016 KB] g=90, 702 evaluated, 701 expanded
[t=0.0828284s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0828451s, 28016 KB] g=92, 707 evaluated, 706 expanded
[t=0.0830081s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 14
[t=0.0830169s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0830248s, 28016 KB] g=94, 711 evaluated, 710 expanded
[t=0.0887557s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0889185s, 28016 KB] g=104, 772 evaluated, 771 expanded
[t=0.0894017s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0894408s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0894497s, 28016 KB] g=106, 780 evaluated, 779 expanded
[t=0.0896712s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0896819s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0896909s, 28016 KB] g=108, 785 evaluated, 784 expanded
[t=0.0902579s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0902701s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0902778s, 28016 KB] g=114, 799 evaluated, 798 expanded
[t=0.10692s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.107002s, 28016 KB] g=128, 1155 evaluated, 1154 expanded
[t=0.107552s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.107563s, 28016 KB] g=134, 1169 evaluated, 1168 expanded
[t=0.108386s, 28016 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.108397s, 28016 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.108406s, 28016 KB] g=148, 1190 evaluated, 1189 expanded
[t=0.210569s, 28416 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.210639s, 28416 KB] g=188, 3671 evaluated, 3670 expanded
[t=0.214059s, 28416 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.214088s, 28416 KB] g=206, 3760 evaluated, 3759 expanded
[t=0.229398s, 28584 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.22947s, 28584 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.229481s, 28584 KB] g=248, 4078 evaluated, 4077 expanded
[t=0.275197s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.275266s, 28848 KB] g=320, 5205 evaluated, 5204 expanded
[t=0.275428s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.275439s, 28848 KB] g=322, 5209 evaluated, 5208 expanded
[t=0.27743s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.277467s, 28848 KB] g=334, 5263 evaluated, 5262 expanded
[t=0.277792s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.277806s, 28848 KB] g=338, 5272 evaluated, 5271 expanded
[t=0.277923s, 28848 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.277932s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.277941s, 28848 KB] g=340, 5275 evaluated, 5274 expanded
[t=0.280874s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.280899s, 28848 KB] g=370, 5376 evaluated, 5375 expanded
[t=0.281148s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.28116s, 28848 KB] g=374, 5385 evaluated, 5384 expanded
[t=0.281245s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.281255s, 28848 KB] g=376, 5388 evaluated, 5387 expanded
[t=0.281596s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.281615s, 28848 KB] g=388, 5404 evaluated, 5403 expanded
[t=0.281704s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.281714s, 28848 KB] g=392, 5408 evaluated, 5407 expanded
[t=0.281734s, 28848 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.281753s, 28848 KB] g=393, 5409 evaluated, 5408 expanded
[t=0.281771s, 28848 KB] Solution found!
[t=0.281798s, 28848 KB] Actual search time: 0.239912s
unstack b13 b22 (1)
put-down b13 (1)
unstack b15 b16 (1)
put-down b15 (1)
unstack b16 b2 (1)
put-down b16 (1)
unstack b2 b25 (1)
stack b2 b4 (1)
pick-up b15 (1)
stack b15 b2 (1)
unstack b22 b18 (1)
put-down b22 (1)
unstack b25 b24 (1)
put-down b25 (1)
unstack b24 b14 (1)
stack b24 b13 (1)
unstack b14 b11 (1)
put-down b14 (1)
unstack b3 b17 (1)
put-down b3 (1)
unstack b17 b23 (1)
put-down b17 (1)
unstack b5 b26 (1)
put-down b5 (1)
unstack b26 b21 (1)
put-down b26 (1)
unstack b21 b9 (1)
stack b21 b23 (1)
unstack b11 b27 (1)
put-down b11 (1)
pick-up b26 (1)
stack b26 b9 (1)
pick-up b27 (1)
stack b27 b26 (1)
pick-up b5 (1)
stack b5 b21 (1)
pick-up b14 (1)
stack b14 b5 (1)
unstack b18 b28 (1)
put-down b18 (1)
unstack b28 b8 (1)
put-down b28 (1)
unstack b8 b20 (1)
stack b8 b11 (1)
pick-up b16 (1)
stack b16 b25 (1)
pick-up b18 (1)
stack b18 b28 (1)
unstack b20 b12 (1)
put-down b20 (1)
unstack b12 b7 (1)
put-down b12 (1)
unstack b7 b10 (1)
stack b7 b22 (1)
unstack b10 b29 (1)
stack b10 b15 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b20 (1)
stack b20 b12 (1)
unstack b29 b1 (1)
stack b29 b20 (1)
unstack b1 b6 (1)
put-down b1 (1)
pick-up b6 (1)
stack b6 b1 (1)
unstack b16 b25 (1)
put-down b16 (1)
pick-up b25 (1)
stack b25 b29 (1)
pick-up b16 (1)
stack b16 b25 (1)
unstack b24 b13 (1)
put-down b24 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b24 (1)
stack b24 b13 (1)
unstack b7 b22 (1)
put-down b7 (1)
pick-up b22 (1)
stack b22 b6 (1)
pick-up b7 (1)
stack b7 b22 (1)
unstack b27 b26 (1)
put-down b27 (1)
unstack b26 b9 (1)
put-down b26 (1)
pick-up b9 (1)
stack b9 b16 (1)
pick-up b26 (1)
stack b26 b9 (1)
pick-up b27 (1)
stack b27 b26 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b2 (1)
put-down b15 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b2 b4 (1)
put-down b2 (1)
unstack b4 b19 (1)
stack b4 b14 (1)
pick-up b19 (1)
stack b19 b8 (1)
unstack b10 b15 (1)
put-down b10 (1)
pick-up b15 (1)
stack b15 b2 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b4 b14 (1)
put-down b4 (1)
unstack b14 b5 (1)
put-down b14 (1)
pick-up b4 (1)
stack b4 b14 (1)
unstack b5 b21 (1)
put-down b5 (1)
unstack b21 b23 (1)
put-down b21 (1)
pick-up b23 (1)
stack b23 b27 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b4 b14 (1)
put-down b4 (1)
pick-up b14 (1)
stack b14 b5 (1)
pick-up b4 (1)
stack b4 b14 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b2 (1)
put-down b15 (1)
pick-up b10 (1)
stack b10 b15 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b10 b15 (1)
put-down b10 (1)
pick-up b15 (1)
stack b15 b2 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b23 b27 (1)
put-down b23 (1)
unstack b27 b26 (1)
put-down b27 (1)
pick-up b23 (1)
stack b23 b27 (1)
unstack b26 b9 (1)
put-down b26 (1)
unstack b9 b16 (1)
put-down b9 (1)
pick-up b26 (1)
stack b26 b9 (1)
unstack b23 b27 (1)
put-down b23 (1)
pick-up b27 (1)
stack b27 b26 (1)
pick-up b23 (1)
stack b23 b27 (1)
unstack b16 b25 (1)
put-down b16 (1)
unstack b25 b29 (1)
put-down b25 (1)
pick-up b16 (1)
stack b16 b25 (1)
unstack b29 b20 (1)
put-down b29 (1)
unstack b20 b12 (1)
put-down b20 (1)
unstack b12 b3 (1)
put-down b12 (1)
pick-up b20 (1)
stack b20 b12 (1)
pick-up b29 (1)
stack b29 b20 (1)
pick-up b3 (1)
stack b3 b19 (1)
unstack b16 b25 (1)
put-down b16 (1)
pick-up b25 (1)
stack b25 b29 (1)
pick-up b16 (1)
stack b16 b25 (1)
unstack b23 b27 (1)
put-down b23 (1)
unstack b27 b26 (1)
put-down b27 (1)
pick-up b23 (1)
stack b23 b27 (1)
unstack b26 b9 (1)
put-down b26 (1)
pick-up b9 (1)
stack b9 b16 (1)
pick-up b26 (1)
stack b26 b9 (1)
unstack b23 b27 (1)
put-down b23 (1)
pick-up b27 (1)
stack b27 b26 (1)
pick-up b23 (1)
stack b23 b27 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b2 (1)
put-down b15 (1)
unstack b2 b4 (1)
put-down b2 (1)
pick-up b15 (1)
stack b15 b2 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b4 b14 (1)
put-down b4 (1)
unstack b14 b5 (1)
put-down b14 (1)
pick-up b4 (1)
stack b4 b14 (1)
unstack b5 b21 (1)
put-down b5 (1)
pick-up b21 (1)
stack b21 b23 (1)
pick-up b5 (1)
stack b5 b21 (1)
unstack b4 b14 (1)
put-down b4 (1)
pick-up b14 (1)
stack b14 b5 (1)
pick-up b4 (1)
stack b4 b14 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b2 (1)
put-down b15 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b4 b14 (1)
put-down b4 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b10 b15 (1)
put-down b10 (1)
pick-up b15 (1)
stack b15 b2 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b14 b5 (1)
put-down b14 (1)
unstack b5 b21 (1)
put-down b5 (1)
pick-up b14 (1)
stack b14 b5 (1)
unstack b21 b23 (1)
put-down b21 (1)
unstack b23 b27 (1)
put-down b23 (1)
pick-up b21 (1)
stack b21 b23 (1)
unstack b14 b5 (1)
put-down b14 (1)
pick-up b5 (1)
stack b5 b21 (1)
pick-up b14 (1)
stack b14 b5 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b2 (1)
put-down b15 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b2 b4 (1)
put-down b2 (1)
pick-up b4 (1)
stack b4 b14 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b10 b15 (1)
put-down b10 (1)
pick-up b15 (1)
stack b15 b2 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b27 b26 (1)
put-down b27 (1)
unstack b26 b9 (1)
put-down b26 (1)
pick-up b27 (1)
stack b27 b26 (1)
unstack b9 b16 (1)
put-down b9 (1)
unstack b16 b25 (1)
put-down b16 (1)
pick-up b9 (1)
stack b9 b16 (1)
unstack b27 b26 (1)
put-down b27 (1)
pick-up b26 (1)
stack b26 b9 (1)
pick-up b27 (1)
stack b27 b26 (1)
unstack b25 b29 (1)
put-down b25 (1)
unstack b29 b20 (1)
put-down b29 (1)
pick-up b25 (1)
stack b25 b29 (1)
unstack b20 b12 (1)
put-down b20 (1)
pick-up b12 (1)
stack b12 b3 (1)
pick-up b20 (1)
stack b20 b12 (1)
unstack b25 b29 (1)
put-down b25 (1)
pick-up b29 (1)
stack b29 b20 (1)
pick-up b25 (1)
stack b25 b29 (1)
unstack b27 b26 (1)
put-down b27 (1)
unstack b26 b9 (1)
put-down b26 (1)
pick-up b27 (1)
stack b27 b26 (1)
unstack b9 b16 (1)
put-down b9 (1)
pick-up b16 (1)
stack b16 b25 (1)
pick-up b9 (1)
stack b9 b16 (1)
unstack b27 b26 (1)
put-down b27 (1)
pick-up b26 (1)
stack b26 b9 (1)
pick-up b27 (1)
stack b27 b26 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b2 (1)
put-down b15 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b2 b4 (1)
put-down b2 (1)
unstack b4 b14 (1)
put-down b4 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b10 b15 (1)
put-down b10 (1)
pick-up b15 (1)
stack b15 b2 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b14 b5 (1)
put-down b14 (1)
unstack b5 b21 (1)
put-down b5 (1)
pick-up b14 (1)
stack b14 b5 (1)
unstack b21 b23 (1)
put-down b21 (1)
pick-up b23 (1)
stack b23 b27 (1)
pick-up b21 (1)
stack b21 b23 (1)
unstack b14 b5 (1)
put-down b14 (1)
pick-up b5 (1)
stack b5 b21 (1)
pick-up b14 (1)
stack b14 b5 (1)
unstack b10 b15 (1)
put-down b10 (1)
unstack b15 b2 (1)
put-down b15 (1)
pick-up b10 (1)
stack b10 b15 (1)
unstack b2 b4 (1)
put-down b2 (1)
pick-up b4 (1)
stack b4 b14 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b10 b15 (1)
put-down b10 (1)
pick-up b15 (1)
stack b15 b2 (1)
pick-up b10 (1)
stack b10 b15 (1)
[t=0.281809s, 28848 KB] Plan length: 394 step(s).
[t=0.281809s, 28848 KB] Plan cost: 394
[t=0.281809s, 28848 KB] Expanded 5409 state(s).
[t=0.281809s, 28848 KB] Reopened 0 state(s).
[t=0.281809s, 28848 KB] Evaluated 5410 state(s).
[t=0.281809s, 28848 KB] Evaluations: 10820
[t=0.281809s, 28848 KB] Generated 53065 state(s).
[t=0.281809s, 28848 KB] Dead ends: 0 state(s).
[t=0.281809s, 28848 KB] Number of registered states: 5410
[t=0.281809s, 28848 KB] Int hash set load factor: 5410/8192 = 0.6604
[t=0.281809s, 28848 KB] Int hash set resizes: 13
[t=0.281809s, 28848 KB] Search time: 0.239958s
[t=0.281809s, 28848 KB] Total time: 0.281809s
Solution found.
Peak memory: 28848 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.49s
