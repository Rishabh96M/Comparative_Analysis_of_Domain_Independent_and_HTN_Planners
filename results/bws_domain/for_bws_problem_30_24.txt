INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_30/bws_problem_30_24.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.018s wall-clock]
2912 relevant atoms
1950 auxiliary atoms
4862 final queue length
8528 total queue pushes
Completing instantiation... [0.030s CPU, 0.031s wall-clock]
Instantiating: [0.050s CPU, 0.050s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.001s wall-clock]
Choosing groups...
31 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.011s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.050s CPU, 0.049s wall-clock]
2670 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
60 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.023s wall-clock]
Reordering and filtering variables...
61 of 61 variables necessary.
31 of 61 mutex groups necessary.
1800 of 1800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.012s wall-clock]
Translator variables: 61
Translator derived variables: 0
Translator facts: 992
Translator goal facts: 25
Translator mutex groups: 31
Translator total mutex groups size: 961
Translator operators: 1800
Translator axioms: 0
Translator task size: 15449
Translator peak memory: 41336 KB
Writing output... [0.010s CPU, 0.009s wall-clock]
Done! [0.160s CPU, 0.160s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.5589e-05s, 24488 KB] reading input...
[t=0.00588255s, 26364 KB] done reading input!
[t=0.00712181s, 26760 KB] Initializing landmark count heuristic...
[t=0.00717892s, 26760 KB] Generating landmark graph...
[t=0.00728354s, 26892 KB] Building a landmark graph with reasonable orders.
[t=0.00737835s, 27024 KB] Initializing Exploration...
[t=0.00790293s, 27316 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.033708s, 28112 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0338445s, 28112 KB] Landmarks generation time: 0.0265701s
[t=0.0338689s, 28112 KB] Discovered 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0338872s, 28112 KB] 526 edges
[t=0.0338973s, 28112 KB] approx. reasonable orders
[t=0.0417905s, 28112 KB] approx. obedient reasonable orders
[t=0.0423466s, 28112 KB] Removed 2 reasonable or obedient reasonable orders
[t=0.0423613s, 28112 KB] Landmarks generation time: 0.0351777s
[t=0.0423723s, 28112 KB] Discovered 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.042381s, 28112 KB] 636 edges
[t=0.0423903s, 28112 KB] Landmark graph generation time: 0.0352186s
[t=0.0424009s, 28112 KB] Landmark graph contains 133 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0424126s, 28112 KB] Landmark graph contains 636 orderings.
[t=0.0431252s, 28140 KB] Simplifying 7140 unary operators... done! [5400 unary operators]
[t=0.0448629s, 28272 KB] time to simplify: 0.00184537s
[t=0.0450691s, 28272 KB] Initializing additive heuristic...
[t=0.0450871s, 28272 KB] Initializing FF heuristic...
[t=0.0451455s, 28272 KB] Building successor generator...done!
[t=0.0454605s, 28272 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0454698s, 28272 KB] time for successor generation creation: 0.000289013s
[t=0.0454839s, 28272 KB] Variables: 61
[t=0.0454918s, 28272 KB] FactPairs: 992
[t=0.0455009s, 28272 KB] Bytes per state: 24
[t=0.0456084s, 28272 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0456491s, 28272 KB] 59 initial landmarks, 25 goal landmarks
[t=0.045723s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0457376s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0457463s, 28272 KB] g=0, 1 evaluated, 0 expanded
[t=0.0457603s, 28272 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0457687s, 28272 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0458229s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0458314s, 28272 KB] g=1, 2 evaluated, 1 expanded
[t=0.046366s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0463769s, 28272 KB] g=4, 15 evaluated, 14 expanded
[t=0.0466658s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0466752s, 28272 KB] g=2, 22 evaluated, 21 expanded
[t=0.0469827s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0469943s, 28272 KB] g=6, 29 evaluated, 28 expanded
[t=0.0478802s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0478927s, 28272 KB] g=8, 50 evaluated, 49 expanded
[t=0.0487201s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0487325s, 28272 KB] g=10, 70 evaluated, 69 expanded
[t=0.0491083s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0491193s, 28272 KB] g=11, 79 evaluated, 78 expanded
[t=0.0491738s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0491833s, 28272 KB] g=8, 80 evaluated, 79 expanded
[t=0.0497883s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0497992s, 28272 KB] g=10, 95 evaluated, 94 expanded
[t=0.0500945s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0501059s, 28272 KB] g=14, 102 evaluated, 101 expanded
[t=0.0503652s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0503753s, 28272 KB] g=12, 108 evaluated, 107 expanded
[t=0.0511705s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.0511823s, 28272 KB] g=16, 127 evaluated, 126 expanded
[t=0.0525213s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.0525384s, 28272 KB] g=18, 158 evaluated, 157 expanded
[t=0.0527692s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0527797s, 28272 KB] g=16, 163 evaluated, 162 expanded
[t=0.0533758s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0533869s, 28272 KB] g=18, 177 evaluated, 176 expanded
[t=0.0539303s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0539415s, 28272 KB] g=20, 190 evaluated, 189 expanded
[t=0.0540422s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0540525s, 28272 KB] g=20, 192 evaluated, 191 expanded
[t=0.0548339s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0548459s, 28272 KB] g=22, 210 evaluated, 209 expanded
[t=0.0553243s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0553348s, 28272 KB] g=22, 221 evaluated, 220 expanded
[t=0.0554379s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.055448s, 28272 KB] g=24, 223 evaluated, 222 expanded
[t=0.056041s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0560537s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0560641s, 28272 KB] g=26, 237 evaluated, 236 expanded
[t=0.0563127s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0563222s, 28272 KB] g=28, 243 evaluated, 242 expanded
[t=0.0566526s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0566669s, 28272 KB] g=30, 251 evaluated, 250 expanded
[t=0.0570913s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0571028s, 28272 KB] g=32, 261 evaluated, 260 expanded
[t=0.0577469s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0577569s, 28272 KB] g=34, 277 evaluated, 276 expanded
[t=0.0583739s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0583861s, 28272 KB] g=36, 292 evaluated, 291 expanded
[t=0.059024s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0590347s, 28272 KB] g=34, 308 evaluated, 307 expanded
[t=0.0592458s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0592556s, 28272 KB] g=38, 313 evaluated, 312 expanded
[t=0.0600408s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0600534s, 28272 KB] g=40, 332 evaluated, 331 expanded
[t=0.0610885s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0611019s, 28272 KB] g=42, 357 evaluated, 356 expanded
[t=0.0617196s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0617383s, 28272 KB] g=40, 372 evaluated, 371 expanded
[t=0.0622117s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0622221s, 28272 KB] g=42, 383 evaluated, 382 expanded
[t=0.0622813s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0622916s, 28272 KB] g=44, 384 evaluated, 383 expanded
[t=0.0632722s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0632877s, 28272 KB] g=46, 407 evaluated, 406 expanded
[t=0.0643886s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0644012s, 28272 KB] g=48, 434 evaluated, 433 expanded
[t=0.0651249s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0651361s, 28272 KB] g=48, 452 evaluated, 451 expanded
[t=0.0655927s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0656087s, 28272 KB] g=50, 463 evaluated, 462 expanded
[t=0.0657152s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.065727s, 28272 KB] g=50, 465 evaluated, 464 expanded
[t=0.0666768s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0666901s, 28272 KB] g=52, 488 evaluated, 487 expanded
[t=0.0678964s, 28272 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0679215s, 28272 KB] g=54, 516 evaluated, 515 expanded
[t=0.0684138s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0684267s, 28272 KB] g=56, 528 evaluated, 527 expanded
[t=0.0692289s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0692433s, 28272 KB] g=58, 547 evaluated, 546 expanded
[t=0.0698238s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.069835s, 28272 KB] g=60, 561 evaluated, 560 expanded
[t=0.0706098s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0706284s, 28272 KB] g=64, 580 evaluated, 579 expanded
[t=0.0712899s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0713038s, 28272 KB] g=66, 596 evaluated, 595 expanded
[t=0.0719014s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0719196s, 28272 KB] g=66, 610 evaluated, 609 expanded
[t=0.0726825s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.072706s, 28272 KB] g=68, 629 evaluated, 628 expanded
[t=0.0734547s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0734674s, 28272 KB] g=70, 648 evaluated, 647 expanded
[t=0.0755088s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0755484s, 28272 KB] g=74, 700 evaluated, 699 expanded
[t=0.0784144s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0784319s, 28272 KB] g=80, 771 evaluated, 770 expanded
[t=0.0805079s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0805245s, 28272 KB] g=86, 823 evaluated, 822 expanded
[t=0.0819675s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0819805s, 28272 KB] g=92, 859 evaluated, 858 expanded
[t=0.0960752s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0961362s, 28272 KB] g=112, 1209 evaluated, 1208 expanded
[t=0.0965574s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.096571s, 28272 KB] g=114, 1218 evaluated, 1217 expanded
[t=0.0970551s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0970678s, 28272 KB] g=116, 1230 evaluated, 1229 expanded
[t=0.0974751s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0974857s, 28272 KB] g=118, 1241 evaluated, 1240 expanded
[t=0.099177s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.0991973s, 28272 KB] g=124, 1286 evaluated, 1285 expanded
[t=0.100183s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.100195s, 28272 KB] g=128, 1311 evaluated, 1310 expanded
[t=0.10047s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.10048s, 28272 KB] g=130, 1318 evaluated, 1317 expanded
[t=0.102907s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.102931s, 28272 KB] g=138, 1382 evaluated, 1381 expanded
[t=0.10313s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.103142s, 28272 KB] g=140, 1387 evaluated, 1386 expanded
[t=0.107834s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.107875s, 28272 KB] g=162, 1523 evaluated, 1522 expanded
[t=0.108553s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.108566s, 28272 KB] g=166, 1542 evaluated, 1541 expanded
[t=0.108701s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.108711s, 28272 KB] g=168, 1546 evaluated, 1545 expanded
[t=0.1094s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.109411s, 28272 KB] g=176, 1568 evaluated, 1567 expanded
[t=0.109614s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.109624s, 28272 KB] g=180, 1575 evaluated, 1574 expanded
[t=0.109686s, 28272 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.109695s, 28272 KB] g=181, 1577 evaluated, 1576 expanded
[t=0.109755s, 28272 KB] Solution found!
[t=0.10977s, 28272 KB] Actual search time: 0.0641193s
unstack b11 b2 (1)
put-down b11 (1)
unstack b18 b24 (1)
put-down b18 (1)
unstack b2 b12 (1)
stack b2 b24 (1)
unstack b12 b3 (1)
stack b12 b9 (1)
pick-up b18 (1)
stack b18 b12 (1)
unstack b20 b22 (1)
stack b20 b18 (1)
unstack b22 b27 (1)
put-down b22 (1)
unstack b25 b21 (1)
stack b25 b27 (1)
unstack b21 b19 (1)
put-down b21 (1)
unstack b19 b28 (1)
stack b19 b3 (1)
pick-up b28 (1)
stack b28 b19 (1)
unstack b7 b4 (1)
stack b7 b28 (1)
unstack b4 b8 (1)
put-down b4 (1)
unstack b2 b24 (1)
put-down b2 (1)
unstack b20 b18 (1)
put-down b20 (1)
unstack b18 b12 (1)
put-down b18 (1)
unstack b12 b9 (1)
put-down b12 (1)
unstack b24 b16 (1)
put-down b24 (1)
unstack b16 b6 (1)
put-down b16 (1)
unstack b25 b27 (1)
put-down b25 (1)
unstack b27 b26 (1)
put-down b27 (1)
unstack b26 b15 (1)
put-down b26 (1)
pick-up b15 (1)
stack b15 b7 (1)
unstack b9 b1 (1)
stack b9 b21 (1)
pick-up b12 (1)
stack b12 b9 (1)
pick-up b18 (1)
stack b18 b12 (1)
pick-up b20 (1)
stack b20 b18 (1)
pick-up b22 (1)
stack b22 b16 (1)
pick-up b2 (1)
stack b2 b24 (1)
pick-up b25 (1)
stack b25 b27 (1)
unstack b1 b23 (1)
put-down b1 (1)
unstack b23 b5 (1)
stack b23 b20 (1)
unstack b5 b10 (1)
stack b5 b23 (1)
pick-up b11 (1)
stack b11 b5 (1)
unstack b10 b30 (1)
put-down b10 (1)
pick-up b26 (1)
stack b26 b30 (1)
pick-up b6 (1)
stack b6 b10 (1)
unstack b2 b24 (1)
put-down b2 (1)
pick-up b24 (1)
stack b24 b26 (1)
pick-up b2 (1)
stack b2 b24 (1)
unstack b22 b16 (1)
put-down b22 (1)
pick-up b16 (1)
stack b16 b2 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b25 b27 (1)
put-down b25 (1)
pick-up b27 (1)
stack b27 b6 (1)
pick-up b25 (1)
stack b25 b27 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b2 (1)
put-down b16 (1)
unstack b2 b24 (1)
put-down b2 (1)
pick-up b16 (1)
stack b16 b2 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b24 b26 (1)
put-down b24 (1)
unstack b26 b30 (1)
put-down b26 (1)
pick-up b24 (1)
stack b24 b26 (1)
unstack b30 b13 (1)
stack b30 b8 (1)
unstack b13 b17 (1)
stack b13 b1 (1)
unstack b17 b14 (1)
stack b17 b4 (1)
unstack b14 b29 (1)
put-down b14 (1)
pick-up b29 (1)
stack b29 b25 (1)
unstack b13 b1 (1)
put-down b13 (1)
pick-up b1 (1)
stack b1 b29 (1)
pick-up b13 (1)
stack b13 b1 (1)
unstack b24 b26 (1)
put-down b24 (1)
pick-up b26 (1)
stack b26 b30 (1)
pick-up b24 (1)
stack b24 b26 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b2 (1)
put-down b16 (1)
pick-up b2 (1)
stack b2 b24 (1)
pick-up b16 (1)
stack b16 b2 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b13 b1 (1)
put-down b13 (1)
unstack b1 b29 (1)
put-down b1 (1)
unstack b29 b25 (1)
put-down b29 (1)
pick-up b1 (1)
stack b1 b29 (1)
pick-up b13 (1)
stack b13 b1 (1)
unstack b25 b27 (1)
put-down b25 (1)
unstack b27 b6 (1)
put-down b27 (1)
pick-up b25 (1)
stack b25 b27 (1)
unstack b6 b10 (1)
put-down b6 (1)
pick-up b10 (1)
stack b10 b17 (1)
pick-up b6 (1)
stack b6 b10 (1)
unstack b25 b27 (1)
put-down b25 (1)
pick-up b27 (1)
stack b27 b6 (1)
pick-up b25 (1)
stack b25 b27 (1)
unstack b13 b1 (1)
put-down b13 (1)
unstack b1 b29 (1)
put-down b1 (1)
pick-up b13 (1)
stack b13 b1 (1)
pick-up b29 (1)
stack b29 b25 (1)
unstack b13 b1 (1)
put-down b13 (1)
pick-up b1 (1)
stack b1 b29 (1)
pick-up b13 (1)
stack b13 b1 (1)
[t=0.109781s, 28272 KB] Plan length: 182 step(s).
[t=0.109781s, 28272 KB] Plan cost: 182
[t=0.109781s, 28272 KB] Expanded 1578 state(s).
[t=0.109781s, 28272 KB] Reopened 0 state(s).
[t=0.109781s, 28272 KB] Evaluated 1579 state(s).
[t=0.109781s, 28272 KB] Evaluations: 3158
[t=0.109781s, 28272 KB] Generated 19228 state(s).
[t=0.109781s, 28272 KB] Dead ends: 0 state(s).
[t=0.109781s, 28272 KB] Number of registered states: 1579
[t=0.109781s, 28272 KB] Int hash set load factor: 1579/2048 = 0.770996
[t=0.109781s, 28272 KB] Int hash set resizes: 11
[t=0.109781s, 28272 KB] Search time: 0.0641731s
[t=0.109781s, 28272 KB] Total time: 0.109781s
Solution found.
Peak memory: 28272 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.32s
