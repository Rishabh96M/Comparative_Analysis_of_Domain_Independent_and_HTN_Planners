INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_24/bws_problem_24_63.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.011s wall-clock]
1898 relevant atoms
1272 auxiliary atoms
3170 final queue length
5525 total queue pushes
Completing instantiation... [0.020s CPU, 0.020s wall-clock]
Instantiating: [0.030s CPU, 0.033s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
25 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.029s wall-clock]
1704 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
48 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.020s wall-clock]
Reordering and filtering variables...
49 of 49 variables necessary.
25 of 49 mutex groups necessary.
1152 of 1152 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.008s wall-clock]
Translator variables: 49
Translator derived variables: 0
Translator facts: 650
Translator goal facts: 20
Translator mutex groups: 25
Translator total mutex groups size: 625
Translator operators: 1152
Translator axioms: 0
Translator task size: 9912
Translator peak memory: 37880 KB
Writing output... [0.010s CPU, 0.006s wall-clock]
Done! [0.110s CPU, 0.107s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.8789e-05s, 24488 KB] reading input...
[t=0.00353555s, 25532 KB] done reading input!
[t=0.00458328s, 25928 KB] Initializing landmark count heuristic...
[t=0.00463076s, 25928 KB] Generating landmark graph...
[t=0.00470883s, 25928 KB] Building a landmark graph with reasonable orders.
[t=0.00478175s, 26060 KB] Initializing Exploration...
[t=0.00514627s, 26388 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0183828s, 27048 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.018459s, 27048 KB] Landmarks generation time: 0.0137502s
[t=0.0184723s, 27048 KB] Discovered 106 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0184887s, 27048 KB] 741 edges
[t=0.0184983s, 27048 KB] approx. reasonable orders
[t=0.0185064s, 27048 KB] approx. obedient reasonable orders
[t=0.0185502s, 27048 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0185591s, 27048 KB] Landmarks generation time: 0.0139253s
[t=0.0185681s, 27048 KB] Discovered 106 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0185763s, 27048 KB] 741 edges
[t=0.0185845s, 27048 KB] Landmark graph generation time: 0.0139603s
[t=0.0185926s, 27048 KB] Landmark graph contains 106 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0186005s, 27048 KB] Landmark graph contains 741 orderings.
[t=0.018984s, 27048 KB] Simplifying 4560 unary operators... done! [3456 unary operators]
[t=0.0200931s, 27048 KB] time to simplify: 0.00120326s
[t=0.0202749s, 27048 KB] Initializing additive heuristic...
[t=0.0202922s, 27048 KB] Initializing FF heuristic...
[t=0.0203521s, 27048 KB] Building successor generator...done!
[t=0.0205864s, 27048 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0205953s, 27048 KB] time for successor generation creation: 0.000199227s
[t=0.0206233s, 27048 KB] Variables: 49
[t=0.020632s, 27048 KB] FactPairs: 650
[t=0.020641s, 27048 KB] Bytes per state: 20
[t=0.0207634s, 27048 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.020799s, 27048 KB] 49 initial landmarks, 20 goal landmarks
[t=0.0208717s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0208822s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0208926s, 27048 KB] g=0, 1 evaluated, 0 expanded
[t=0.0209067s, 27048 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0209161s, 27048 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0210273s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0210367s, 27048 KB] g=1, 4 evaluated, 3 expanded
[t=0.021233s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0212547s, 27048 KB] g=3, 10 evaluated, 9 expanded
[t=0.0214786s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0214898s, 27048 KB] g=5, 18 evaluated, 17 expanded
[t=0.0217183s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0217286s, 27048 KB] g=8, 26 evaluated, 25 expanded
[t=0.0217702s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0217789s, 27048 KB] g=6, 27 evaluated, 26 expanded
[t=0.0219443s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.021953s, 27048 KB] g=9, 33 evaluated, 32 expanded
[t=0.0220137s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0220226s, 27048 KB] g=10, 35 evaluated, 34 expanded
[t=0.0221635s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0221722s, 27048 KB] g=8, 40 evaluated, 39 expanded
[t=0.0224339s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.022443s, 27048 KB] g=12, 50 evaluated, 49 expanded
[t=0.0227316s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0227417s, 27048 KB] g=14, 61 evaluated, 60 expanded
[t=0.0229888s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0230061s, 27048 KB] g=16, 70 evaluated, 69 expanded
[t=0.0232875s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0233165s, 27048 KB] g=18, 80 evaluated, 79 expanded
[t=0.0236214s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0236328s, 27048 KB] g=16, 91 evaluated, 90 expanded
[t=0.0238495s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0238599s, 27048 KB] g=20, 99 evaluated, 98 expanded
[t=0.0242138s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.024225s, 27048 KB] g=22, 112 evaluated, 111 expanded
[t=0.0244914s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0245015s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0245091s, 27048 KB] g=24, 122 evaluated, 121 expanded
[t=0.0251406s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0251514s, 27048 KB] g=29, 145 evaluated, 144 expanded
[t=0.0252163s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0252257s, 27048 KB] g=30, 147 evaluated, 146 expanded
[t=0.0255602s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0255732s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0255814s, 27048 KB] g=32, 159 evaluated, 158 expanded
[t=0.0258859s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0258984s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0259146s, 27048 KB] g=34, 170 evaluated, 169 expanded
[t=0.0262145s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.026229s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0262368s, 27048 KB] g=36, 180 evaluated, 179 expanded
[t=0.0266552s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0266724s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0266806s, 27048 KB] g=38, 191 evaluated, 190 expanded
[t=0.0270033s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0270128s, 27048 KB] g=40, 202 evaluated, 201 expanded
[t=0.0271133s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0271226s, 27048 KB] g=40, 205 evaluated, 204 expanded
[t=0.0276273s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0276384s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0276473s, 27048 KB] g=42, 222 evaluated, 221 expanded
[t=0.0278856s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0278949s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0279028s, 27048 KB] g=44, 230 evaluated, 229 expanded
[t=0.028276s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0282867s, 27048 KB] g=47, 243 evaluated, 242 expanded
[t=0.0287998s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0288107s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0288198s, 27048 KB] g=50, 260 evaluated, 259 expanded
[t=0.0291169s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0291258s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.029136s, 27048 KB] g=52, 270 evaluated, 269 expanded
[t=0.0293966s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0294054s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0294131s, 27048 KB] g=54, 279 evaluated, 278 expanded
[t=0.0296376s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 17
[t=0.0296461s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0296537s, 27048 KB] g=56, 287 evaluated, 286 expanded
[t=0.0298757s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0298842s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.029892s, 27048 KB] g=58, 295 evaluated, 294 expanded
[t=0.0303107s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0303197s, 27048 KB] g=62, 310 evaluated, 309 expanded
[t=0.0305505s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0305596s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0305676s, 27048 KB] g=64, 318 evaluated, 317 expanded
[t=0.0307657s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0307746s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0307827s, 27048 KB] g=66, 325 evaluated, 324 expanded
[t=0.0309525s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0309612s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0309689s, 27048 KB] g=68, 331 evaluated, 330 expanded
[t=0.0311396s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0311481s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0311563s, 27048 KB] g=70, 337 evaluated, 336 expanded
[t=0.0312849s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0312949s, 27048 KB] g=70, 341 evaluated, 340 expanded
[t=0.0313928s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0314018s, 27048 KB] g=71, 344 evaluated, 343 expanded
[t=0.0314393s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.031448s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0314559s, 27048 KB] g=72, 345 evaluated, 344 expanded
[t=0.0316377s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0316468s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0316546s, 27048 KB] g=76, 351 evaluated, 350 expanded
[t=0.0317754s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0317889s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0318018s, 27048 KB] g=78, 355 evaluated, 354 expanded
[t=0.0332828s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0332955s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0333034s, 27048 KB] g=90, 409 evaluated, 408 expanded
[t=0.0335516s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0335605s, 27048 KB] g=94, 418 evaluated, 417 expanded
[t=0.0336476s, 27048 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0336562s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0336638s, 27048 KB] g=96, 421 evaluated, 420 expanded
[t=0.0365083s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0365364s, 27048 KB] g=126, 534 evaluated, 533 expanded
[t=0.0367812s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0367926s, 27048 KB] g=130, 544 evaluated, 543 expanded
[t=0.0368686s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.0368778s, 27048 KB] g=132, 547 evaluated, 546 expanded
[t=0.037236s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0372464s, 27048 KB] g=144, 565 evaluated, 564 expanded
[t=0.0373136s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0373226s, 27048 KB] g=148, 569 evaluated, 568 expanded
[t=0.037342s, 27048 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0373503s, 27048 KB] g=149, 570 evaluated, 569 expanded
[t=0.0373653s, 27048 KB] Solution found!
[t=0.037377s, 27048 KB] Actual search time: 0.0165749s
unstack b17 b4 (1)
put-down b17 (1)
unstack b4 b20 (1)
put-down b4 (1)
unstack b9 b19 (1)
put-down b9 (1)
unstack b19 b22 (1)
put-down b19 (1)
unstack b22 b5 (1)
stack b22 b17 (1)
unstack b20 b16 (1)
put-down b20 (1)
unstack b16 b7 (1)
put-down b16 (1)
unstack b7 b8 (1)
put-down b7 (1)
unstack b8 b3 (1)
put-down b8 (1)
unstack b3 b1 (1)
put-down b3 (1)
pick-up b19 (1)
stack b19 b1 (1)
pick-up b6 (1)
stack b6 b7 (1)
unstack b19 b1 (1)
put-down b19 (1)
unstack b1 b23 (1)
put-down b1 (1)
unstack b23 b14 (1)
stack b23 b20 (1)
pick-up b1 (1)
stack b1 b23 (1)
unstack b14 b15 (1)
stack b14 b19 (1)
unstack b15 b13 (1)
put-down b15 (1)
unstack b13 b21 (1)
put-down b13 (1)
pick-up b3 (1)
stack b3 b21 (1)
pick-up b8 (1)
stack b8 b14 (1)
pick-up b9 (1)
stack b9 b13 (1)
unstack b3 b21 (1)
put-down b3 (1)
unstack b21 b18 (1)
put-down b21 (1)
unstack b18 b10 (1)
stack b18 b15 (1)
unstack b10 b2 (1)
stack b10 b8 (1)
pick-up b21 (1)
stack b21 b10 (1)
pick-up b16 (1)
stack b16 b18 (1)
pick-up b3 (1)
stack b3 b21 (1)
unstack b2 b12 (1)
put-down b2 (1)
unstack b12 b11 (1)
put-down b12 (1)
unstack b11 b24 (1)
stack b11 b3 (1)
pick-up b4 (1)
stack b4 b11 (1)
pick-up b2 (1)
stack b2 b12 (1)
pick-up b24 (1)
stack b24 b6 (1)
pick-up b5 (1)
stack b5 b24 (1)
unstack b22 b17 (1)
put-down b22 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b22 (1)
stack b22 b17 (1)
unstack b5 b24 (1)
put-down b5 (1)
unstack b24 b6 (1)
put-down b24 (1)
pick-up b5 (1)
stack b5 b24 (1)
unstack b6 b7 (1)
put-down b6 (1)
pick-up b7 (1)
stack b7 b2 (1)
pick-up b6 (1)
stack b6 b7 (1)
unstack b5 b24 (1)
put-down b5 (1)
pick-up b24 (1)
stack b24 b6 (1)
pick-up b5 (1)
stack b5 b24 (1)
unstack b4 b11 (1)
put-down b4 (1)
unstack b11 b3 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b11 (1)
unstack b3 b21 (1)
put-down b3 (1)
unstack b21 b10 (1)
put-down b21 (1)
pick-up b3 (1)
stack b3 b21 (1)
unstack b4 b11 (1)
put-down b4 (1)
pick-up b11 (1)
stack b11 b3 (1)
pick-up b4 (1)
stack b4 b11 (1)
unstack b10 b8 (1)
put-down b10 (1)
unstack b8 b14 (1)
put-down b8 (1)
pick-up b10 (1)
stack b10 b8 (1)
unstack b14 b19 (1)
put-down b14 (1)
pick-up b19 (1)
stack b19 b1 (1)
pick-up b14 (1)
stack b14 b19 (1)
unstack b10 b8 (1)
put-down b10 (1)
pick-up b8 (1)
stack b8 b14 (1)
pick-up b10 (1)
stack b10 b8 (1)
unstack b4 b11 (1)
put-down b4 (1)
unstack b11 b3 (1)
put-down b11 (1)
pick-up b4 (1)
stack b4 b11 (1)
unstack b3 b21 (1)
put-down b3 (1)
pick-up b21 (1)
stack b21 b10 (1)
pick-up b3 (1)
stack b3 b21 (1)
unstack b4 b11 (1)
put-down b4 (1)
pick-up b11 (1)
stack b11 b3 (1)
pick-up b4 (1)
stack b4 b11 (1)
[t=0.0373861s, 27048 KB] Plan length: 150 step(s).
[t=0.0373861s, 27048 KB] Plan cost: 150
[t=0.0373861s, 27048 KB] Expanded 570 state(s).
[t=0.0373861s, 27048 KB] Reopened 0 state(s).
[t=0.0373861s, 27048 KB] Evaluated 571 state(s).
[t=0.0373861s, 27048 KB] Evaluations: 1142
[t=0.0373861s, 27048 KB] Generated 5311 state(s).
[t=0.0373861s, 27048 KB] Dead ends: 0 state(s).
[t=0.0373861s, 27048 KB] Number of registered states: 571
[t=0.0373861s, 27048 KB] Int hash set load factor: 571/1024 = 0.557617
[t=0.0373861s, 27048 KB] Int hash set resizes: 10
[t=0.0373861s, 27048 KB] Search time: 0.0166232s
[t=0.0373861s, 27048 KB] Total time: 0.0373861s
Solution found.
Peak memory: 27048 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.19s
