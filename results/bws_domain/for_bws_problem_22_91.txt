INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_22/bws_problem_22_91.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.010s wall-clock]
1608 relevant atoms
1078 auxiliary atoms
2686 final queue length
4668 total queue pushes
Completing instantiation... [0.010s CPU, 0.018s wall-clock]
Instantiating: [0.020s CPU, 0.029s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
23 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.006s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.024s wall-clock]
1430 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
44 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.013s wall-clock]
Reordering and filtering variables...
45 of 45 variables necessary.
23 of 45 mutex groups necessary.
968 of 968 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 45
Translator derived variables: 0
Translator facts: 552
Translator goal facts: 18
Translator mutex groups: 23
Translator total mutex groups size: 529
Translator operators: 968
Translator axioms: 0
Translator task size: 8338
Translator peak memory: 36972 KB
Writing output... [0.010s CPU, 0.005s wall-clock]
Done! [0.080s CPU, 0.089s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.3952e-05s, 24488 KB] reading input...
[t=0.00296076s, 25340 KB] done reading input!
[t=0.00420871s, 25736 KB] Initializing landmark count heuristic...
[t=0.00424359s, 25736 KB] Generating landmark graph...
[t=0.00430847s, 25736 KB] Building a landmark graph with reasonable orders.
[t=0.00436748s, 25736 KB] Initializing Exploration...
[t=0.00465251s, 26000 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0157179s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0158068s, 26528 KB] Landmarks generation time: 0.0114992s
[t=0.0158214s, 26528 KB] Discovered 99 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0158398s, 26528 KB] 622 edges
[t=0.0158504s, 26528 KB] approx. reasonable orders
[t=0.0174209s, 26528 KB] approx. obedient reasonable orders
[t=0.0174572s, 26528 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0174674s, 26528 KB] Landmarks generation time: 0.0132179s
[t=0.0174773s, 26528 KB] Discovered 99 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0174858s, 26528 KB] 650 edges
[t=0.0174951s, 26528 KB] Landmark graph generation time: 0.0132593s
[t=0.0175047s, 26528 KB] Landmark graph contains 99 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0175134s, 26528 KB] Landmark graph contains 650 orderings.
[t=0.0179023s, 26528 KB] Simplifying 3828 unary operators... done! [2904 unary operators]
[t=0.0188509s, 26528 KB] time to simplify: 0.00101674s
[t=0.0189805s, 26528 KB] Initializing additive heuristic...
[t=0.0189953s, 26528 KB] Initializing FF heuristic...
[t=0.0190627s, 26528 KB] Building successor generator...done!
[t=0.0193073s, 26528 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0193159s, 26528 KB] time for successor generation creation: 0.000207533s
[t=0.0193388s, 26528 KB] Variables: 45
[t=0.0193477s, 26528 KB] FactPairs: 552
[t=0.0193561s, 26528 KB] Bytes per state: 20
[t=0.0196024s, 26528 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0196521s, 26528 KB] 45 initial landmarks, 18 goal landmarks
[t=0.01976s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0197724s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.019781s, 26528 KB] g=0, 1 evaluated, 0 expanded
[t=0.0197975s, 26528 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0198067s, 26528 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0199066s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0199167s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0199257s, 26528 KB] g=2, 4 evaluated, 3 expanded
[t=0.0199851s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0199943s, 26528 KB] g=3, 6 evaluated, 5 expanded
[t=0.0201289s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0201388s, 26528 KB] g=5, 11 evaluated, 10 expanded
[t=0.0201729s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0201819s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.02019s, 26528 KB] g=6, 12 evaluated, 11 expanded
[t=0.0205665s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0205758s, 26528 KB] g=9, 27 evaluated, 26 expanded
[t=0.020734s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0207436s, 26528 KB] g=12, 33 evaluated, 32 expanded
[t=0.0210455s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0210559s, 26528 KB] g=12, 45 evaluated, 44 expanded
[t=0.0211936s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0212434s, 26528 KB] g=14, 50 evaluated, 49 expanded
[t=0.021459s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0214698s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0214849s, 26528 KB] g=16, 56 evaluated, 55 expanded
[t=0.0216738s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0216836s, 26528 KB] g=18, 63 evaluated, 62 expanded
[t=0.0218761s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.021886s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0218948s, 26528 KB] g=20, 70 evaluated, 69 expanded
[t=0.0220834s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0220946s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0221031s, 26528 KB] g=22, 77 evaluated, 76 expanded
[t=0.0223173s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 39
[t=0.0223264s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0223346s, 26528 KB] g=24, 85 evaluated, 84 expanded
[t=0.0225501s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0225594s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0225675s, 26528 KB] g=26, 93 evaluated, 92 expanded
[t=0.0227662s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0227778s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0227866s, 26528 KB] g=28, 100 evaluated, 99 expanded
[t=0.0228786s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0228913s, 26528 KB] g=29, 103 evaluated, 102 expanded
[t=0.0231071s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.023116s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0231241s, 26528 KB] g=30, 111 evaluated, 110 expanded
[t=0.0231852s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0231944s, 26528 KB] g=31, 113 evaluated, 112 expanded
[t=0.0234535s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0234621s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0234705s, 26528 KB] g=34, 123 evaluated, 122 expanded
[t=0.0236611s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0236701s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0236781s, 26528 KB] g=36, 130 evaluated, 129 expanded
[t=0.0238838s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.023893s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0239014s, 26528 KB] g=38, 138 evaluated, 137 expanded
[t=0.0240824s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0240911s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.024099s, 26528 KB] g=40, 145 evaluated, 144 expanded
[t=0.0246965s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0247066s, 26528 KB] g=45, 168 evaluated, 167 expanded
[t=0.0247663s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0247795s, 26528 KB] g=46, 170 evaluated, 169 expanded
[t=0.025061s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0250709s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0250789s, 26528 KB] g=48, 181 evaluated, 180 expanded
[t=0.0252793s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0252883s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0252966s, 26528 KB] g=50, 189 evaluated, 188 expanded
[t=0.0254479s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0254564s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0254642s, 26528 KB] g=52, 195 evaluated, 194 expanded
[t=0.0256188s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0256279s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0256359s, 26528 KB] g=54, 201 evaluated, 200 expanded
[t=0.025864s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0258734s, 26528 KB] g=57, 210 evaluated, 209 expanded
[t=0.0259078s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0259165s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0259243s, 26528 KB] g=58, 211 evaluated, 210 expanded
[t=0.0260783s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0260869s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0260948s, 26528 KB] g=60, 217 evaluated, 216 expanded
[t=0.0266206s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0266336s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0266432s, 26528 KB] g=64, 238 evaluated, 237 expanded
[t=0.0267766s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0267871s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0267955s, 26528 KB] g=66, 243 evaluated, 242 expanded
[t=0.0272145s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0272264s, 26528 KB] g=70, 259 evaluated, 258 expanded
[t=0.0273287s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0273385s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0273476s, 26528 KB] g=72, 263 evaluated, 262 expanded
[t=0.0285099s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.028532s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0285415s, 26528 KB] g=84, 313 evaluated, 312 expanded
[t=0.0287436s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0287552s, 26528 KB] g=88, 322 evaluated, 321 expanded
[t=0.0288274s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0288368s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0288452s, 26528 KB] g=90, 325 evaluated, 324 expanded
[t=0.029431s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.029448s, 26528 KB] g=104, 357 evaluated, 356 expanded
[t=0.029503s, 26528 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0295129s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.029521s, 26528 KB] g=106, 360 evaluated, 359 expanded
[t=0.0295843s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0295938s, 26528 KB] g=110, 364 evaluated, 363 expanded
[t=0.0296126s, 26528 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0296214s, 26528 KB] g=111, 365 evaluated, 364 expanded
[t=0.029637s, 26528 KB] Solution found!
[t=0.02965s, 26528 KB] Actual search time: 0.0099952s
unstack b7 b6 (1)
put-down b7 (1)
unstack b18 b8 (1)
put-down b18 (1)
unstack b6 b2 (1)
put-down b6 (1)
unstack b8 b12 (1)
put-down b8 (1)
pick-up b6 (1)
stack b6 b8 (1)
unstack b12 b9 (1)
put-down b12 (1)
unstack b9 b4 (1)
put-down b9 (1)
unstack b4 b17 (1)
put-down b4 (1)
unstack b17 b5 (1)
put-down b17 (1)
unstack b5 b19 (1)
stack b5 b18 (1)
unstack b19 b11 (1)
put-down b19 (1)
unstack b11 b10 (1)
put-down b11 (1)
unstack b10 b20 (1)
stack b10 b2 (1)
unstack b20 b16 (1)
stack b20 b9 (1)
pick-up b12 (1)
stack b12 b5 (1)
unstack b16 b1 (1)
put-down b16 (1)
unstack b1 b14 (1)
stack b1 b12 (1)
unstack b14 b21 (1)
stack b14 b7 (1)
pick-up b16 (1)
stack b16 b14 (1)
pick-up b17 (1)
stack b17 b20 (1)
unstack b10 b2 (1)
put-down b10 (1)
unstack b2 b22 (1)
put-down b2 (1)
unstack b22 b15 (1)
stack b22 b21 (1)
unstack b15 b3 (1)
stack b15 b4 (1)
pick-up b10 (1)
stack b10 b2 (1)
unstack b3 b13 (1)
stack b3 b17 (1)
pick-up b13 (1)
stack b13 b1 (1)
unstack b22 b21 (1)
put-down b22 (1)
pick-up b21 (1)
stack b21 b15 (1)
pick-up b22 (1)
stack b22 b21 (1)
unstack b6 b8 (1)
put-down b6 (1)
pick-up b8 (1)
stack b8 b19 (1)
pick-up b6 (1)
stack b6 b8 (1)
unstack b10 b2 (1)
put-down b10 (1)
pick-up b2 (1)
stack b2 b22 (1)
pick-up b10 (1)
stack b10 b2 (1)
unstack b3 b17 (1)
put-down b3 (1)
unstack b17 b20 (1)
put-down b17 (1)
pick-up b3 (1)
stack b3 b17 (1)
unstack b20 b9 (1)
put-down b20 (1)
pick-up b9 (1)
stack b9 b10 (1)
pick-up b20 (1)
stack b20 b9 (1)
unstack b3 b17 (1)
put-down b3 (1)
pick-up b17 (1)
stack b17 b20 (1)
pick-up b3 (1)
stack b3 b17 (1)
unstack b13 b1 (1)
put-down b13 (1)
unstack b1 b12 (1)
put-down b1 (1)
pick-up b13 (1)
stack b13 b1 (1)
unstack b12 b5 (1)
put-down b12 (1)
unstack b5 b18 (1)
put-down b5 (1)
pick-up b18 (1)
stack b18 b3 (1)
pick-up b5 (1)
stack b5 b18 (1)
pick-up b12 (1)
stack b12 b5 (1)
unstack b13 b1 (1)
put-down b13 (1)
pick-up b1 (1)
stack b1 b12 (1)
pick-up b13 (1)
stack b13 b1 (1)
[t=0.0296606s, 26528 KB] Plan length: 112 step(s).
[t=0.0296606s, 26528 KB] Plan cost: 112
[t=0.0296606s, 26528 KB] Expanded 365 state(s).
[t=0.0296606s, 26528 KB] Reopened 0 state(s).
[t=0.0296606s, 26528 KB] Evaluated 366 state(s).
[t=0.0296606s, 26528 KB] Evaluations: 732
[t=0.0296606s, 26528 KB] Generated 3235 state(s).
[t=0.0296606s, 26528 KB] Dead ends: 0 state(s).
[t=0.0296606s, 26528 KB] Number of registered states: 366
[t=0.0296606s, 26528 KB] Int hash set load factor: 366/512 = 0.714844
[t=0.0296606s, 26528 KB] Int hash set resizes: 9
[t=0.0296606s, 26528 KB] Search time: 0.0100594s
[t=0.0296606s, 26528 KB] Total time: 0.0296606s
Solution found.
Peak memory: 26528 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.17s
