INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_25/bws_problem_25_60.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.012s wall-clock]
2052 relevant atoms
1375 auxiliary atoms
3427 final queue length
5981 total queue pushes
Completing instantiation... [0.020s CPU, 0.021s wall-clock]
Instantiating: [0.030s CPU, 0.036s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
26 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.031s wall-clock]
1850 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
50 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.020s wall-clock]
Reordering and filtering variables...
51 of 51 variables necessary.
26 of 51 mutex groups necessary.
1250 of 1250 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.007s wall-clock]
Translator variables: 51
Translator derived variables: 0
Translator facts: 702
Translator goal facts: 21
Translator mutex groups: 26
Translator total mutex groups size: 676
Translator operators: 1250
Translator axioms: 0
Translator task size: 10750
Translator peak memory: 38388 KB
Writing output... [0.010s CPU, 0.007s wall-clock]
Done! [0.110s CPU, 0.113s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.6485e-05s, 24488 KB] reading input...
[t=0.00363591s, 25632 KB] done reading input!
[t=0.00446781s, 26028 KB] Initializing landmark count heuristic...
[t=0.00449832s, 26028 KB] Generating landmark graph...
[t=0.00458957s, 26160 KB] Building a landmark graph with reasonable orders.
[t=0.00467021s, 26160 KB] Initializing Exploration...
[t=0.00505608s, 26532 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0200704s, 27060 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0201446s, 27060 KB] Landmarks generation time: 0.0155687s
[t=0.0201716s, 27060 KB] Discovered 114 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0201881s, 27060 KB] 628 edges
[t=0.020198s, 27060 KB] approx. reasonable orders
[t=0.0247046s, 27060 KB] approx. obedient reasonable orders
[t=0.0252605s, 27060 KB] Removed 8 reasonable or obedient reasonable orders
[t=0.025276s, 27060 KB] Landmarks generation time: 0.020777s
[t=0.0252872s, 27060 KB] Discovered 114 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0253112s, 27060 KB] 732 edges
[t=0.0253199s, 27060 KB] Landmark graph generation time: 0.0208285s
[t=0.0253282s, 27060 KB] Landmark graph contains 114 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.025336s, 27060 KB] Landmark graph contains 732 orderings.
[t=0.0263423s, 27060 KB] Simplifying 4950 unary operators... done! [3750 unary operators]
[t=0.0290421s, 27192 KB] time to simplify: 0.00287452s
[t=0.0293485s, 27192 KB] Initializing additive heuristic...
[t=0.0293792s, 27192 KB] Initializing FF heuristic...
[t=0.0294874s, 27192 KB] Building successor generator...done!
[t=0.0297906s, 27192 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0298184s, 27192 KB] time for successor generation creation: 0.000253838s
[t=0.0298346s, 27192 KB] Variables: 51
[t=0.0298425s, 27192 KB] FactPairs: 702
[t=0.0298502s, 27192 KB] Bytes per state: 20
[t=0.0299745s, 27192 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0300219s, 27192 KB] 51 initial landmarks, 21 goal landmarks
[t=0.0301169s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0301326s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0301405s, 27192 KB] g=0, 1 evaluated, 0 expanded
[t=0.0301724s, 27192 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.030181s, 27192 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0303904s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0303997s, 27192 KB] g=2, 7 evaluated, 6 expanded
[t=0.0305979s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0306071s, 27192 KB] g=3, 13 evaluated, 12 expanded
[t=0.0309303s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.030941s, 27192 KB] g=6, 23 evaluated, 22 expanded
[t=0.0313528s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0313633s, 27192 KB] g=8, 36 evaluated, 35 expanded
[t=0.0317073s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0317164s, 27192 KB] g=10, 48 evaluated, 47 expanded
[t=0.0318943s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0319029s, 27192 KB] g=6, 54 evaluated, 53 expanded
[t=0.0322247s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0322342s, 27192 KB] g=12, 65 evaluated, 64 expanded
[t=0.0324904s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0325061s, 27192 KB] g=8, 73 evaluated, 72 expanded
[t=0.0328608s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0328694s, 27192 KB] g=14, 85 evaluated, 84 expanded
[t=0.0334618s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0334706s, 27192 KB] g=16, 106 evaluated, 105 expanded
[t=0.0338199s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0338361s, 27192 KB] g=12, 118 evaluated, 117 expanded
[t=0.0340264s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0340355s, 27192 KB] g=18, 124 evaluated, 123 expanded
[t=0.0342584s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0342678s, 27192 KB] g=14, 131 evaluated, 130 expanded
[t=0.0347661s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.034791s, 27192 KB] g=20, 148 evaluated, 147 expanded
[t=0.0361076s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0361199s, 27192 KB] g=22, 190 evaluated, 189 expanded
[t=0.0365405s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0365507s, 27192 KB] g=22, 204 evaluated, 203 expanded
[t=0.0368985s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0369092s, 27192 KB] g=24, 215 evaluated, 214 expanded
[t=0.0371678s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0371776s, 27192 KB] g=24, 223 evaluated, 222 expanded
[t=0.0377278s, 27192 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0377378s, 27192 KB] g=26, 241 evaluated, 240 expanded
[t=0.0378168s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.037826s, 27192 KB] g=26, 243 evaluated, 242 expanded
[t=0.0419926s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0420185s, 27192 KB] g=34, 378 evaluated, 377 expanded
[t=0.0452152s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0452435s, 27192 KB] g=40, 483 evaluated, 482 expanded
[t=0.0457133s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0457247s, 27192 KB] g=42, 498 evaluated, 497 expanded
[t=0.0459931s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0460189s, 27192 KB] g=44, 506 evaluated, 505 expanded
[t=0.0463788s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0463895s, 27192 KB] g=46, 516 evaluated, 515 expanded
[t=0.0467746s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0467845s, 27192 KB] g=48, 528 evaluated, 527 expanded
[t=0.0472781s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0472902s, 27192 KB] g=50, 543 evaluated, 542 expanded
[t=0.0492863s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0492968s, 27192 KB] g=54, 609 evaluated, 608 expanded
[t=0.0496998s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.049715s, 27192 KB] g=56, 622 evaluated, 621 expanded
[t=0.0501995s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0502095s, 27192 KB] g=58, 637 evaluated, 636 expanded
[t=0.0505814s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.050591s, 27192 KB] g=60, 649 evaluated, 648 expanded
[t=0.0509971s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0510076s, 27192 KB] g=62, 662 evaluated, 661 expanded
[t=0.053265s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0532784s, 27192 KB] g=68, 737 evaluated, 736 expanded
[t=0.0536729s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.053683s, 27192 KB] g=70, 750 evaluated, 749 expanded
[t=0.0539847s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0540023s, 27192 KB] g=72, 760 evaluated, 759 expanded
[t=0.0595385s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0595911s, 27192 KB] g=80, 942 evaluated, 941 expanded
[t=0.0597621s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0597729s, 27192 KB] g=80, 947 evaluated, 946 expanded
[t=0.0599238s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0599332s, 27192 KB] g=82, 952 evaluated, 951 expanded
[t=0.0623725s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0623907s, 27192 KB] g=90, 1035 evaluated, 1034 expanded
[t=0.0626347s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0626449s, 27192 KB] g=92, 1043 evaluated, 1042 expanded
[t=0.070524s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0705498s, 27192 KB] g=108, 1317 evaluated, 1316 expanded
[t=0.07217s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0721842s, 27192 KB] g=116, 1374 evaluated, 1373 expanded
[t=0.0723576s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0723672s, 27192 KB] g=118, 1380 evaluated, 1379 expanded
[t=0.0745162s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0745269s, 27192 KB] g=134, 1465 evaluated, 1464 expanded
[t=0.0749894s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0750003s, 27192 KB] g=142, 1484 evaluated, 1483 expanded
[t=0.0750204s, 27192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0750296s, 27192 KB] g=143, 1485 evaluated, 1484 expanded
[t=0.0750788s, 27192 KB] Solution found!
[t=0.0750929s, 27192 KB] Actual search time: 0.0450518s
unstack b12 b7 (1)
put-down b12 (1)
unstack b7 b3 (1)
put-down b7 (1)
unstack b3 b11 (1)
put-down b3 (1)
pick-up b22 (1)
stack b22 b11 (1)
unstack b6 b16 (1)
put-down b6 (1)
unstack b16 b8 (1)
stack b16 b15 (1)
unstack b8 b19 (1)
put-down b8 (1)
unstack b19 b14 (1)
put-down b19 (1)
unstack b14 b10 (1)
put-down b14 (1)
unstack b10 b21 (1)
put-down b10 (1)
unstack b21 b20 (1)
stack b21 b14 (1)
pick-up b12 (1)
stack b12 b20 (1)
pick-up b7 (1)
stack b7 b21 (1)
unstack b12 b20 (1)
put-down b12 (1)
unstack b20 b17 (1)
put-down b20 (1)
pick-up b10 (1)
stack b10 b17 (1)
pick-up b12 (1)
stack b12 b20 (1)
unstack b10 b17 (1)
put-down b10 (1)
unstack b17 b24 (1)
stack b17 b12 (1)
pick-up b10 (1)
stack b10 b17 (1)
unstack b24 b1 (1)
stack b24 b10 (1)
unstack b1 b5 (1)
put-down b1 (1)
unstack b5 b9 (1)
stack b5 b3 (1)
unstack b9 b25 (1)
put-down b9 (1)
pick-up b25 (1)
stack b25 b6 (1)
unstack b16 b15 (1)
put-down b16 (1)
unstack b15 b4 (1)
stack b15 b1 (1)
pick-up b16 (1)
stack b16 b15 (1)
unstack b4 b13 (1)
stack b4 b19 (1)
unstack b13 b2 (1)
stack b13 b9 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b22 b11 (1)
put-down b22 (1)
unstack b11 b18 (1)
stack b11 b25 (1)
unstack b18 b23 (1)
stack b18 b16 (1)
pick-up b22 (1)
stack b22 b11 (1)
pick-up b23 (1)
stack b23 b22 (1)
unstack b2 b4 (1)
put-down b2 (1)
unstack b4 b19 (1)
put-down b4 (1)
pick-up b19 (1)
stack b19 b18 (1)
pick-up b4 (1)
stack b4 b19 (1)
pick-up b2 (1)
stack b2 b4 (1)
unstack b7 b21 (1)
put-down b7 (1)
unstack b21 b14 (1)
put-down b21 (1)
pick-up b14 (1)
stack b14 b13 (1)
pick-up b21 (1)
stack b21 b14 (1)
pick-up b7 (1)
stack b7 b21 (1)
unstack b23 b22 (1)
put-down b23 (1)
unstack b22 b11 (1)
put-down b22 (1)
unstack b11 b25 (1)
put-down b11 (1)
pick-up b22 (1)
stack b22 b11 (1)
pick-up b23 (1)
stack b23 b22 (1)
unstack b25 b6 (1)
put-down b25 (1)
pick-up b6 (1)
stack b6 b2 (1)
pick-up b25 (1)
stack b25 b6 (1)
unstack b23 b22 (1)
put-down b23 (1)
unstack b22 b11 (1)
put-down b22 (1)
pick-up b11 (1)
stack b11 b25 (1)
pick-up b22 (1)
stack b22 b11 (1)
pick-up b23 (1)
stack b23 b22 (1)
unstack b24 b10 (1)
put-down b24 (1)
unstack b10 b17 (1)
put-down b10 (1)
unstack b17 b12 (1)
put-down b17 (1)
pick-up b10 (1)
stack b10 b17 (1)
pick-up b24 (1)
stack b24 b10 (1)
unstack b12 b20 (1)
put-down b12 (1)
pick-up b20 (1)
stack b20 b23 (1)
pick-up b12 (1)
stack b12 b20 (1)
unstack b24 b10 (1)
put-down b24 (1)
unstack b10 b17 (1)
put-down b10 (1)
pick-up b17 (1)
stack b17 b12 (1)
pick-up b10 (1)
stack b10 b17 (1)
pick-up b24 (1)
stack b24 b10 (1)
[t=0.0751031s, 27192 KB] Plan length: 144 step(s).
[t=0.0751031s, 27192 KB] Plan cost: 144
[t=0.0751031s, 27192 KB] Expanded 1486 state(s).
[t=0.0751031s, 27192 KB] Reopened 0 state(s).
[t=0.0751031s, 27192 KB] Evaluated 1487 state(s).
[t=0.0751031s, 27192 KB] Evaluations: 2974
[t=0.0751031s, 27192 KB] Generated 19083 state(s).
[t=0.0751031s, 27192 KB] Dead ends: 0 state(s).
[t=0.0751031s, 27192 KB] Number of registered states: 1487
[t=0.0751031s, 27192 KB] Int hash set load factor: 1487/2048 = 0.726074
[t=0.0751031s, 27192 KB] Int hash set resizes: 11
[t=0.0751031s, 27192 KB] Search time: 0.0451293s
[t=0.0751031s, 27192 KB] Total time: 0.0751031s
Solution found.
Peak memory: 27192 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.24s
