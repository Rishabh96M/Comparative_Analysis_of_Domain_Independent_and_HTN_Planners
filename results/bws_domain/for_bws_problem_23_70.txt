INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_23/bws_problem_23_70.pddl --sas-file output.sas
Parsing...
Parsing: [0.010s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.011s wall-clock]
1750 relevant atoms
1173 auxiliary atoms
2923 final queue length
5090 total queue pushes
Completing instantiation... [0.020s CPU, 0.018s wall-clock]
Instantiating: [0.030s CPU, 0.030s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
24 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.026s wall-clock]
1564 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
46 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.013s wall-clock]
Reordering and filtering variables...
47 of 47 variables necessary.
24 of 47 mutex groups necessary.
1058 of 1058 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 47
Translator derived variables: 0
Translator facts: 600
Translator goal facts: 19
Translator mutex groups: 24
Translator total mutex groups size: 576
Translator operators: 1058
Translator axioms: 0
Translator task size: 9108
Translator peak memory: 37488 KB
Writing output... [0.000s CPU, 0.007s wall-clock]
Done! [0.090s CPU, 0.094s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9602e-05s, 24488 KB] reading input...
[t=0.00297488s, 25428 KB] done reading input!
[t=0.00432924s, 25824 KB] Initializing landmark count heuristic...
[t=0.00439163s, 25824 KB] Generating landmark graph...
[t=0.0044701s, 25824 KB] Building a landmark graph with reasonable orders.
[t=0.00454049s, 25956 KB] Initializing Exploration...
[t=0.00488469s, 26256 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0166444s, 26652 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0167145s, 26652 KB] Landmarks generation time: 0.0122434s
[t=0.0167285s, 26652 KB] Discovered 103 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0167439s, 26652 KB] 520 edges
[t=0.0167537s, 26652 KB] approx. reasonable orders
[t=0.0203686s, 26652 KB] approx. obedient reasonable orders
[t=0.0208036s, 26652 KB] Removed 12 reasonable or obedient reasonable orders
[t=0.0208217s, 26652 KB] Landmarks generation time: 0.0164292s
[t=0.0208326s, 26652 KB] Discovered 103 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0208408s, 26652 KB] 619 edges
[t=0.0208498s, 26652 KB] Landmark graph generation time: 0.0164651s
[t=0.0208583s, 26652 KB] Landmark graph contains 103 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0208664s, 26652 KB] Landmark graph contains 619 orderings.
[t=0.0213342s, 26652 KB] Simplifying 4186 unary operators... done! [3174 unary operators]
[t=0.0225112s, 26784 KB] time to simplify: 0.00125825s
[t=0.0226689s, 26784 KB] Initializing additive heuristic...
[t=0.0226828s, 26784 KB] Initializing FF heuristic...
[t=0.0227365s, 26784 KB] Building successor generator...done!
[t=0.022936s, 26784 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0229457s, 26784 KB] time for successor generation creation: 0.000174675s
[t=0.0229583s, 26784 KB] Variables: 47
[t=0.0229663s, 26784 KB] FactPairs: 600
[t=0.0229738s, 26784 KB] Bytes per state: 20
[t=0.0230708s, 26784 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0231039s, 26784 KB] 47 initial landmarks, 19 goal landmarks
[t=0.023161s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0231711s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0231795s, 26784 KB] g=0, 1 evaluated, 0 expanded
[t=0.0231931s, 26784 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.0232028s, 26784 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0233741s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0233831s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0233912s, 26784 KB] g=2, 7 evaluated, 6 expanded
[t=0.0235478s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0235565s, 26784 KB] g=4, 13 evaluated, 12 expanded
[t=0.0236396s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0236481s, 26784 KB] g=4, 16 evaluated, 15 expanded
[t=0.0238545s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0238642s, 26784 KB] g=6, 24 evaluated, 23 expanded
[t=0.0239486s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0239571s, 26784 KB] g=6, 27 evaluated, 26 expanded
[t=0.0242354s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.024244s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0242525s, 26784 KB] g=8, 38 evaluated, 37 expanded
[t=0.0244106s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0244199s, 26784 KB] g=10, 44 evaluated, 43 expanded
[t=0.0248024s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0248121s, 26784 KB] g=11, 59 evaluated, 58 expanded
[t=0.0251299s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0251411s, 26784 KB] g=14, 71 evaluated, 70 expanded
[t=0.0253763s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.0253941s, 26784 KB] g=16, 79 evaluated, 78 expanded
[t=0.0257989s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0258096s, 26784 KB] g=14, 94 evaluated, 93 expanded
[t=0.0258944s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.025909s, 26784 KB] g=18, 97 evaluated, 96 expanded
[t=0.0264363s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.026447s, 26784 KB] g=20, 117 evaluated, 116 expanded
[t=0.026964s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0269761s, 26784 KB] g=22, 137 evaluated, 136 expanded
[t=0.0270881s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0270979s, 26784 KB] g=20, 141 evaluated, 140 expanded
[t=0.0275518s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.027561s, 26784 KB] g=24, 159 evaluated, 158 expanded
[t=0.0280693s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0280798s, 26784 KB] g=22, 178 evaluated, 177 expanded
[t=0.0282135s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0282224s, 26784 KB] g=26, 183 evaluated, 182 expanded
[t=0.0285288s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0285383s, 26784 KB] g=24, 194 evaluated, 193 expanded
[t=0.0289416s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0289508s, 26784 KB] g=28, 210 evaluated, 209 expanded
[t=0.0300815s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0300939s, 26784 KB] g=30, 254 evaluated, 253 expanded
[t=0.0304227s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0304322s, 26784 KB] g=30, 266 evaluated, 265 expanded
[t=0.0307845s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0307937s, 26784 KB] g=32, 280 evaluated, 279 expanded
[t=0.0313834s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.0313941s, 26784 KB] g=34, 303 evaluated, 302 expanded
[t=0.032141s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0321523s, 26784 KB] g=36, 332 evaluated, 331 expanded
[t=0.0329134s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0329243s, 26784 KB] g=38, 360 evaluated, 359 expanded
[t=0.0329859s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0329948s, 26784 KB] g=38, 362 evaluated, 361 expanded
[t=0.0335927s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0336051s, 26784 KB] g=40, 385 evaluated, 384 expanded
[t=0.0341321s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0341426s, 26784 KB] g=42, 406 evaluated, 405 expanded
[t=0.0345706s, 26784 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0345831s, 26784 KB] g=40, 422 evaluated, 421 expanded
[t=0.0346703s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0346826s, 26784 KB] g=44, 425 evaluated, 424 expanded
[t=0.0352644s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0352817s, 26784 KB] g=46, 448 evaluated, 447 expanded
[t=0.0357014s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0357227s, 26784 KB] g=48, 464 evaluated, 463 expanded
[t=0.0361219s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0361317s, 26784 KB] g=50, 479 evaluated, 478 expanded
[t=0.0364594s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0364695s, 26784 KB] g=52, 492 evaluated, 491 expanded
[t=0.0368362s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0368473s, 26784 KB] g=54, 507 evaluated, 506 expanded
[t=0.039378s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0393943s, 26784 KB] g=60, 608 evaluated, 607 expanded
[t=0.0412668s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0412829s, 26784 KB] g=66, 684 evaluated, 683 expanded
[t=0.0440073s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0440313s, 26784 KB] g=72, 792 evaluated, 791 expanded
[t=0.0465136s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0465257s, 26784 KB] g=82, 890 evaluated, 889 expanded
[t=0.057958s, 26784 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0580237s, 26784 KB] g=120, 1286 evaluated, 1285 expanded
[t=0.130005s, 27620 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.130072s, 27620 KB] g=192, 4139 evaluated, 4138 expanded
[t=0.130205s, 27620 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.130215s, 27620 KB] g=194, 4144 evaluated, 4143 expanded
[t=0.132813s, 27620 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.132832s, 27620 KB] g=206, 4249 evaluated, 4248 expanded
[t=0.133353s, 27752 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.133371s, 27752 KB] g=210, 4270 evaluated, 4269 expanded
[t=0.133495s, 27752 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.133504s, 27752 KB] g=212, 4275 evaluated, 4274 expanded
[t=0.138431s, 27752 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.138451s, 27752 KB] g=242, 4497 evaluated, 4496 expanded
[t=0.138902s, 27752 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.138919s, 27752 KB] g=246, 4518 evaluated, 4517 expanded
[t=0.139061s, 27752 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.139074s, 27752 KB] g=248, 4524 evaluated, 4523 expanded
[t=0.139829s, 27752 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.139852s, 27752 KB] g=260, 4561 evaluated, 4560 expanded
[t=0.140054s, 27752 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.140084s, 27752 KB] g=264, 4571 evaluated, 4570 expanded
[t=0.140127s, 27752 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.140137s, 27752 KB] g=265, 4573 evaluated, 4572 expanded
[t=0.140178s, 27752 KB] Solution found!
[t=0.140207s, 27752 KB] Actual search time: 0.117101s
unstack b4 b12 (1)
put-down b4 (1)
unstack b21 b14 (1)
stack b21 b19 (1)
unstack b14 b6 (1)
put-down b14 (1)
unstack b12 b9 (1)
stack b12 b14 (1)
unstack b6 b22 (1)
put-down b6 (1)
unstack b22 b7 (1)
put-down b22 (1)
unstack b21 b19 (1)
put-down b21 (1)
unstack b5 b17 (1)
put-down b5 (1)
unstack b17 b3 (1)
put-down b17 (1)
unstack b3 b13 (1)
put-down b3 (1)
unstack b13 b10 (1)
put-down b13 (1)
unstack b7 b18 (1)
put-down b7 (1)
unstack b18 b11 (1)
put-down b18 (1)
unstack b11 b8 (1)
put-down b11 (1)
unstack b8 b2 (1)
put-down b8 (1)
unstack b2 b15 (1)
stack b2 b12 (1)
unstack b15 b16 (1)
stack b15 b13 (1)
pick-up b10 (1)
stack b10 b21 (1)
pick-up b11 (1)
stack b11 b10 (1)
unstack b16 b1 (1)
stack b16 b11 (1)
unstack b1 b23 (1)
stack b1 b17 (1)
pick-up b19 (1)
stack b19 b15 (1)
pick-up b20 (1)
stack b20 b3 (1)
pick-up b22 (1)
stack b22 b2 (1)
pick-up b23 (1)
stack b23 b5 (1)
pick-up b6 (1)
stack b6 b7 (1)
pick-up b9 (1)
stack b9 b23 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b6 b7 (1)
put-down b6 (1)
pick-up b7 (1)
stack b7 b9 (1)
pick-up b6 (1)
stack b6 b7 (1)
unstack b20 b3 (1)
put-down b20 (1)
pick-up b3 (1)
stack b3 b6 (1)
pick-up b20 (1)
stack b20 b3 (1)
unstack b19 b15 (1)
put-down b19 (1)
unstack b15 b13 (1)
put-down b15 (1)
pick-up b13 (1)
stack b13 b20 (1)
pick-up b15 (1)
stack b15 b13 (1)
pick-up b19 (1)
stack b19 b15 (1)
unstack b1 b17 (1)
put-down b1 (1)
unstack b17 b16 (1)
put-down b17 (1)
unstack b16 b11 (1)
put-down b16 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b11 b10 (1)
put-down b11 (1)
unstack b10 b21 (1)
put-down b10 (1)
pick-up b11 (1)
stack b11 b10 (1)
pick-up b21 (1)
stack b21 b19 (1)
unstack b11 b10 (1)
put-down b11 (1)
pick-up b10 (1)
stack b10 b21 (1)
pick-up b11 (1)
stack b11 b10 (1)
unstack b1 b17 (1)
put-down b1 (1)
unstack b17 b16 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b11 b10 (1)
put-down b11 (1)
pick-up b16 (1)
stack b16 b11 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b10 b21 (1)
put-down b10 (1)
unstack b21 b19 (1)
put-down b21 (1)
pick-up b10 (1)
stack b10 b21 (1)
unstack b19 b15 (1)
put-down b19 (1)
unstack b15 b13 (1)
put-down b15 (1)
pick-up b19 (1)
stack b19 b15 (1)
unstack b10 b21 (1)
put-down b10 (1)
pick-up b21 (1)
stack b21 b19 (1)
pick-up b10 (1)
stack b10 b21 (1)
unstack b1 b17 (1)
put-down b1 (1)
unstack b17 b16 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b16 b11 (1)
put-down b16 (1)
pick-up b11 (1)
stack b11 b10 (1)
pick-up b16 (1)
stack b16 b11 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b13 b20 (1)
put-down b13 (1)
unstack b20 b3 (1)
put-down b20 (1)
pick-up b13 (1)
stack b13 b20 (1)
unstack b3 b6 (1)
put-down b3 (1)
unstack b6 b7 (1)
put-down b6 (1)
pick-up b3 (1)
stack b3 b6 (1)
unstack b13 b20 (1)
put-down b13 (1)
pick-up b20 (1)
stack b20 b3 (1)
pick-up b13 (1)
stack b13 b20 (1)
unstack b7 b9 (1)
put-down b7 (1)
unstack b9 b23 (1)
put-down b9 (1)
pick-up b7 (1)
stack b7 b9 (1)
unstack b23 b5 (1)
put-down b23 (1)
pick-up b5 (1)
stack b5 b8 (1)
pick-up b23 (1)
stack b23 b5 (1)
unstack b7 b9 (1)
put-down b7 (1)
pick-up b9 (1)
stack b9 b23 (1)
pick-up b7 (1)
stack b7 b9 (1)
unstack b13 b20 (1)
put-down b13 (1)
unstack b20 b3 (1)
put-down b20 (1)
pick-up b13 (1)
stack b13 b20 (1)
unstack b3 b6 (1)
put-down b3 (1)
pick-up b6 (1)
stack b6 b7 (1)
pick-up b3 (1)
stack b3 b6 (1)
unstack b13 b20 (1)
put-down b13 (1)
pick-up b20 (1)
stack b20 b3 (1)
pick-up b13 (1)
stack b13 b20 (1)
unstack b1 b17 (1)
put-down b1 (1)
unstack b17 b16 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b16 b11 (1)
put-down b16 (1)
unstack b11 b10 (1)
put-down b11 (1)
pick-up b16 (1)
stack b16 b11 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b10 b21 (1)
put-down b10 (1)
unstack b21 b19 (1)
put-down b21 (1)
pick-up b10 (1)
stack b10 b21 (1)
unstack b19 b15 (1)
put-down b19 (1)
pick-up b15 (1)
stack b15 b13 (1)
pick-up b19 (1)
stack b19 b15 (1)
unstack b10 b21 (1)
put-down b10 (1)
pick-up b21 (1)
stack b21 b19 (1)
pick-up b10 (1)
stack b10 b21 (1)
unstack b1 b17 (1)
put-down b1 (1)
unstack b17 b16 (1)
put-down b17 (1)
pick-up b1 (1)
stack b1 b17 (1)
unstack b16 b11 (1)
put-down b16 (1)
pick-up b11 (1)
stack b11 b10 (1)
pick-up b16 (1)
stack b16 b11 (1)
unstack b1 b17 (1)
put-down b1 (1)
pick-up b17 (1)
stack b17 b16 (1)
pick-up b1 (1)
stack b1 b17 (1)
[t=0.140218s, 27752 KB] Plan length: 266 step(s).
[t=0.140218s, 27752 KB] Plan cost: 266
[t=0.140218s, 27752 KB] Expanded 4574 state(s).
[t=0.140218s, 27752 KB] Reopened 0 state(s).
[t=0.140218s, 27752 KB] Evaluated 4575 state(s).
[t=0.140218s, 27752 KB] Evaluations: 9150
[t=0.140218s, 27752 KB] Generated 61276 state(s).
[t=0.140218s, 27752 KB] Dead ends: 0 state(s).
[t=0.140218s, 27752 KB] Number of registered states: 4575
[t=0.140218s, 27752 KB] Int hash set load factor: 4575/8192 = 0.558472
[t=0.140218s, 27752 KB] Int hash set resizes: 13
[t=0.140218s, 27752 KB] Search time: 0.117148s
[t=0.140218s, 27752 KB] Total time: 0.140218s
Solution found.
Peak memory: 27752 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.28s
