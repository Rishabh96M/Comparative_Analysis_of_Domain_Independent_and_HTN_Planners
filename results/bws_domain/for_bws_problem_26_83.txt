INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_26/bws_problem_26_83.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.010s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.013s wall-clock]
2212 relevant atoms
1482 auxiliary atoms
3694 final queue length
6455 total queue pushes
Completing instantiation... [0.020s CPU, 0.024s wall-clock]
Instantiating: [0.030s CPU, 0.039s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
27 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.009s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.040s CPU, 0.041s wall-clock]
2002 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
52 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.022s wall-clock]
Reordering and filtering variables...
53 of 53 variables necessary.
27 of 53 mutex groups necessary.
1352 of 1352 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.009s wall-clock]
Translator variables: 53
Translator derived variables: 0
Translator facts: 756
Translator goal facts: 21
Translator mutex groups: 27
Translator total mutex groups size: 729
Translator operators: 1352
Translator axioms: 0
Translator task size: 11621
Translator peak memory: 38900 KB
Writing output... [0.010s CPU, 0.007s wall-clock]
Done! [0.130s CPU, 0.133s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.9466e-05s, 24488 KB] reading input...
[t=0.003753s, 25744 KB] done reading input!
[t=0.00471433s, 26140 KB] Initializing landmark count heuristic...
[t=0.00478472s, 26140 KB] Generating landmark graph...
[t=0.00490344s, 26272 KB] Building a landmark graph with reasonable orders.
[t=0.00499099s, 26272 KB] Initializing Exploration...
[t=0.00539378s, 26680 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0211473s, 27208 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0213353s, 27208 KB] Landmarks generation time: 0.0164353s
[t=0.0213559s, 27208 KB] Discovered 108 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0213831s, 27208 KB] 425 edges
[t=0.0213948s, 27208 KB] approx. reasonable orders
[t=0.0220424s, 27208 KB] approx. obedient reasonable orders
[t=0.0220787s, 27208 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0220886s, 27208 KB] Landmarks generation time: 0.0172985s
[t=0.0220987s, 27208 KB] Discovered 108 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0221073s, 27208 KB] 431 edges
[t=0.0221198s, 27208 KB] Landmark graph generation time: 0.0173429s
[t=0.0221294s, 27208 KB] Landmark graph contains 108 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0221378s, 27208 KB] Landmark graph contains 431 orderings.
[t=0.0228175s, 27208 KB] Simplifying 5356 unary operators... done! [4056 unary operators]
[t=0.0241714s, 27340 KB] time to simplify: 0.00146753s
[t=0.0243796s, 27340 KB] Initializing additive heuristic...
[t=0.0244003s, 27340 KB] Initializing FF heuristic...
[t=0.0245214s, 27340 KB] Building successor generator...done!
[t=0.0248792s, 27340 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0248898s, 27340 KB] time for successor generation creation: 0.00032481s
[t=0.0249087s, 27340 KB] Variables: 53
[t=0.0249179s, 27340 KB] FactPairs: 756
[t=0.0249272s, 27340 KB] Bytes per state: 20
[t=0.0251775s, 27340 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0252188s, 27340 KB] 50 initial landmarks, 21 goal landmarks
[t=0.0253356s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0253468s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0253564s, 27340 KB] g=0, 1 evaluated, 0 expanded
[t=0.0253953s, 27340 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0254151s, 27340 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0256825s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0256936s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.025702s, 27340 KB] g=2, 7 evaluated, 6 expanded
[t=0.0259394s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 55
[t=0.0259695s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.0259776s, 27340 KB] g=4, 13 evaluated, 12 expanded
[t=0.0261921s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0262012s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0262092s, 27340 KB] g=6, 18 evaluated, 17 expanded
[t=0.0262832s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0262923s, 27340 KB] g=7, 20 evaluated, 19 expanded
[t=0.0266052s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0266155s, 27340 KB] g=10, 29 evaluated, 28 expanded
[t=0.0269249s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0269369s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0269475s, 27340 KB] g=12, 38 evaluated, 37 expanded
[t=0.0270268s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0270368s, 27340 KB] g=13, 40 evaluated, 39 expanded
[t=0.0274918s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0275046s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0275564s, 27340 KB] g=16, 53 evaluated, 52 expanded
[t=0.0278266s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.027836s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0278439s, 27340 KB] g=18, 61 evaluated, 60 expanded
[t=0.0281021s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0281182s, 27340 KB] g=20, 68 evaluated, 67 expanded
[t=0.0284006s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0284096s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0284175s, 27340 KB] g=22, 76 evaluated, 75 expanded
[t=0.0287258s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0287358s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0287443s, 27340 KB] g=24, 85 evaluated, 84 expanded
[t=0.0290192s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0290287s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0290369s, 27340 KB] g=26, 93 evaluated, 92 expanded
[t=0.029287s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0293066s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0293145s, 27340 KB] g=28, 100 evaluated, 99 expanded
[t=0.0296703s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0296797s, 27340 KB] g=31, 111 evaluated, 110 expanded
[t=0.0300709s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0300809s, 27340 KB] g=34, 123 evaluated, 122 expanded
[t=0.0305416s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 30
[t=0.0305599s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.030575s, 27340 KB] g=36, 137 evaluated, 136 expanded
[t=0.0309156s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0309321s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0309404s, 27340 KB] g=38, 147 evaluated, 146 expanded
[t=0.0312309s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0312412s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0312514s, 27340 KB] g=40, 156 evaluated, 155 expanded
[t=0.0315097s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0315189s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0315273s, 27340 KB] g=42, 164 evaluated, 163 expanded
[t=0.0315697s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.0315792s, 27340 KB] g=43, 165 evaluated, 164 expanded
[t=0.0316219s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0316306s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0316386s, 27340 KB] g=44, 166 evaluated, 165 expanded
[t=0.031902s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 20
[t=0.0319142s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0319231s, 27340 KB] g=46, 174 evaluated, 173 expanded
[t=0.0321213s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0321307s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0321387s, 27340 KB] g=48, 180 evaluated, 179 expanded
[t=0.0323218s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0323334s, 27340 KB] g=48, 185 evaluated, 184 expanded
[t=0.032533s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0325428s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.0325509s, 27340 KB] g=50, 191 evaluated, 190 expanded
[t=0.0337462s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0337668s, 27340 KB] g=57, 228 evaluated, 227 expanded
[t=0.0338203s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0338297s, 27340 KB] g=58, 229 evaluated, 228 expanded
[t=0.0341907s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0342001s, 27340 KB] g=60, 240 evaluated, 239 expanded
[t=0.0343945s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 11
[t=0.0344037s, 27340 KB] g=62, 246 evaluated, 245 expanded
[t=0.0345723s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.034581s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0345892s, 27340 KB] g=64, 251 evaluated, 250 expanded
[t=0.0350596s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.035069s, 27340 KB] g=68, 266 evaluated, 265 expanded
[t=0.0352041s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0352144s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.0352226s, 27340 KB] g=70, 270 evaluated, 269 expanded
[t=0.0380237s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0380452s, 27340 KB] g=84, 359 evaluated, 358 expanded
[t=0.0382117s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0382215s, 27340 KB] g=84, 363 evaluated, 362 expanded
[t=0.0383788s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0383879s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0383959s, 27340 KB] g=86, 368 evaluated, 367 expanded
[t=0.0388742s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0388832s, 27340 KB] g=90, 384 evaluated, 383 expanded
[t=0.0390091s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.039018s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0390262s, 27340 KB] g=92, 388 evaluated, 387 expanded
[t=0.043167s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0432224s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0432327s, 27340 KB] g=110, 527 evaluated, 526 expanded
[t=0.0433674s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0433782s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0433864s, 27340 KB] g=112, 531 evaluated, 530 expanded
[t=0.044266s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0442762s, 27340 KB] g=120, 563 evaluated, 562 expanded
[t=0.0443672s, 27340 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.044376s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0443837s, 27340 KB] g=122, 566 evaluated, 565 expanded
[t=0.0462444s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0462659s, 27340 KB] g=144, 644 evaluated, 643 expanded
[t=0.0463352s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0463442s, 27340 KB] g=146, 647 evaluated, 646 expanded
[t=0.0465222s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0465313s, 27340 KB] g=154, 657 evaluated, 656 expanded
[t=0.0466001s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0466088s, 27340 KB] g=158, 661 evaluated, 660 expanded
[t=0.0466274s, 27340 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0466359s, 27340 KB] g=159, 662 evaluated, 661 expanded
[t=0.0466512s, 27340 KB] Solution found!
[t=0.0466623s, 27340 KB] Actual search time: 0.0214392s
unstack b5 b14 (1)
put-down b5 (1)
unstack b18 b22 (1)
stack b18 b11 (1)
unstack b24 b2 (1)
stack b24 b14 (1)
unstack b2 b13 (1)
put-down b2 (1)
unstack b13 b12 (1)
put-down b13 (1)
unstack b12 b16 (1)
stack b12 b22 (1)
unstack b16 b25 (1)
put-down b16 (1)
unstack b25 b9 (1)
stack b25 b24 (1)
pick-up b13 (1)
stack b13 b25 (1)
unstack b7 b23 (1)
put-down b7 (1)
unstack b23 b10 (1)
put-down b23 (1)
unstack b10 b4 (1)
stack b10 b12 (1)
pick-up b16 (1)
stack b16 b4 (1)
pick-up b7 (1)
stack b7 b10 (1)
unstack b16 b4 (1)
put-down b16 (1)
unstack b4 b20 (1)
put-down b4 (1)
unstack b20 b17 (1)
put-down b20 (1)
unstack b17 b15 (1)
stack b17 b5 (1)
unstack b15 b6 (1)
stack b15 b13 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b6 b1 (1)
put-down b6 (1)
unstack b1 b26 (1)
stack b1 b6 (1)
pick-up b16 (1)
stack b16 b4 (1)
pick-up b20 (1)
stack b20 b26 (1)
pick-up b9 (1)
stack b9 b20 (1)
unstack b18 b11 (1)
put-down b18 (1)
unstack b11 b8 (1)
put-down b11 (1)
unstack b8 b21 (1)
put-down b8 (1)
unstack b21 b3 (1)
stack b21 b7 (1)
pick-up b11 (1)
stack b11 b8 (1)
pick-up b18 (1)
stack b18 b11 (1)
pick-up b3 (1)
stack b3 b18 (1)
unstack b16 b4 (1)
put-down b16 (1)
pick-up b4 (1)
stack b4 b3 (1)
pick-up b16 (1)
stack b16 b4 (1)
unstack b21 b7 (1)
put-down b21 (1)
unstack b7 b10 (1)
put-down b7 (1)
pick-up b21 (1)
stack b21 b7 (1)
unstack b10 b12 (1)
put-down b10 (1)
unstack b12 b22 (1)
put-down b12 (1)
pick-up b22 (1)
stack b22 b17 (1)
pick-up b12 (1)
stack b12 b22 (1)
pick-up b10 (1)
stack b10 b12 (1)
unstack b21 b7 (1)
put-down b21 (1)
pick-up b7 (1)
stack b7 b10 (1)
pick-up b21 (1)
stack b21 b7 (1)
unstack b2 b15 (1)
put-down b2 (1)
unstack b15 b13 (1)
put-down b15 (1)
unstack b13 b25 (1)
put-down b13 (1)
pick-up b15 (1)
stack b15 b13 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b25 b24 (1)
put-down b25 (1)
unstack b24 b14 (1)
put-down b24 (1)
pick-up b14 (1)
stack b14 b23 (1)
pick-up b24 (1)
stack b24 b14 (1)
pick-up b25 (1)
stack b25 b24 (1)
unstack b2 b15 (1)
put-down b2 (1)
unstack b15 b13 (1)
put-down b15 (1)
pick-up b13 (1)
stack b13 b25 (1)
pick-up b15 (1)
stack b15 b13 (1)
pick-up b2 (1)
stack b2 b15 (1)
unstack b16 b4 (1)
put-down b16 (1)
unstack b4 b3 (1)
put-down b4 (1)
unstack b3 b18 (1)
put-down b3 (1)
pick-up b4 (1)
stack b4 b3 (1)
pick-up b16 (1)
stack b16 b4 (1)
unstack b18 b11 (1)
put-down b18 (1)
unstack b11 b8 (1)
put-down b11 (1)
pick-up b18 (1)
stack b18 b11 (1)
pick-up b8 (1)
stack b8 b21 (1)
unstack b18 b11 (1)
put-down b18 (1)
pick-up b11 (1)
stack b11 b8 (1)
pick-up b18 (1)
stack b18 b11 (1)
unstack b16 b4 (1)
put-down b16 (1)
unstack b4 b3 (1)
put-down b4 (1)
pick-up b16 (1)
stack b16 b4 (1)
pick-up b3 (1)
stack b3 b18 (1)
unstack b16 b4 (1)
put-down b16 (1)
pick-up b4 (1)
stack b4 b3 (1)
pick-up b16 (1)
stack b16 b4 (1)
[t=0.046672s, 27340 KB] Plan length: 160 step(s).
[t=0.046672s, 27340 KB] Plan cost: 160
[t=0.046672s, 27340 KB] Expanded 662 state(s).
[t=0.046672s, 27340 KB] Reopened 0 state(s).
[t=0.046672s, 27340 KB] Evaluated 663 state(s).
[t=0.046672s, 27340 KB] Evaluations: 1326
[t=0.046672s, 27340 KB] Generated 5929 state(s).
[t=0.046672s, 27340 KB] Dead ends: 0 state(s).
[t=0.046672s, 27340 KB] Number of registered states: 663
[t=0.046672s, 27340 KB] Int hash set load factor: 663/1024 = 0.647461
[t=0.046672s, 27340 KB] Int hash set resizes: 10
[t=0.046672s, 27340 KB] Search time: 0.021496s
[t=0.046672s, 27340 KB] Total time: 0.046672s
Solution found.
Peak memory: 27340 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.22s
