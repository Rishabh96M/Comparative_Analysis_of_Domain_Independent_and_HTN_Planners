INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_23/bws_problem_23_98.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.011s wall-clock]
1750 relevant atoms
1173 auxiliary atoms
2923 final queue length
5091 total queue pushes
Completing instantiation... [0.020s CPU, 0.019s wall-clock]
Instantiating: [0.030s CPU, 0.031s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
24 uncovered facts
Choosing groups: [0.000s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.008s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.027s wall-clock]
1564 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
46 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.014s wall-clock]
Reordering and filtering variables...
47 of 47 variables necessary.
24 of 47 mutex groups necessary.
1058 of 1058 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.007s wall-clock]
Translator variables: 47
Translator derived variables: 0
Translator facts: 600
Translator goal facts: 18
Translator mutex groups: 24
Translator total mutex groups size: 576
Translator operators: 1058
Translator axioms: 0
Translator task size: 9107
Translator peak memory: 37488 KB
Writing output... [0.000s CPU, 0.006s wall-clock]
Done! [0.090s CPU, 0.099s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.8842e-05s, 24488 KB] reading input...
[t=0.0029175s, 25428 KB] done reading input!
[t=0.00382246s, 25824 KB] Initializing landmark count heuristic...
[t=0.00385472s, 25824 KB] Generating landmark graph...
[t=0.00392794s, 25824 KB] Building a landmark graph with reasonable orders.
[t=0.0039948s, 25956 KB] Initializing Exploration...
[t=0.00429879s, 26256 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0157564s, 26652 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0158323s, 26652 KB] Landmarks generation time: 0.011904s
[t=0.0158472s, 26652 KB] Discovered 98 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0158826s, 26652 KB] 314 edges
[t=0.0158956s, 26652 KB] approx. reasonable orders
[t=0.0162903s, 26652 KB] approx. obedient reasonable orders
[t=0.0163165s, 26652 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0163271s, 26652 KB] Landmarks generation time: 0.0124646s
[t=0.016337s, 26652 KB] Discovered 98 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0163455s, 26652 KB] 321 edges
[t=0.0163542s, 26652 KB] Landmark graph generation time: 0.0125069s
[t=0.0163631s, 26652 KB] Landmark graph contains 98 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0163714s, 26652 KB] Landmark graph contains 321 orderings.
[t=0.0167061s, 26652 KB] Simplifying 4186 unary operators... done! [3174 unary operators]
[t=0.0177847s, 26652 KB] time to simplify: 0.00115849s
[t=0.0179501s, 26652 KB] Initializing additive heuristic...
[t=0.0179706s, 26652 KB] Initializing FF heuristic...
[t=0.0180398s, 26652 KB] Building successor generator...done!
[t=0.0182623s, 26652 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0182721s, 26652 KB] time for successor generation creation: 0.000183089s
[t=0.0182847s, 26652 KB] Variables: 47
[t=0.0182935s, 26652 KB] FactPairs: 600
[t=0.0183019s, 26652 KB] Bytes per state: 20
[t=0.0183928s, 26652 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0184354s, 26652 KB] 47 initial landmarks, 18 goal landmarks
[t=0.0184958s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0185106s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0185221s, 26652 KB] g=0, 1 evaluated, 0 expanded
[t=0.0185594s, 26652 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0185721s, 26652 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0187908s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0188009s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0188094s, 26652 KB] g=2, 8 evaluated, 7 expanded
[t=0.0190092s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0190184s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0190268s, 26652 KB] g=4, 15 evaluated, 14 expanded
[t=0.0192312s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.019241s, 26652 KB] g=6, 22 evaluated, 21 expanded
[t=0.0193371s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 46
[t=0.0193465s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.019355s, 26652 KB] g=6, 25 evaluated, 24 expanded
[t=0.0193928s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0194018s, 26652 KB] g=7, 26 evaluated, 25 expanded
[t=0.019439s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.0194478s, 26652 KB] g=8, 27 evaluated, 26 expanded
[t=0.0197507s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0197604s, 26652 KB] g=10, 38 evaluated, 37 expanded
[t=0.019822s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.019831s, 26652 KB] g=11, 40 evaluated, 39 expanded
[t=0.0201013s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0201108s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0201231s, 26652 KB] g=12, 50 evaluated, 49 expanded
[t=0.0201615s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 42
[t=0.0201707s, 26652 KB] g=13, 51 evaluated, 50 expanded
[t=0.0204965s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 41
[t=0.0205133s, 26652 KB] g=15, 63 evaluated, 62 expanded
[t=0.0208024s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0208134s, 26652 KB] g=17, 73 evaluated, 72 expanded
[t=0.0211674s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 38
[t=0.0211778s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.021186s, 26652 KB] g=18, 86 evaluated, 85 expanded
[t=0.0212233s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.0212326s, 26652 KB] g=19, 87 evaluated, 86 expanded
[t=0.0215686s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 36
[t=0.02158s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0215886s, 26652 KB] g=20, 99 evaluated, 98 expanded
[t=0.0216259s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 35
[t=0.0216349s, 26652 KB] g=21, 100 evaluated, 99 expanded
[t=0.0219583s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0219716s, 26652 KB] g=23, 112 evaluated, 111 expanded
[t=0.0221921s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0222043s, 26652 KB] g=25, 120 evaluated, 119 expanded
[t=0.0222674s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 32
[t=0.0222782s, 26652 KB] g=26, 122 evaluated, 121 expanded
[t=0.0223175s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0223267s, 26652 KB] g=24, 123 evaluated, 122 expanded
[t=0.0226894s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.022703s, 26652 KB] g=26, 136 evaluated, 135 expanded
[t=0.0227424s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0227531s, 26652 KB] g=28, 137 evaluated, 136 expanded
[t=0.0231619s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 28
[t=0.0231894s, 26652 KB] g=30, 152 evaluated, 151 expanded
[t=0.0234116s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 27
[t=0.0234253s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0234339s, 26652 KB] g=32, 160 evaluated, 159 expanded
[t=0.0236816s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0237014s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0237105s, 26652 KB] g=34, 169 evaluated, 168 expanded
[t=0.0239077s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 23
[t=0.023921s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.0239294s, 26652 KB] g=36, 176 evaluated, 175 expanded
[t=0.0241213s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0241461s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.024156s, 26652 KB] g=38, 183 evaluated, 182 expanded
[t=0.0243338s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0243467s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.024373s, 26652 KB] g=40, 189 evaluated, 188 expanded
[t=0.0249892s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0250044s, 26652 KB] g=45, 212 evaluated, 211 expanded
[t=0.0250692s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 16
[t=0.0250789s, 26652 KB] g=46, 214 evaluated, 213 expanded
[t=0.0252453s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.025256s, 26652 KB] g=47, 220 evaluated, 219 expanded
[t=0.0252942s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0253041s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0253142s, 26652 KB] g=48, 221 evaluated, 220 expanded
[t=0.0255163s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 12
[t=0.0255342s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0255446s, 26652 KB] g=50, 228 evaluated, 227 expanded
[t=0.0256847s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0256943s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0257026s, 26652 KB] g=52, 233 evaluated, 232 expanded
[t=0.0258694s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0258787s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.025887s, 26652 KB] g=54, 239 evaluated, 238 expanded
[t=0.026024s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.026034s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.0260424s, 26652 KB] g=56, 244 evaluated, 243 expanded
[t=0.0261518s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0261609s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0261692s, 26652 KB] g=58, 248 evaluated, 247 expanded
[t=0.026709s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0267198s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.0267284s, 26652 KB] g=66, 268 evaluated, 267 expanded
[t=0.0267884s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0267977s, 26652 KB] g=66, 270 evaluated, 269 expanded
[t=0.0268811s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0268906s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.0268993s, 26652 KB] g=68, 273 evaluated, 272 expanded
[t=0.0280977s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0281268s, 26652 KB] g=86, 327 evaluated, 326 expanded
[t=0.0281973s, 26652 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0282269s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0282365s, 26652 KB] g=88, 330 evaluated, 329 expanded
[t=0.0284338s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.0284444s, 26652 KB] g=96, 341 evaluated, 340 expanded
[t=0.0285102s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0285197s, 26652 KB] g=100, 345 evaluated, 344 expanded
[t=0.0285387s, 26652 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.0285482s, 26652 KB] g=101, 346 evaluated, 345 expanded
[t=0.0285645s, 26652 KB] Solution found!
[t=0.0285755s, 26652 KB] Actual search time: 0.0101359s
unstack b5 b11 (1)
put-down b5 (1)
unstack b6 b13 (1)
put-down b6 (1)
unstack b15 b10 (1)
stack b15 b6 (1)
unstack b10 b22 (1)
stack b10 b13 (1)
unstack b22 b9 (1)
put-down b22 (1)
pick-up b12 (1)
stack b12 b22 (1)
unstack b23 b3 (1)
put-down b23 (1)
unstack b3 b19 (1)
put-down b3 (1)
unstack b19 b18 (1)
stack b19 b23 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b18 b17 (1)
put-down b18 (1)
unstack b10 b13 (1)
put-down b10 (1)
unstack b17 b21 (1)
stack b17 b11 (1)
unstack b21 b4 (1)
put-down b21 (1)
unstack b13 b16 (1)
stack b13 b18 (1)
unstack b16 b2 (1)
put-down b16 (1)
pick-up b10 (1)
stack b10 b13 (1)
pick-up b2 (1)
stack b2 b5 (1)
pick-up b3 (1)
stack b3 b2 (1)
pick-up b9 (1)
stack b9 b16 (1)
unstack b17 b11 (1)
put-down b17 (1)
unstack b11 b8 (1)
put-down b11 (1)
unstack b8 b7 (1)
stack b8 b20 (1)
unstack b7 b14 (1)
stack b7 b12 (1)
pick-up b11 (1)
stack b11 b8 (1)
unstack b14 b1 (1)
stack b14 b9 (1)
pick-up b1 (1)
stack b1 b15 (1)
pick-up b4 (1)
stack b4 b14 (1)
pick-up b17 (1)
stack b17 b11 (1)
unstack b10 b13 (1)
put-down b10 (1)
unstack b13 b18 (1)
put-down b13 (1)
pick-up b18 (1)
stack b18 b1 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b10 (1)
stack b10 b13 (1)
unstack b17 b11 (1)
put-down b17 (1)
unstack b11 b8 (1)
put-down b11 (1)
unstack b8 b20 (1)
put-down b8 (1)
pick-up b11 (1)
stack b11 b8 (1)
pick-up b17 (1)
stack b17 b11 (1)
unstack b20 b19 (1)
put-down b20 (1)
unstack b19 b23 (1)
put-down b19 (1)
pick-up b23 (1)
stack b23 b4 (1)
pick-up b19 (1)
stack b19 b23 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b17 b11 (1)
put-down b17 (1)
unstack b11 b8 (1)
put-down b11 (1)
pick-up b17 (1)
stack b17 b11 (1)
pick-up b8 (1)
stack b8 b20 (1)
unstack b17 b11 (1)
put-down b17 (1)
pick-up b11 (1)
stack b11 b8 (1)
pick-up b17 (1)
stack b17 b11 (1)
[t=0.0285856s, 26652 KB] Plan length: 102 step(s).
[t=0.0285856s, 26652 KB] Plan cost: 102
[t=0.0285856s, 26652 KB] Expanded 346 state(s).
[t=0.0285856s, 26652 KB] Reopened 0 state(s).
[t=0.0285856s, 26652 KB] Evaluated 347 state(s).
[t=0.0285856s, 26652 KB] Evaluations: 694
[t=0.0285856s, 26652 KB] Generated 3397 state(s).
[t=0.0285856s, 26652 KB] Dead ends: 0 state(s).
[t=0.0285856s, 26652 KB] Number of registered states: 347
[t=0.0285856s, 26652 KB] Int hash set load factor: 347/512 = 0.677734
[t=0.0285856s, 26652 KB] Int hash set resizes: 9
[t=0.0285856s, 26652 KB] Search time: 0.0101934s
[t=0.0285856s, 26652 KB] Total time: 0.0285856s
Solution found.
Peak memory: 26652 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.16s
