INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_30/bws_problem_30_44.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.000s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.019s wall-clock]
2912 relevant atoms
1950 auxiliary atoms
4862 final queue length
8526 total queue pushes
Completing instantiation... [0.030s CPU, 0.031s wall-clock]
Instantiating: [0.050s CPU, 0.053s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.010s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
31 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.010s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.002s wall-clock]
Translating task: [0.040s CPU, 0.049s wall-clock]
2670 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
60 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.023s wall-clock]
Reordering and filtering variables...
61 of 61 variables necessary.
31 of 61 mutex groups necessary.
1800 of 1800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.012s wall-clock]
Translator variables: 61
Translator derived variables: 0
Translator facts: 992
Translator goal facts: 28
Translator mutex groups: 31
Translator total mutex groups size: 961
Translator operators: 1800
Translator axioms: 0
Translator task size: 15452
Translator peak memory: 41336 KB
Writing output... [0.010s CPU, 0.009s wall-clock]
Done! [0.160s CPU, 0.161s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=2.0141e-05s, 24488 KB] reading input...
[t=0.00545753s, 26364 KB] done reading input!
[t=0.00712429s, 26760 KB] Initializing landmark count heuristic...
[t=0.00717576s, 26760 KB] Generating landmark graph...
[t=0.00728289s, 26892 KB] Building a landmark graph with reasonable orders.
[t=0.0073735s, 27024 KB] Initializing Exploration...
[t=0.00792255s, 27316 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0371851s, 28372 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0373144s, 28372 KB] Landmarks generation time: 0.0300428s
[t=0.037341s, 28372 KB] Discovered 143 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0373619s, 28372 KB] 1043 edges
[t=0.037372s, 28372 KB] approx. reasonable orders
[t=0.0470285s, 28372 KB] approx. obedient reasonable orders
[t=0.0475416s, 28372 KB] Removed 4 reasonable or obedient reasonable orders
[t=0.0475558s, 28372 KB] Landmarks generation time: 0.0403791s
[t=0.0475667s, 28372 KB] Discovered 143 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0475756s, 28372 KB] 1171 edges
[t=0.0475843s, 28372 KB] Landmark graph generation time: 0.0404154s
[t=0.0475928s, 28372 KB] Landmark graph contains 143 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0476008s, 28372 KB] Landmark graph contains 1171 orderings.
[t=0.0482846s, 28400 KB] Simplifying 7140 unary operators... done! [5400 unary operators]
[t=0.0500373s, 28400 KB] time to simplify: 0.00186298s
[t=0.0502475s, 28400 KB] Initializing additive heuristic...
[t=0.0502676s, 28400 KB] Initializing FF heuristic...
[t=0.0503286s, 28400 KB] Building successor generator...done!
[t=0.0507017s, 28400 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0507107s, 28400 KB] time for successor generation creation: 0.000323184s
[t=0.0507248s, 28400 KB] Variables: 61
[t=0.0507331s, 28400 KB] FactPairs: 992
[t=0.0507408s, 28400 KB] Bytes per state: 24
[t=0.0508595s, 28400 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.050894s, 28400 KB] 61 initial landmarks, 28 goal landmarks
[t=0.0509782s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 82
[t=0.0509882s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 58
[t=0.0510103s, 28400 KB] g=0, 1 evaluated, 0 expanded
[t=0.0510243s, 28400 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 82
[t=0.0510333s, 28400 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 58
[t=0.0512825s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 57
[t=0.0512926s, 28400 KB] g=2, 6 evaluated, 5 expanded
[t=0.0513947s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 81
[t=0.0514042s, 28400 KB] g=2, 8 evaluated, 7 expanded
[t=0.0518896s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 80
[t=0.0519155s, 28400 KB] g=4, 18 evaluated, 17 expanded
[t=0.052393s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 79
[t=0.0524148s, 28400 KB] g=6, 29 evaluated, 28 expanded
[t=0.0530152s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 78
[t=0.0530347s, 28400 KB] g=8, 42 evaluated, 41 expanded
[t=0.0534887s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 56
[t=0.0535s, 28400 KB] g=6, 52 evaluated, 51 expanded
[t=0.0536835s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 77
[t=0.0536938s, 28400 KB] g=10, 56 evaluated, 55 expanded
[t=0.0540497s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 55
[t=0.05406s, 28400 KB] g=8, 64 evaluated, 63 expanded
[t=0.0545104s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 76
[t=0.054521s, 28400 KB] g=12, 74 evaluated, 73 expanded
[t=0.055259s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 75
[t=0.0552693s, 28400 KB] g=14, 92 evaluated, 91 expanded
[t=0.0561179s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0561395s, 28400 KB] g=16, 111 evaluated, 110 expanded
[t=0.0571145s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0571314s, 28400 KB] g=18, 133 evaluated, 132 expanded
[t=0.058108s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0581312s, 28400 KB] g=20, 155 evaluated, 154 expanded
[t=0.0590695s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0590822s, 28400 KB] g=12, 176 evaluated, 175 expanded
[t=0.0594462s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0594569s, 28400 KB] g=22, 184 evaluated, 183 expanded
[t=0.0606729s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0606866s, 28400 KB] g=24, 212 evaluated, 211 expanded
[t=0.0617688s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0617806s, 28400 KB] g=26, 237 evaluated, 236 expanded
[t=0.0753629s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.0754611s, 28400 KB] g=22, 555 evaluated, 554 expanded
[t=0.0779201s, 28400 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0779429s, 28400 KB] g=30, 612 evaluated, 611 expanded
[t=0.0785295s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0785428s, 28400 KB] g=26, 625 evaluated, 624 expanded
[t=0.0793668s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.079379s, 28400 KB] g=28, 644 evaluated, 643 expanded
[t=0.0798416s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 50
[t=0.0798544s, 28400 KB] g=30, 654 evaluated, 653 expanded
[t=0.0804569s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0804686s, 28400 KB] g=32, 667 evaluated, 666 expanded
[t=0.0819149s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0819294s, 28400 KB] g=36, 700 evaluated, 699 expanded
[t=0.0828099s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0828238s, 28400 KB] g=38, 720 evaluated, 719 expanded
[t=0.0836958s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.0837142s, 28400 KB] g=40, 739 evaluated, 738 expanded
[t=0.0931294s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0931778s, 28400 KB] g=46, 954 evaluated, 953 expanded
[t=0.0941573s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0941697s, 28400 KB] g=48, 976 evaluated, 975 expanded
[t=0.094872s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0948841s, 28400 KB] g=50, 990 evaluated, 989 expanded
[t=0.0957258s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0957636s, 28400 KB] g=52, 1007 evaluated, 1006 expanded
[t=0.096574s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.096588s, 28400 KB] g=54, 1024 evaluated, 1023 expanded
[t=0.0984588s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0984697s, 28400 KB] g=58, 1067 evaluated, 1066 expanded
[t=0.100334s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.100347s, 28400 KB] g=60, 1110 evaluated, 1109 expanded
[t=0.107138s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.107171s, 28400 KB] g=64, 1266 evaluated, 1265 expanded
[t=0.108071s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.108097s, 28400 KB] g=66, 1286 evaluated, 1285 expanded
[t=0.141596s, 28400 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.141694s, 28400 KB] g=80, 2058 evaluated, 2057 expanded
[t=0.164801s, 28664 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.164868s, 28664 KB] g=94, 2586 evaluated, 2585 expanded
[t=0.180166s, 28664 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.180212s, 28664 KB] g=104, 2938 evaluated, 2937 expanded
[t=0.208155s, 28928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.208226s, 28928 KB] g=116, 3578 evaluated, 3577 expanded
[t=0.211607s, 28928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.211649s, 28928 KB] g=120, 3656 evaluated, 3655 expanded
[t=0.212144s, 28928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.212159s, 28928 KB] g=122, 3667 evaluated, 3666 expanded
[t=0.228842s, 29104 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.228897s, 29104 KB] g=134, 4053 evaluated, 4052 expanded
[t=0.229344s, 29104 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.229357s, 29104 KB] g=136, 4063 evaluated, 4062 expanded
[t=0.231698s, 29104 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.231713s, 29104 KB] g=140, 4118 evaluated, 4117 expanded
[t=0.232103s, 29104 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.232115s, 29104 KB] g=142, 4127 evaluated, 4126 expanded
[t=0.240633s, 29236 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.240704s, 29236 KB] g=160, 4328 evaluated, 4327 expanded
[t=0.492115s, 31444 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.492251s, 31444 KB] g=208, 10341 evaluated, 10340 expanded
[t=0.500126s, 31444 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.500168s, 31444 KB] g=226, 10531 evaluated, 10530 expanded
[t=0.523926s, 31576 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.524035s, 31576 KB] g=264, 11105 evaluated, 11104 expanded
[t=0.795137s, 34132 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.795207s, 34132 KB] g=46, 17505 evaluated, 17504 expanded
[t=0.82876s, 34396 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 66
[t=0.828854s, 34396 KB] g=58, 18328 evaluated, 18327 expanded
[t=0.832017s, 34532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 65
[t=0.832039s, 34532 KB] g=62, 18407 evaluated, 18406 expanded
[t=0.834473s, 34532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.834497s, 34532 KB] g=64, 18463 evaluated, 18462 expanded
[t=0.836093s, 34532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.836113s, 34532 KB] g=66, 18503 evaluated, 18502 expanded
[t=0.837746s, 34532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.837758s, 34532 KB] g=68, 18545 evaluated, 18544 expanded
[t=0.840488s, 34532 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.840508s, 34532 KB] g=70, 18612 evaluated, 18611 expanded
[t=0.842192s, 34664 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 56
[t=0.842231s, 34664 KB] g=72, 18655 evaluated, 18654 expanded
[t=0.844783s, 34664 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.844926s, 34664 KB] g=74, 18711 evaluated, 18710 expanded
[t=0.879127s, 34928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.8792s, 34928 KB] g=348, 19586 evaluated, 19585 expanded
[t=0.87951s, 34928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.879522s, 34928 KB] g=350, 19594 evaluated, 19593 expanded
[t=0.883376s, 34928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.883442s, 34928 KB] g=362, 19693 evaluated, 19692 expanded
[t=0.884394s, 34928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.884417s, 34928 KB] g=366, 19715 evaluated, 19714 expanded
[t=0.884677s, 34928 KB] New best heuristic value for ff(transform = adapt_costs(one)): 10
[t=0.884696s, 34928 KB] g=368, 19721 evaluated, 19720 expanded
[t=0.894642s, 35060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.894713s, 35060 KB] g=402, 20016 evaluated, 20015 expanded
[t=0.895365s, 35060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.895385s, 35060 KB] g=406, 20035 evaluated, 20034 expanded
[t=0.895599s, 35060 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.89562s, 35060 KB] g=408, 20041 evaluated, 20040 expanded
[t=0.898424s, 35192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.898467s, 35192 KB] g=424, 20126 evaluated, 20125 expanded
[t=0.899466s, 35192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.899504s, 35192 KB] g=432, 20150 evaluated, 20149 expanded
[t=0.899546s, 35192 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.899562s, 35192 KB] g=433, 20151 evaluated, 20150 expanded
[t=0.899679s, 35192 KB] Solution found!
[t=0.899733s, 35192 KB] Actual search time: 0.848853s
unstack b19 b16 (1)
stack b19 b26 (1)
unstack b4 b14 (1)
put-down b4 (1)
unstack b14 b9 (1)
stack b14 b29 (1)
unstack b9 b3 (1)
put-down b9 (1)
unstack b3 b13 (1)
stack b3 b16 (1)
pick-up b4 (1)
stack b4 b9 (1)
unstack b14 b29 (1)
put-down b14 (1)
unstack b29 b20 (1)
put-down b29 (1)
pick-up b14 (1)
stack b14 b29 (1)
unstack b20 b7 (1)
put-down b20 (1)
unstack b7 b30 (1)
stack b7 b14 (1)
unstack b13 b24 (1)
put-down b13 (1)
unstack b24 b22 (1)
stack b24 b20 (1)
unstack b30 b1 (1)
stack b30 b22 (1)
unstack b1 b27 (1)
stack b1 b7 (1)
unstack b27 b10 (1)
put-down b27 (1)
unstack b10 b2 (1)
put-down b10 (1)
unstack b2 b5 (1)
stack b2 b19 (1)
unstack b5 b18 (1)
stack b5 b10 (1)
unstack b18 b11 (1)
put-down b18 (1)
pick-up b13 (1)
stack b13 b18 (1)
unstack b11 b15 (1)
put-down b11 (1)
unstack b15 b8 (1)
stack b15 b24 (1)
unstack b8 b21 (1)
stack b8 b13 (1)
unstack b21 b17 (1)
put-down b21 (1)
unstack b17 b28 (1)
stack b17 b2 (1)
unstack b28 b23 (1)
stack b28 b4 (1)
unstack b23 b25 (1)
put-down b23 (1)
pick-up b25 (1)
stack b25 b3 (1)
pick-up b11 (1)
stack b11 b25 (1)
unstack b30 b22 (1)
put-down b30 (1)
pick-up b22 (1)
stack b22 b21 (1)
pick-up b30 (1)
stack b30 b22 (1)
unstack b15 b24 (1)
put-down b15 (1)
unstack b24 b20 (1)
put-down b24 (1)
pick-up b15 (1)
stack b15 b24 (1)
pick-up b20 (1)
stack b20 b11 (1)
unstack b15 b24 (1)
put-down b15 (1)
pick-up b24 (1)
stack b24 b20 (1)
pick-up b15 (1)
stack b15 b24 (1)
unstack b28 b4 (1)
put-down b28 (1)
unstack b4 b9 (1)
put-down b4 (1)
pick-up b28 (1)
stack b28 b4 (1)
pick-up b9 (1)
stack b9 b15 (1)
unstack b28 b4 (1)
put-down b28 (1)
pick-up b4 (1)
stack b4 b9 (1)
pick-up b28 (1)
stack b28 b4 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b18 (1)
put-down b13 (1)
pick-up b18 (1)
stack b18 b23 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b1 b7 (1)
put-down b1 (1)
unstack b7 b14 (1)
put-down b7 (1)
pick-up b1 (1)
stack b1 b7 (1)
unstack b14 b29 (1)
put-down b14 (1)
pick-up b29 (1)
stack b29 b30 (1)
pick-up b14 (1)
stack b14 b29 (1)
unstack b1 b7 (1)
put-down b1 (1)
pick-up b7 (1)
stack b7 b14 (1)
pick-up b1 (1)
stack b1 b7 (1)
unstack b17 b2 (1)
put-down b17 (1)
unstack b2 b19 (1)
put-down b2 (1)
pick-up b17 (1)
stack b17 b2 (1)
unstack b19 b26 (1)
put-down b19 (1)
unstack b26 b12 (1)
stack b26 b1 (1)
pick-up b12 (1)
stack b12 b28 (1)
pick-up b19 (1)
stack b19 b26 (1)
unstack b17 b2 (1)
put-down b17 (1)
pick-up b2 (1)
stack b2 b19 (1)
pick-up b17 (1)
stack b17 b2 (1)
unstack b12 b28 (1)
put-down b12 (1)
unstack b28 b4 (1)
put-down b28 (1)
unstack b4 b9 (1)
put-down b4 (1)
pick-up b28 (1)
stack b28 b4 (1)
pick-up b12 (1)
stack b12 b28 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b18 (1)
put-down b13 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b18 b23 (1)
put-down b18 (1)
pick-up b23 (1)
stack b23 b12 (1)
pick-up b18 (1)
stack b18 b23 (1)
unstack b8 b13 (1)
put-down b8 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b9 b15 (1)
put-down b9 (1)
unstack b15 b24 (1)
put-down b15 (1)
pick-up b9 (1)
stack b9 b15 (1)
unstack b24 b20 (1)
put-down b24 (1)
unstack b20 b11 (1)
put-down b20 (1)
pick-up b24 (1)
stack b24 b20 (1)
unstack b9 b15 (1)
put-down b9 (1)
pick-up b15 (1)
stack b15 b24 (1)
pick-up b9 (1)
stack b9 b15 (1)
unstack b11 b25 (1)
put-down b11 (1)
unstack b25 b3 (1)
put-down b25 (1)
pick-up b11 (1)
stack b11 b25 (1)
unstack b3 b16 (1)
put-down b3 (1)
unstack b16 b6 (1)
stack b16 b5 (1)
pick-up b3 (1)
stack b3 b16 (1)
pick-up b6 (1)
stack b6 b27 (1)
unstack b11 b25 (1)
put-down b11 (1)
pick-up b25 (1)
stack b25 b3 (1)
pick-up b11 (1)
stack b11 b25 (1)
unstack b9 b15 (1)
put-down b9 (1)
unstack b15 b24 (1)
put-down b15 (1)
pick-up b9 (1)
stack b9 b15 (1)
unstack b24 b20 (1)
put-down b24 (1)
pick-up b20 (1)
stack b20 b11 (1)
pick-up b24 (1)
stack b24 b20 (1)
unstack b9 b15 (1)
put-down b9 (1)
pick-up b15 (1)
stack b15 b24 (1)
pick-up b9 (1)
stack b9 b15 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b18 (1)
put-down b13 (1)
unstack b18 b23 (1)
put-down b18 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b23 b12 (1)
put-down b23 (1)
unstack b12 b28 (1)
put-down b12 (1)
pick-up b23 (1)
stack b23 b12 (1)
unstack b28 b4 (1)
put-down b28 (1)
pick-up b4 (1)
stack b4 b9 (1)
pick-up b28 (1)
stack b28 b4 (1)
unstack b23 b12 (1)
put-down b23 (1)
pick-up b12 (1)
stack b12 b28 (1)
pick-up b23 (1)
stack b23 b12 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b18 (1)
put-down b13 (1)
pick-up b18 (1)
stack b18 b23 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b18 b23 (1)
put-down b18 (1)
unstack b23 b12 (1)
put-down b23 (1)
pick-up b18 (1)
stack b18 b23 (1)
unstack b8 b13 (1)
put-down b8 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b12 b28 (1)
put-down b12 (1)
unstack b28 b4 (1)
put-down b28 (1)
pick-up b12 (1)
stack b12 b28 (1)
unstack b4 b9 (1)
put-down b4 (1)
unstack b9 b15 (1)
put-down b9 (1)
unstack b15 b24 (1)
put-down b15 (1)
pick-up b9 (1)
stack b9 b15 (1)
pick-up b4 (1)
stack b4 b9 (1)
unstack b12 b28 (1)
put-down b12 (1)
pick-up b28 (1)
stack b28 b4 (1)
pick-up b12 (1)
stack b12 b28 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b18 (1)
put-down b13 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b18 b23 (1)
put-down b18 (1)
pick-up b23 (1)
stack b23 b12 (1)
pick-up b18 (1)
stack b18 b23 (1)
unstack b8 b13 (1)
put-down b8 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b24 b20 (1)
put-down b24 (1)
unstack b20 b11 (1)
put-down b20 (1)
pick-up b24 (1)
stack b24 b20 (1)
unstack b11 b25 (1)
put-down b11 (1)
unstack b25 b3 (1)
put-down b25 (1)
pick-up b11 (1)
stack b11 b25 (1)
unstack b24 b20 (1)
put-down b24 (1)
pick-up b20 (1)
stack b20 b11 (1)
pick-up b24 (1)
stack b24 b20 (1)
unstack b3 b16 (1)
put-down b3 (1)
unstack b16 b5 (1)
put-down b16 (1)
pick-up b3 (1)
stack b3 b16 (1)
unstack b5 b10 (1)
put-down b5 (1)
pick-up b10 (1)
stack b10 b6 (1)
pick-up b5 (1)
stack b5 b10 (1)
unstack b3 b16 (1)
put-down b3 (1)
pick-up b16 (1)
stack b16 b5 (1)
pick-up b3 (1)
stack b3 b16 (1)
unstack b24 b20 (1)
put-down b24 (1)
unstack b20 b11 (1)
put-down b20 (1)
pick-up b24 (1)
stack b24 b20 (1)
unstack b11 b25 (1)
put-down b11 (1)
pick-up b25 (1)
stack b25 b3 (1)
pick-up b11 (1)
stack b11 b25 (1)
unstack b24 b20 (1)
put-down b24 (1)
pick-up b20 (1)
stack b20 b11 (1)
pick-up b24 (1)
stack b24 b20 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b18 (1)
put-down b13 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b18 b23 (1)
put-down b18 (1)
unstack b23 b12 (1)
put-down b23 (1)
unstack b12 b28 (1)
put-down b12 (1)
pick-up b23 (1)
stack b23 b12 (1)
pick-up b18 (1)
stack b18 b23 (1)
unstack b8 b13 (1)
put-down b8 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b28 b4 (1)
put-down b28 (1)
unstack b4 b9 (1)
put-down b4 (1)
pick-up b28 (1)
stack b28 b4 (1)
unstack b9 b15 (1)
put-down b9 (1)
pick-up b15 (1)
stack b15 b24 (1)
pick-up b9 (1)
stack b9 b15 (1)
unstack b28 b4 (1)
put-down b28 (1)
pick-up b4 (1)
stack b4 b9 (1)
pick-up b28 (1)
stack b28 b4 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b18 (1)
put-down b13 (1)
unstack b18 b23 (1)
put-down b18 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b8 (1)
stack b8 b13 (1)
unstack b23 b12 (1)
put-down b23 (1)
pick-up b12 (1)
stack b12 b28 (1)
pick-up b23 (1)
stack b23 b12 (1)
unstack b8 b13 (1)
put-down b8 (1)
unstack b13 b18 (1)
put-down b13 (1)
pick-up b18 (1)
stack b18 b23 (1)
pick-up b13 (1)
stack b13 b18 (1)
pick-up b8 (1)
stack b8 b13 (1)
[t=0.899762s, 35192 KB] Plan length: 434 step(s).
[t=0.899762s, 35192 KB] Plan cost: 434
[t=0.899762s, 35192 KB] Expanded 20152 state(s).
[t=0.899762s, 35192 KB] Reopened 0 state(s).
[t=0.899762s, 35192 KB] Evaluated 20153 state(s).
[t=0.899762s, 35192 KB] Evaluations: 40306
[t=0.899762s, 35192 KB] Generated 304903 state(s).
[t=0.899762s, 35192 KB] Dead ends: 0 state(s).
[t=0.899762s, 35192 KB] Number of registered states: 20153
[t=0.899762s, 35192 KB] Int hash set load factor: 20153/32768 = 0.615021
[t=0.899762s, 35192 KB] Int hash set resizes: 15
[t=0.899762s, 35192 KB] Search time: 0.848903s
[t=0.899762s, 35192 KB] Total time: 0.899762s
Solution found.
Peak memory: 35192 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 1.12s
