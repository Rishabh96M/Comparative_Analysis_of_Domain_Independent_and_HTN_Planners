INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_30/bws_problem_30_57.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.020s CPU, 0.019s wall-clock]
2912 relevant atoms
1950 auxiliary atoms
4862 final queue length
8530 total queue pushes
Completing instantiation... [0.040s CPU, 0.041s wall-clock]
Instantiating: [0.060s CPU, 0.062s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.010s CPU, 0.002s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
31 uncovered facts
Choosing groups: [0.000s CPU, 0.002s wall-clock]
Building translation key... [0.000s CPU, 0.001s wall-clock]
Computing fact groups: [0.010s CPU, 0.010s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.001s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.001s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.010s CPU, 0.002s wall-clock]
Translating task: [0.060s CPU, 0.061s wall-clock]
2670 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
60 propositions removed
Detecting unreachable propositions: [0.020s CPU, 0.023s wall-clock]
Reordering and filtering variables...
61 of 61 variables necessary.
31 of 61 mutex groups necessary.
1800 of 1800 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.020s CPU, 0.012s wall-clock]
Translator variables: 61
Translator derived variables: 0
Translator facts: 992
Translator goal facts: 26
Translator mutex groups: 31
Translator total mutex groups size: 961
Translator operators: 1800
Translator axioms: 0
Translator task size: 15450
Translator peak memory: 41336 KB
Writing output... [0.010s CPU, 0.010s wall-clock]
Done! [0.180s CPU, 0.186s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=1.8393e-05s, 24488 KB] reading input...
[t=0.00532592s, 26364 KB] done reading input!
[t=0.0062564s, 26760 KB] Initializing landmark count heuristic...
[t=0.00628963s, 26760 KB] Generating landmark graph...
[t=0.00638082s, 26892 KB] Building a landmark graph with reasonable orders.
[t=0.00647546s, 27024 KB] Initializing Exploration...
[t=0.00696911s, 27316 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.0328869s, 28108 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0329899s, 28108 KB] Landmarks generation time: 0.0266175s
[t=0.033013s, 28108 KB] Discovered 134 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0330299s, 28108 KB] 517 edges
[t=0.0330396s, 28108 KB] approx. reasonable orders
[t=0.0413649s, 28108 KB] approx. obedient reasonable orders
[t=0.0417228s, 28108 KB] Removed 2 reasonable or obedient reasonable orders
[t=0.0417357s, 28108 KB] Landmarks generation time: 0.0354444s
[t=0.041747s, 28108 KB] Discovered 134 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0417554s, 28108 KB] 625 edges
[t=0.0417636s, 28108 KB] Landmark graph generation time: 0.0354812s
[t=0.0417723s, 28108 KB] Landmark graph contains 134 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0417805s, 28108 KB] Landmark graph contains 625 orderings.
[t=0.0425014s, 28136 KB] Simplifying 7140 unary operators... done! [5400 unary operators]
[t=0.0443391s, 28268 KB] time to simplify: 0.00195512s
[t=0.0445613s, 28268 KB] Initializing additive heuristic...
[t=0.044585s, 28268 KB] Initializing FF heuristic...
[t=0.0446401s, 28268 KB] Building successor generator...done!
[t=0.0449485s, 28268 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0449594s, 28268 KB] time for successor generation creation: 0.000271682s
[t=0.0449743s, 28268 KB] Variables: 61
[t=0.0449827s, 28268 KB] FactPairs: 992
[t=0.0449903s, 28268 KB] Bytes per state: 24
[t=0.0450715s, 28268 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0451039s, 28268 KB] 60 initial landmarks, 26 goal landmarks
[t=0.0451693s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0451785s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 55
[t=0.0451875s, 28268 KB] g=0, 1 evaluated, 0 expanded
[t=0.0452021s, 28268 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 74
[t=0.0452104s, 28268 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 55
[t=0.0453935s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 73
[t=0.0454025s, 28268 KB] g=1, 5 evaluated, 4 expanded
[t=0.0454549s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 54
[t=0.0454635s, 28268 KB] g=2, 6 evaluated, 5 expanded
[t=0.0460874s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 53
[t=0.046107s, 28268 KB] g=4, 21 evaluated, 20 expanded
[t=0.0462928s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 72
[t=0.0463023s, 28268 KB] g=5, 25 evaluated, 24 expanded
[t=0.0470752s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 52
[t=0.0470857s, 28268 KB] g=6, 43 evaluated, 42 expanded
[t=0.0471395s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 71
[t=0.0471496s, 28268 KB] g=8, 44 evaluated, 43 expanded
[t=0.0479107s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 70
[t=0.0479205s, 28268 KB] g=10, 62 evaluated, 61 expanded
[t=0.0480638s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 51
[t=0.0480726s, 28268 KB] g=8, 65 evaluated, 64 expanded
[t=0.0488838s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 69
[t=0.0488929s, 28268 KB] g=12, 84 evaluated, 83 expanded
[t=0.0498719s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 68
[t=0.0498841s, 28268 KB] g=14, 107 evaluated, 106 expanded
[t=0.0509697s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 67
[t=0.0509824s, 28268 KB] g=16, 132 evaluated, 131 expanded
[t=0.0520201s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 64
[t=0.0520377s, 28268 KB] g=18, 155 evaluated, 154 expanded
[t=0.0525385s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 49
[t=0.0525496s, 28268 KB] g=12, 166 evaluated, 165 expanded
[t=0.0533225s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 63
[t=0.0533328s, 28268 KB] g=20, 184 evaluated, 183 expanded
[t=0.0544063s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 62
[t=0.0544251s, 28268 KB] g=22, 206 evaluated, 205 expanded
[t=0.055937s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.055949s, 28268 KB] g=24, 242 evaluated, 241 expanded
[t=0.0569553s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.0569658s, 28268 KB] g=26, 266 evaluated, 265 expanded
[t=0.0582196s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 59
[t=0.0582316s, 28268 KB] g=28, 295 evaluated, 294 expanded
[t=0.0597855s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 58
[t=0.0597974s, 28268 KB] g=30, 332 evaluated, 331 expanded
[t=0.0613288s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 48
[t=0.0613387s, 28268 KB] g=18, 369 evaluated, 368 expanded
[t=0.0615177s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0615272s, 28268 KB] g=32, 373 evaluated, 372 expanded
[t=0.0623204s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 47
[t=0.0623374s, 28268 KB] g=20, 392 evaluated, 391 expanded
[t=0.063035s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.0630457s, 28268 KB] g=34, 409 evaluated, 408 expanded
[t=0.0634319s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 46
[t=0.063442s, 28268 KB] g=22, 418 evaluated, 417 expanded
[t=0.0646728s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.064715s, 28268 KB] g=24, 444 evaluated, 443 expanded
[t=0.065421s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0654343s, 28268 KB] g=26, 460 evaluated, 459 expanded
[t=0.0657027s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 52
[t=0.0657142s, 28268 KB] g=36, 466 evaluated, 465 expanded
[t=0.0662819s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 43
[t=0.0662976s, 28268 KB] g=28, 479 evaluated, 478 expanded
[t=0.0670745s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0670888s, 28268 KB] g=30, 498 evaluated, 497 expanded
[t=0.0682186s, 28268 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0682332s, 28268 KB] g=38, 524 evaluated, 523 expanded
[t=0.0692838s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 41
[t=0.069299s, 28268 KB] g=36, 549 evaluated, 548 expanded
[t=0.0701518s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0701684s, 28268 KB] g=38, 568 evaluated, 567 expanded
[t=0.070734s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0707439s, 28268 KB] g=40, 581 evaluated, 580 expanded
[t=0.0763476s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 38
[t=0.0763803s, 28268 KB] g=46, 713 evaluated, 712 expanded
[t=0.0983047s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0984036s, 28268 KB] g=60, 1227 evaluated, 1226 expanded
[t=0.110485s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.110552s, 28268 KB] g=68, 1512 evaluated, 1511 expanded
[t=0.113511s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 35
[t=0.113528s, 28268 KB] g=74, 1583 evaluated, 1582 expanded
[t=0.115319s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.115342s, 28268 KB] g=78, 1623 evaluated, 1622 expanded
[t=0.115646s, 28268 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.115655s, 28268 KB] g=80, 1630 evaluated, 1629 expanded
[t=0.179129s, 28800 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.179197s, 28800 KB] g=98, 3139 evaluated, 3138 expanded
[t=0.179806s, 28800 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.179818s, 28800 KB] g=100, 3154 evaluated, 3153 expanded
[t=0.180364s, 28800 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.180376s, 28800 KB] g=102, 3167 evaluated, 3166 expanded
[t=0.181311s, 28800 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.181322s, 28800 KB] g=104, 3189 evaluated, 3188 expanded
[t=0.181818s, 28800 KB] New best heuristic value for ff(transform = adapt_costs(one)): 24
[t=0.181829s, 28800 KB] g=106, 3201 evaluated, 3200 expanded
[t=0.182301s, 28800 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.182313s, 28800 KB] g=108, 3212 evaluated, 3211 expanded
[t=0.192378s, 28932 KB] New best heuristic value for ff(transform = adapt_costs(one)): 22
[t=0.19247s, 28932 KB] g=122, 3455 evaluated, 3454 expanded
[t=0.226565s, 29196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.226644s, 29196 KB] g=138, 4267 evaluated, 4266 expanded
[t=0.231778s, 29196 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.231827s, 29196 KB] g=146, 4391 evaluated, 4390 expanded
[t=0.233328s, 29328 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.233346s, 29328 KB] g=150, 4428 evaluated, 4427 expanded
[t=0.23365s, 29328 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.233662s, 29328 KB] g=152, 4435 evaluated, 4434 expanded
[t=0.25637s, 29460 KB] New best heuristic value for ff(transform = adapt_costs(one)): 15
[t=0.256463s, 29460 KB] g=174, 4993 evaluated, 4992 expanded
[t=0.256797s, 29460 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.256809s, 29460 KB] g=176, 5001 evaluated, 5000 expanded
[t=0.259339s, 29460 KB] New best heuristic value for ff(transform = adapt_costs(one)): 12
[t=0.259357s, 29460 KB] g=184, 5065 evaluated, 5064 expanded
[t=0.259602s, 29460 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.259613s, 29460 KB] g=184, 5071 evaluated, 5070 expanded
[t=0.259868s, 29460 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.259878s, 29460 KB] g=186, 5077 evaluated, 5076 expanded
[t=0.268189s, 29596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.268273s, 29596 KB] g=216, 5304 evaluated, 5303 expanded
[t=0.269003s, 29596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 7
[t=0.269016s, 29596 KB] g=220, 5325 evaluated, 5324 expanded
[t=0.26922s, 29596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 5
[t=0.269232s, 29596 KB] g=222, 5331 evaluated, 5330 expanded
[t=0.270421s, 29596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 3
[t=0.270435s, 29596 KB] g=234, 5368 evaluated, 5367 expanded
[t=0.270616s, 29596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.270628s, 29596 KB] g=238, 5374 evaluated, 5373 expanded
[t=0.27065s, 29596 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.270664s, 29596 KB] g=239, 5375 evaluated, 5374 expanded
[t=0.270731s, 29596 KB] Solution found!
[t=0.270755s, 29596 KB] Actual search time: 0.225649s
unstack b20 b27 (1)
stack b20 b19 (1)
unstack b4 b30 (1)
put-down b4 (1)
unstack b28 b2 (1)
stack b28 b10 (1)
unstack b30 b5 (1)
stack b30 b28 (1)
unstack b27 b17 (1)
put-down b27 (1)
unstack b17 b3 (1)
stack b17 b4 (1)
unstack b2 b1 (1)
put-down b2 (1)
unstack b1 b24 (1)
put-down b1 (1)
unstack b24 b18 (1)
stack b24 b6 (1)
unstack b18 b22 (1)
stack b18 b23 (1)
pick-up b26 (1)
stack b26 b24 (1)
unstack b5 b12 (1)
stack b5 b18 (1)
unstack b12 b14 (1)
stack b12 b1 (1)
pick-up b14 (1)
stack b14 b27 (1)
pick-up b2 (1)
stack b2 b14 (1)
unstack b22 b8 (1)
put-down b22 (1)
unstack b8 b21 (1)
put-down b8 (1)
unstack b21 b15 (1)
put-down b21 (1)
pick-up b15 (1)
stack b15 b5 (1)
pick-up b22 (1)
stack b22 b15 (1)
unstack b20 b19 (1)
put-down b20 (1)
unstack b19 b13 (1)
stack b19 b30 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b2 b14 (1)
put-down b2 (1)
unstack b14 b27 (1)
put-down b14 (1)
pick-up b2 (1)
stack b2 b14 (1)
pick-up b27 (1)
stack b27 b8 (1)
unstack b2 b14 (1)
put-down b2 (1)
pick-up b14 (1)
stack b14 b27 (1)
pick-up b2 (1)
stack b2 b14 (1)
unstack b26 b24 (1)
put-down b26 (1)
unstack b24 b6 (1)
put-down b24 (1)
pick-up b26 (1)
stack b26 b24 (1)
unstack b6 b9 (1)
stack b6 b21 (1)
unstack b12 b1 (1)
put-down b12 (1)
pick-up b1 (1)
stack b1 b9 (1)
pick-up b12 (1)
stack b12 b1 (1)
unstack b26 b24 (1)
put-down b26 (1)
pick-up b24 (1)
stack b24 b6 (1)
pick-up b26 (1)
stack b26 b24 (1)
unstack b20 b19 (1)
put-down b20 (1)
unstack b19 b30 (1)
put-down b19 (1)
unstack b30 b28 (1)
put-down b30 (1)
pick-up b19 (1)
stack b19 b30 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b28 b10 (1)
put-down b28 (1)
unstack b10 b29 (1)
stack b10 b12 (1)
unstack b29 b11 (1)
put-down b29 (1)
unstack b11 b7 (1)
stack b11 b26 (1)
pick-up b28 (1)
stack b28 b10 (1)
unstack b7 b16 (1)
stack b7 b2 (1)
unstack b16 b25 (1)
stack b16 b13 (1)
pick-up b25 (1)
stack b25 b17 (1)
pick-up b3 (1)
stack b3 b7 (1)
unstack b20 b19 (1)
put-down b20 (1)
unstack b19 b30 (1)
put-down b19 (1)
pick-up b20 (1)
stack b20 b19 (1)
pick-up b30 (1)
stack b30 b28 (1)
unstack b20 b19 (1)
put-down b20 (1)
pick-up b19 (1)
stack b19 b30 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b22 b15 (1)
put-down b22 (1)
unstack b15 b5 (1)
put-down b15 (1)
unstack b5 b18 (1)
put-down b5 (1)
pick-up b15 (1)
stack b15 b5 (1)
pick-up b22 (1)
stack b22 b15 (1)
unstack b18 b23 (1)
put-down b18 (1)
pick-up b23 (1)
stack b23 b25 (1)
pick-up b18 (1)
stack b18 b23 (1)
unstack b22 b15 (1)
put-down b22 (1)
unstack b15 b5 (1)
put-down b15 (1)
pick-up b22 (1)
stack b22 b15 (1)
pick-up b5 (1)
stack b5 b18 (1)
unstack b22 b15 (1)
put-down b22 (1)
pick-up b15 (1)
stack b15 b5 (1)
pick-up b22 (1)
stack b22 b15 (1)
unstack b3 b7 (1)
put-down b3 (1)
unstack b7 b2 (1)
put-down b7 (1)
unstack b2 b14 (1)
put-down b2 (1)
pick-up b7 (1)
stack b7 b2 (1)
pick-up b3 (1)
stack b3 b7 (1)
unstack b14 b27 (1)
put-down b14 (1)
unstack b27 b8 (1)
put-down b27 (1)
pick-up b14 (1)
stack b14 b27 (1)
pick-up b8 (1)
stack b8 b16 (1)
unstack b14 b27 (1)
put-down b14 (1)
pick-up b27 (1)
stack b27 b8 (1)
pick-up b14 (1)
stack b14 b27 (1)
unstack b3 b7 (1)
put-down b3 (1)
unstack b7 b2 (1)
put-down b7 (1)
pick-up b2 (1)
stack b2 b14 (1)
pick-up b7 (1)
stack b7 b2 (1)
pick-up b3 (1)
stack b3 b7 (1)
unstack b20 b19 (1)
put-down b20 (1)
unstack b19 b30 (1)
put-down b19 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b30 b28 (1)
put-down b30 (1)
unstack b28 b10 (1)
put-down b28 (1)
pick-up b30 (1)
stack b30 b28 (1)
unstack b20 b19 (1)
put-down b20 (1)
pick-up b19 (1)
stack b19 b30 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b10 b12 (1)
put-down b10 (1)
unstack b12 b1 (1)
put-down b12 (1)
pick-up b10 (1)
stack b10 b12 (1)
unstack b1 b9 (1)
put-down b1 (1)
pick-up b9 (1)
stack b9 b11 (1)
pick-up b1 (1)
stack b1 b9 (1)
unstack b10 b12 (1)
put-down b10 (1)
pick-up b12 (1)
stack b12 b1 (1)
pick-up b10 (1)
stack b10 b12 (1)
unstack b20 b19 (1)
put-down b20 (1)
unstack b19 b30 (1)
put-down b19 (1)
pick-up b20 (1)
stack b20 b19 (1)
unstack b30 b28 (1)
put-down b30 (1)
pick-up b28 (1)
stack b28 b10 (1)
pick-up b30 (1)
stack b30 b28 (1)
unstack b20 b19 (1)
put-down b20 (1)
pick-up b19 (1)
stack b19 b30 (1)
pick-up b20 (1)
stack b20 b19 (1)
[t=0.270765s, 29596 KB] Plan length: 240 step(s).
[t=0.270765s, 29596 KB] Plan cost: 240
[t=0.270765s, 29596 KB] Expanded 5376 state(s).
[t=0.270765s, 29596 KB] Reopened 0 state(s).
[t=0.270765s, 29596 KB] Evaluated 5377 state(s).
[t=0.270765s, 29596 KB] Evaluations: 10754
[t=0.270765s, 29596 KB] Generated 81885 state(s).
[t=0.270765s, 29596 KB] Dead ends: 0 state(s).
[t=0.270765s, 29596 KB] Number of registered states: 5377
[t=0.270765s, 29596 KB] Int hash set load factor: 5377/8192 = 0.656372
[t=0.270765s, 29596 KB] Int hash set resizes: 13
[t=0.270765s, 29596 KB] Search time: 0.225694s
[t=0.270765s, 29596 KB] Total time: 0.270765s
Solution found.
Peak memory: 29596 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.51s
