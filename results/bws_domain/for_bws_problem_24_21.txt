INFO     planner time limit: None
INFO     planner memory limit: None

INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/translate/translate.py bws_domain_actions.pddl ../bws_domain/problem_size_24/bws_problem_24_21.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.001s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.001s wall-clock]
Preparing model... [0.000s CPU, 0.000s wall-clock]
Generated 21 rules.
Computing model... [0.010s CPU, 0.011s wall-clock]
1898 relevant atoms
1272 auxiliary atoms
3170 final queue length
5527 total queue pushes
Completing instantiation... [0.020s CPU, 0.019s wall-clock]
Instantiating: [0.030s CPU, 0.032s wall-clock]
Computing fact groups...
Finding invariants...
10 initial candidates
Finding invariants: [0.000s CPU, 0.002s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.001s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
25 uncovered facts
Choosing groups: [0.010s CPU, 0.001s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.010s CPU, 0.007s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.030s CPU, 0.028s wall-clock]
1704 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
48 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.018s wall-clock]
Reordering and filtering variables...
49 of 49 variables necessary.
25 of 49 mutex groups necessary.
1152 of 1152 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.010s CPU, 0.007s wall-clock]
Translator variables: 49
Translator derived variables: 0
Translator facts: 650
Translator goal facts: 22
Translator mutex groups: 25
Translator total mutex groups size: 625
Translator operators: 1152
Translator axioms: 0
Translator task size: 9914
Translator peak memory: 37876 KB
Writing output... [0.010s CPU, 0.006s wall-clock]
Done! [0.100s CPU, 0.102s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/rishabh_mukund/Workspace/AI_Planning/fast-downward-22.12/builds/release/bin/downward --evaluator 'hlm=lmcount(lm_factory=lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=false)' --evaluator 'hff=ff(transform=adapt_costs(one))' --search 'lazy_greedy([hff,hlm],preferred=[hff,hlm],cost_type=one,reopen_closed=false)' --internal-plan-file sas_plan < output.sas
[t=5.723e-05s, 24488 KB] reading input...
[t=0.00362262s, 25532 KB] done reading input!
[t=0.00445438s, 25928 KB] Initializing landmark count heuristic...
[t=0.00448294s, 25928 KB] Generating landmark graph...
[t=0.00456672s, 25928 KB] Building a landmark graph with reasonable orders.
[t=0.00463302s, 26060 KB] Initializing Exploration...
[t=0.00495162s, 26388 KB] Generating landmarks using the RPG/SAS+ approach
[t=0.018987s, 26916 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0190651s, 26916 KB] Landmarks generation time: 0.0145002s
[t=0.01908s, 26916 KB] Discovered 110 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0190954s, 26916 KB] 474 edges
[t=0.0191054s, 26916 KB] approx. reasonable orders
[t=0.0195296s, 26916 KB] approx. obedient reasonable orders
[t=0.0195572s, 26916 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.0195663s, 26916 KB] Landmarks generation time: 0.0150808s
[t=0.0195757s, 26916 KB] Discovered 110 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.019584s, 26916 KB] 478 edges
[t=0.019593s, 26916 KB] Landmark graph generation time: 0.0151173s
[t=0.0196017s, 26916 KB] Landmark graph contains 110 landmarks, of which 0 are disjunctive and 0 are conjunctive.
[t=0.0196097s, 26916 KB] Landmark graph contains 478 orderings.
[t=0.0199775s, 26916 KB] Simplifying 4560 unary operators... done! [3456 unary operators]
[t=0.0210812s, 26916 KB] time to simplify: 0.00119058s
[t=0.0212384s, 26916 KB] Initializing additive heuristic...
[t=0.0212538s, 26916 KB] Initializing FF heuristic...
[t=0.0213213s, 26916 KB] Building successor generator...done!
[t=0.0215604s, 26916 KB] peak memory difference for successor generator creation: 0 KB
[t=0.0215686s, 26916 KB] time for successor generation creation: 0.000206093s
[t=0.0215945s, 26916 KB] Variables: 49
[t=0.0216028s, 26916 KB] FactPairs: 650
[t=0.021611s, 26916 KB] Bytes per state: 20
[t=0.0217003s, 26916 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.0217323s, 26916 KB] 49 initial landmarks, 22 goal landmarks
[t=0.0217839s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0217933s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0218019s, 26916 KB] g=0, 1 evaluated, 0 expanded
[t=0.0218153s, 26916 KB] Initial heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 61
[t=0.0218243s, 26916 KB] Initial heuristic value for ff(transform = adapt_costs(one)): 45
[t=0.0220108s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 60
[t=0.02202s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 44
[t=0.0220281s, 26916 KB] g=2, 7 evaluated, 6 expanded
[t=0.0222023s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 57
[t=0.0222112s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 42
[t=0.0222194s, 26916 KB] g=4, 13 evaluated, 12 expanded
[t=0.0224016s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 54
[t=0.022417s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 40
[t=0.0224289s, 26916 KB] g=6, 19 evaluated, 18 expanded
[t=0.0226201s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 39
[t=0.0226293s, 26916 KB] g=8, 25 evaluated, 24 expanded
[t=0.0226656s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 53
[t=0.0226741s, 26916 KB] g=8, 26 evaluated, 25 expanded
[t=0.0229898s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 51
[t=0.0229995s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 37
[t=0.0230076s, 26916 KB] g=10, 37 evaluated, 36 expanded
[t=0.0231813s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 50
[t=0.0231898s, 26916 KB] g=12, 43 evaluated, 42 expanded
[t=0.0238524s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 49
[t=0.0238673s, 26916 KB] g=14, 67 evaluated, 66 expanded
[t=0.0240733s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 36
[t=0.0240925s, 26916 KB] g=14, 74 evaluated, 73 expanded
[t=0.0242845s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 48
[t=0.0242934s, 26916 KB] g=16, 81 evaluated, 80 expanded
[t=0.0248624s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 47
[t=0.024875s, 26916 KB] g=18, 102 evaluated, 101 expanded
[t=0.0249924s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 45
[t=0.0250016s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 34
[t=0.0250103s, 26916 KB] g=18, 106 evaluated, 105 expanded
[t=0.0252362s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 44
[t=0.0252481s, 26916 KB] g=20, 113 evaluated, 112 expanded
[t=0.0254749s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 43
[t=0.0254838s, 26916 KB] g=22, 121 evaluated, 120 expanded
[t=0.0258669s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 40
[t=0.0258767s, 26916 KB] g=24, 135 evaluated, 134 expanded
[t=0.0259146s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 33
[t=0.0259233s, 26916 KB] g=22, 136 evaluated, 135 expanded
[t=0.0262672s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 32
[t=0.0262769s, 26916 KB] g=24, 149 evaluated, 148 expanded
[t=0.026317s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 37
[t=0.026326s, 26916 KB] g=26, 150 evaluated, 149 expanded
[t=0.0266993s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 31
[t=0.0267095s, 26916 KB] g=26, 164 evaluated, 163 expanded
[t=0.0267982s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 34
[t=0.0268071s, 26916 KB] g=28, 167 evaluated, 166 expanded
[t=0.0271581s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 33
[t=0.0271739s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 30
[t=0.0271829s, 26916 KB] g=30, 180 evaluated, 179 expanded
[t=0.0274253s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 29
[t=0.0274369s, 26916 KB] g=32, 189 evaluated, 188 expanded
[t=0.0274746s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 31
[t=0.0274836s, 26916 KB] g=32, 190 evaluated, 189 expanded
[t=0.0278262s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 28
[t=0.0278385s, 26916 KB] g=34, 203 evaluated, 202 expanded
[t=0.0279026s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 29
[t=0.0279117s, 26916 KB] g=34, 205 evaluated, 204 expanded
[t=0.0281019s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 27
[t=0.0281134s, 26916 KB] g=36, 212 evaluated, 211 expanded
[t=0.0290593s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 26
[t=0.0290788s, 26916 KB] g=42, 246 evaluated, 245 expanded
[t=0.029371s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 25
[t=0.0293841s, 26916 KB] g=44, 256 evaluated, 255 expanded
[t=0.0296181s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 24
[t=0.0296361s, 26916 KB] g=46, 264 evaluated, 263 expanded
[t=0.0298319s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 22
[t=0.0298417s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 26
[t=0.0298496s, 26916 KB] g=48, 271 evaluated, 270 expanded
[t=0.0300177s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 21
[t=0.0300277s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 25
[t=0.0300357s, 26916 KB] g=50, 277 evaluated, 276 expanded
[t=0.0307522s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 19
[t=0.0307618s, 26916 KB] g=52, 304 evaluated, 303 expanded
[t=0.0309522s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 18
[t=0.0309626s, 26916 KB] g=54, 311 evaluated, 310 expanded
[t=0.0311303s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 15
[t=0.0311395s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 23
[t=0.0311478s, 26916 KB] g=56, 317 evaluated, 316 expanded
[t=0.0313475s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 13
[t=0.0313569s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 21
[t=0.0313655s, 26916 KB] g=58, 324 evaluated, 323 expanded
[t=0.0315296s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 10
[t=0.0315389s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 20
[t=0.031548s, 26916 KB] g=60, 330 evaluated, 329 expanded
[t=0.0316087s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 9
[t=0.0316178s, 26916 KB] g=61, 332 evaluated, 331 expanded
[t=0.0316552s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 8
[t=0.0316649s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 19
[t=0.0316737s, 26916 KB] g=62, 333 evaluated, 332 expanded
[t=0.0322306s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 7
[t=0.0322447s, 26916 KB] g=66, 354 evaluated, 353 expanded
[t=0.0323657s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 6
[t=0.0323751s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 18
[t=0.0323835s, 26916 KB] g=68, 358 evaluated, 357 expanded
[t=0.0333114s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 5
[t=0.0333231s, 26916 KB] g=76, 392 evaluated, 391 expanded
[t=0.0334146s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 4
[t=0.0334234s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 17
[t=0.0334313s, 26916 KB] g=78, 395 evaluated, 394 expanded
[t=0.0355213s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 16
[t=0.0355356s, 26916 KB] g=92, 475 evaluated, 474 expanded
[t=0.0356493s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 3
[t=0.0356584s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 14
[t=0.0356667s, 26916 KB] g=94, 479 evaluated, 478 expanded
[t=0.0359107s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 13
[t=0.0359239s, 26916 KB] g=98, 488 evaluated, 487 expanded
[t=0.0360098s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 2
[t=0.0360192s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 11
[t=0.0360273s, 26916 KB] g=100, 491 evaluated, 490 expanded
[t=0.0451443s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 9
[t=0.0452002s, 26916 KB] g=138, 879 evaluated, 878 expanded
[t=0.0453914s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 8
[t=0.0454016s, 26916 KB] g=142, 888 evaluated, 887 expanded
[t=0.0454712s, 26916 KB] New best heuristic value for lmcount(lm_factory = lm_reasonable_orders_hps(lm_rhw), transform = adapt_costs(one), pref = false): 1
[t=0.0454802s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 6
[t=0.0454884s, 26916 KB] g=144, 891 evaluated, 890 expanded
[t=0.0461451s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 4
[t=0.0461563s, 26916 KB] g=160, 929 evaluated, 928 expanded
[t=0.0463158s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 2
[t=0.0463244s, 26916 KB] g=168, 940 evaluated, 939 expanded
[t=0.0463415s, 26916 KB] New best heuristic value for ff(transform = adapt_costs(one)): 1
[t=0.04635s, 26916 KB] g=169, 941 evaluated, 940 expanded
[t=0.0463648s, 26916 KB] Solution found!
[t=0.0463799s, 26916 KB] Actual search time: 0.0246456s
unstack b15 b16 (1)
put-down b15 (1)
unstack b10 b24 (1)
stack b10 b15 (1)
unstack b23 b1 (1)
stack b23 b10 (1)
unstack b1 b3 (1)
stack b1 b4 (1)
unstack b3 b9 (1)
stack b3 b23 (1)
unstack b8 b12 (1)
put-down b8 (1)
pick-up b16 (1)
stack b16 b12 (1)
unstack b9 b17 (1)
put-down b9 (1)
unstack b17 b2 (1)
stack b17 b3 (1)
unstack b2 b20 (1)
put-down b2 (1)
unstack b1 b4 (1)
put-down b1 (1)
unstack b20 b21 (1)
stack b20 b2 (1)
unstack b24 b18 (1)
stack b24 b20 (1)
unstack b18 b19 (1)
stack b18 b17 (1)
unstack b21 b22 (1)
put-down b21 (1)
pick-up b22 (1)
stack b22 b16 (1)
pick-up b19 (1)
stack b19 b1 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b12 (1)
put-down b16 (1)
unstack b12 b7 (1)
put-down b12 (1)
unstack b7 b11 (1)
stack b7 b19 (1)
pick-up b16 (1)
stack b16 b12 (1)
pick-up b22 (1)
stack b22 b16 (1)
pick-up b8 (1)
stack b8 b7 (1)
unstack b11 b6 (1)
put-down b11 (1)
unstack b6 b13 (1)
stack b6 b24 (1)
pick-up b11 (1)
stack b11 b6 (1)
unstack b13 b5 (1)
stack b13 b21 (1)
pick-up b4 (1)
stack b4 b13 (1)
unstack b5 b14 (1)
stack b5 b9 (1)
pick-up b14 (1)
stack b14 b8 (1)
unstack b5 b9 (1)
put-down b5 (1)
pick-up b9 (1)
stack b9 b11 (1)
pick-up b5 (1)
stack b5 b9 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b12 (1)
put-down b16 (1)
pick-up b12 (1)
stack b12 b5 (1)
pick-up b16 (1)
stack b16 b12 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b14 b8 (1)
put-down b14 (1)
unstack b8 b7 (1)
put-down b8 (1)
pick-up b14 (1)
stack b14 b8 (1)
unstack b7 b19 (1)
put-down b7 (1)
unstack b19 b1 (1)
put-down b19 (1)
pick-up b1 (1)
stack b1 b4 (1)
pick-up b19 (1)
stack b19 b1 (1)
pick-up b7 (1)
stack b7 b19 (1)
unstack b14 b8 (1)
put-down b14 (1)
pick-up b8 (1)
stack b8 b7 (1)
pick-up b14 (1)
stack b14 b8 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b12 (1)
put-down b16 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b12 b5 (1)
put-down b12 (1)
unstack b5 b9 (1)
put-down b5 (1)
unstack b9 b11 (1)
put-down b9 (1)
pick-up b5 (1)
stack b5 b9 (1)
pick-up b12 (1)
stack b12 b5 (1)
unstack b22 b16 (1)
put-down b22 (1)
pick-up b16 (1)
stack b16 b12 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b11 b6 (1)
put-down b11 (1)
unstack b6 b24 (1)
put-down b6 (1)
pick-up b11 (1)
stack b11 b6 (1)
unstack b24 b20 (1)
put-down b24 (1)
unstack b20 b2 (1)
put-down b20 (1)
pick-up b2 (1)
stack b2 b18 (1)
pick-up b20 (1)
stack b20 b2 (1)
pick-up b24 (1)
stack b24 b20 (1)
unstack b11 b6 (1)
put-down b11 (1)
pick-up b6 (1)
stack b6 b24 (1)
pick-up b11 (1)
stack b11 b6 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b12 (1)
put-down b16 (1)
unstack b12 b5 (1)
put-down b12 (1)
pick-up b16 (1)
stack b16 b12 (1)
pick-up b22 (1)
stack b22 b16 (1)
unstack b5 b9 (1)
put-down b5 (1)
pick-up b9 (1)
stack b9 b11 (1)
pick-up b5 (1)
stack b5 b9 (1)
unstack b22 b16 (1)
put-down b22 (1)
unstack b16 b12 (1)
put-down b16 (1)
pick-up b12 (1)
stack b12 b5 (1)
pick-up b16 (1)
stack b16 b12 (1)
pick-up b22 (1)
stack b22 b16 (1)
[t=0.04639s, 26916 KB] Plan length: 170 step(s).
[t=0.04639s, 26916 KB] Plan cost: 170
[t=0.04639s, 26916 KB] Expanded 941 state(s).
[t=0.04639s, 26916 KB] Reopened 0 state(s).
[t=0.04639s, 26916 KB] Evaluated 942 state(s).
[t=0.04639s, 26916 KB] Evaluations: 1884
[t=0.04639s, 26916 KB] Generated 6770 state(s).
[t=0.04639s, 26916 KB] Dead ends: 0 state(s).
[t=0.04639s, 26916 KB] Number of registered states: 942
[t=0.04639s, 26916 KB] Int hash set load factor: 942/1024 = 0.919922
[t=0.04639s, 26916 KB] Int hash set resizes: 10
[t=0.04639s, 26916 KB] Search time: 0.02469s
[t=0.04639s, 26916 KB] Total time: 0.04639s
Solution found.
Peak memory: 26916 KB
Remove intermediate file output.sas
search exit code: 0

INFO     Planner time: 0.20s
